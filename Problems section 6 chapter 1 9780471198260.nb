(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1311537,      24247]
NotebookOptionsPosition[   1298217,      24017]
NotebookOutlinePosition[   1298699,      24035]
CellTagsIndexPosition[   1298656,      24032]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
D is divergent. C is convergent in the solutions in the back of the book.\
\>", "Text",
 CellChangeTimes->{{3.8784857455468082`*^9, 
  3.878485761634157*^9}},ExpressionUUID->"c18538c4-1de5-411e-9b09-\
255db53b3132"],

Cell[CellGroupData[{

Cell["6.5b", "Section",
 CellChangeTimes->{{3.878485611179619*^9, 3.878485611679634*^9}, 
   3.87848568337679*^9},ExpressionUUID->"2400e692-a82a-4e3f-8afd-\
2037bf41bd28"],

Cell[CellGroupData[{

Cell["sum of 1/log(n) from n=2 to infinity", "WolframAlphaLong",
 CellChangeTimes->{{3.878485821974488*^9, 3.8784858888881674`*^9}, {
  3.8784859321770515`*^9, 3.8784860008323755`*^9}},
 CellLabel->
  "In[515]:=",ExpressionUUID->"d7626e00-eb9a-4968-b207-d6c108c34aaf"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "sum of 1/log(n) from n=2 to infinity", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Infinite sum", "scanner" -> "Sum", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"SumConvergence[1/Log[n], n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox[
               TagBox[
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "2"}], "\[Infinity]"], 
                    FractionBox["1", 
                    RowBox[{"log", "(", "n", ")"}]]}], ScriptLevel -> 0, 
                   StripOnInput -> False], HoldForm], TraditionalForm], 
                HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
              TemplateBox[{6}, "Spacer1"], "\"diverges\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[Accumulate[Table[1/Log[k], {k, 2, 7}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 
                 LineBox[{{2., 1.4426950408889634`}, {3., 
                  2.352934267515801}, {4., 3.074281787960283}, {
                  5.000000000000001, 3.6956167225198944`}, {6., 
                  4.253727349071141}, {7., 4.767625691440893}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{2., 
                  1.4426950408889634`}}, {{3., 2.352934267515801}}, {{4., 
                  3.074281787960283}}, {{5.000000000000001, 
                  3.6956167225198944`}}, {{6., 4.253727349071141}}, {{7., 
                  4.767625691440893}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}}, {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox["k", TraditionalForm], 
                FormBox[
                 SubscriptBox["\"S\"", "k"], TraditionalForm]}, 
              AxesOrigin -> {2., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{2., 7.}, {0., 4.767625691440893}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show points", "input" -> 
         "PartialSums__Show points"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "log", "template" -> 
        "Assuming \"log\" is the natural logarithm${separator}Use ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FunClash\", \"log\"} -> {\"Log\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log10\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Sum", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.195", "parsetiming" -> "0.5750000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP785111ffg11c0hfc853400001e6ddge873i467ed", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "4", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa785211ffg11c0hfc8534000067c0cd2c5890g8hh6430556393126808734", "version" -> 
    "2.6", "inputstring" -> "sum of 1/log(n) from n=2 to infinity"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 16, 13, 22.8948906`9.11231350180815}, "Line" -> 
    515, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "sum of 1/log(n) from n=2 to infinity"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{505., {187.3544921875, 192.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8784860029417334`*^9},ExpressionUUID->"38d24573-e407-4eaa-b566-\
484e2c3d62ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"Log", "[", "x", "]"}]], ",", 
   RowBox[{"x", "->", "\[Infinity]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878486009488683*^9, 3.8784860199131875`*^9}},
 CellLabel->
  "In[516]:=",ExpressionUUID->"f8dd5d2e-3783-48e4-b28f-4fdb5807b380"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.878486020460061*^9},
 CellLabel->
  "Out[516]=",ExpressionUUID->"b9d1b6b9-5094-4daa-8e4b-52ca9f3368c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "2", "\[Infinity]"], 
  RowBox[{
   FractionBox["1", 
    RowBox[{"Log", "[", "n", "]"}]], 
   RowBox[{"\[DifferentialD]", "n"}]}]}]], "Input",
 CellChangeTimes->{{3.878486023014716*^9, 3.8784860355097704`*^9}},
 CellLabel->
  "In[517]:=",ExpressionUUID->"0a3074b0-0d58-46db-9323-83c9bf6a6308"],

Cell[BoxData[
 TemplateBox[{
  "Integrate", "idiv", 
   "\"Integral of \\!\\(\\*FractionBox[\\\"1\\\", RowBox[{\\\"Log\\\", \
\\\"[\\\", \\\"n\\\", \\\"]\\\"}]]\\) does not converge on \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{\\\"2\\\", \\\",\\\", \
\\\"\[Infinity]\\\"}], \\\"}\\\"}]\\).\"", 2, 517, 69, 16944803280185088864, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.878486036134672*^9},
 CellLabel->
  "During evaluation of \
In[517]:=",ExpressionUUID->"ea6d0713-10e7-4bd8-b906-01a8c25e8db8"],

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "2", "\[Infinity]"], 
  RowBox[{
   FractionBox["1", 
    RowBox[{"Log", "[", "n", "]"}]], 
   RowBox[{"\[DifferentialD]", "n"}]}]}]], "Output",
 CellChangeTimes->{3.878486036290917*^9},
 CellLabel->
  "Out[517]=",ExpressionUUID->"fab337c2-9d38-4010-bf21-c46df3c22146"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{{3.878485684882037*^9, 
  3.878485687421172*^9}},ExpressionUUID->"938982a4-8961-4c82-9032-\
56e569d1f96a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.7", "Section",
 CellChangeTimes->{{3.87848561399218*^9, 
  3.878485618919098*^9}},ExpressionUUID->"e2a6903c-c262-4d8f-b312-\
a933550c84fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "2"}], "\[Infinity]"], 
  FractionBox["1", 
   RowBox[{"n", " ", 
    RowBox[{"Log", "[", "n", "]"}]}]]}]], "Input",
 CellChangeTimes->{{3.8784860766799955`*^9, 3.8784860926087713`*^9}},
 CellLabel->
  "In[518]:=",ExpressionUUID->"77878424-9adb-462c-ad89-34fb05b068ed"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 518, 70, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8784860933482547`*^9},
 CellLabel->
  "During evaluation of \
In[518]:=",ExpressionUUID->"b84e11e8-b218-4657-ace2-6710dc1a8b81"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "2"}], "\[Infinity]"], 
  FractionBox["1", 
   RowBox[{"n", " ", 
    RowBox[{"Log", "[", "n", "]"}]}]]}]], "Output",
 CellChangeTimes->{3.8784860935045*^9},
 CellLabel->
  "Out[518]=",ExpressionUUID->"8fd618e9-60ef-4273-8b53-13d474ec7c18"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.8784856946837997`*^9},ExpressionUUID->"60d207d8-342e-4d1f-9670-\
19e755e85f00"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.9", "Section",
 CellChangeTimes->{{3.878485622507216*^9, 
  3.8784856229759107`*^9}},ExpressionUUID->"8ab916b7-75a7-4e62-83de-\
a6ab75d184a6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "3"}], "\[Infinity]"], 
  FractionBox["1", 
   RowBox[{
    SuperscriptBox["n", "2"], "-", "4"}]]}]], "Input",
 CellChangeTimes->{{3.8784860994964657`*^9, 3.8784861080334682`*^9}},
 CellLabel->
  "In[519]:=",ExpressionUUID->"ecd42be1-dd4b-429c-9ae3-adc9399fd9ac"],

Cell[BoxData[
 FractionBox["25", "48"]], "Output",
 CellChangeTimes->{3.878486108798986*^9},
 CellLabel->
  "Out[519]=",ExpressionUUID->"3bf290ee-b67a-42a5-b65c-02b66e5bfa30"]
}, Open  ]],

Cell["C", "Text",
 CellChangeTimes->{
  3.878485709059805*^9},ExpressionUUID->"ca11b585-8a1d-4967-b2a0-\
e0d4ca40c385"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.10", "Section",
 CellChangeTimes->{{3.878485626011196*^9, 
  3.878485626698693*^9}},ExpressionUUID->"c0f9912a-9a3a-46c0-adf1-\
631bbcc9eef8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox["\[ExponentialE]", "n"], 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"(", 
      RowBox[{"2", "n"}], ")"}]], "+", "9"}]]}]], "Input",
 CellChangeTimes->{{3.8784861219373746`*^9, 3.8784861454342113`*^9}},
 CellLabel->
  "In[521]:=",ExpressionUUID->"2545353a-7bb9-4c5d-9606-67d911f86a85"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "6"], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "\[Pi]"}], "+", 
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"QPolyGamma", "[", 
      RowBox[{"0", ",", 
       RowBox[{"1", "-", 
        FractionBox[
         RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "2"], "-", 
        RowBox[{"Log", "[", "3", "]"}]}], ",", "\[ExponentialE]"}], "]"}]}], 
    "-", 
    RowBox[{"\[ImaginaryI]", " ", 
     RowBox[{"QPolyGamma", "[", 
      RowBox[{"0", ",", 
       RowBox[{"1", "+", 
        FractionBox[
         RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "2"], "-", 
        RowBox[{"Log", "[", "3", "]"}]}], ",", "\[ExponentialE]"}], "]"}]}]}],
    ")"}]}]], "Output",
 CellChangeTimes->{{3.878486140302063*^9, 3.8784861494064913`*^9}},
 CellLabel->
  "Out[521]=",ExpressionUUID->"be6ba0bc-ff58-4058-affd-35650bd20e78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
   FractionBox[
    SuperscriptBox["\[ExponentialE]", "n"], 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"(", 
       RowBox[{"2", "n"}], ")"}]], "+", "9"}]]}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.8784861219373746`*^9, 3.8784861540561543`*^9}},
 CellLabel->
  "In[522]:=",ExpressionUUID->"a75f34c9-788f-4cb9-8c11-1adb936574b0"],

Cell[BoxData[
 RowBox[{"0.35966058264111833`", "\[VeryThinSpace]", "+", 
  RowBox[{"0.`", " ", "\[ImaginaryI]"}]}]], "Output",
 CellChangeTimes->{3.8784861543998814`*^9},
 CellLabel->
  "Out[522]=",ExpressionUUID->"3d2593d3-9776-432b-867d-763ed747d2b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "sum of ",
 Cell[BoxData[
  FractionBox[
   SuperscriptBox["\[ExponentialE]", "n"], 
   RowBox[{" ", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"(", 
       RowBox[{"2", "n"}], ")"}]], "+", "9"}]}]]], "Input",
  CellChangeTimes->{{3.8784861219373746`*^9, 3.8784861540561543`*^9}},
  ExpressionUUID->"414f638c-9aba-47b0-af9d-23c355b618e3"],
 " from n=1 to infinity"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.87848615927312*^9, 3.87848616293878*^9}, {
  3.8784861967655325`*^9, 3.878486232639744*^9}},
 CellLabel->
  "In[526]:=",ExpressionUUID->"24ef0f9f-8ffc-4837-8a8a-a88b93a9f5e5"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "sum of E^n/( E^(2 n) + 9) from n=1 to infinity", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"ApproximatedSum__More digits"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Approximated sum", "scanner" -> "Sum", "id" -> 
     "ApproximatedSum", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "NSum[E^n/(E^(2 n) + 9), {n, 1, Infinity}, WorkingPrecision -> \
104]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               FormBox[
                TagBox[
                 StyleBox[
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", "n"], 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "n"}]], "+", "9"}]]}], ScriptLevel -> 0,
                   StripOnInput -> False], HoldForm], TraditionalForm], 
               HoldForm], "\[TildeTilde]", 
              "0.3596605826411183006497174991307597267878872622145136603774736\
253987575992227041744515489851033464290794754242597482`104."}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Fewer digits", "input" -> 
         "ApproximatedSum__Fewer digits"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "ApproximatedSum__More digits"}, {}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Partial sum formula", "scanner" -> "Sum", "id" -> 
     "PartialSumFormula", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "k"], 
                    FractionBox[
                    SuperscriptBox["\[ExponentialE]", "n"], 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"2", " ", "n"}]], "+", "9"}]]}], ScriptLevel -> 0,
                    StripOnInput -> False], HoldForm], TraditionalForm], 
                HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "6"]}], " ", "\[ImaginaryI]", " ", 
                    TemplateBox[{"0", 
                    RowBox[{"k", "-", 
                    RowBox[{"log", "(", "3", ")"}], "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "2"], "+", "1"}],
                     "\[ExponentialE]"}, "QPolyGamma3"]}]}], "+", 
                RowBox[{
                  FractionBox["1", "6"], " ", "\[ImaginaryI]", " ", 
                  TemplateBox[{"0", 
                    RowBox[{"k", "-", 
                    RowBox[{"log", "(", "3", ")"}], "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "2"], "+", "1"}],
                     "\[ExponentialE]"}, "QPolyGamma3"]}], "-", 
                RowBox[{
                  FractionBox["1", "6"], " ", "\[ImaginaryI]", " ", 
                  TemplateBox[{"0", 
                    RowBox[{"1", "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "2"], "-", 
                    RowBox[{"log", "(", "3", ")"}]}], "\[ExponentialE]"}, 
                   "QPolyGamma3"]}], "+", 
                RowBox[{
                  FractionBox["1", "6"], " ", "\[ImaginaryI]", " ", 
                  TemplateBox[{"0", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "2"], "-", 
                    RowBox[{"log", "(", "3", ")"}]}], "\[ExponentialE]"}, 
                   "QPolyGamma3"]}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "\[Psi]_q(z) gives the q-digamma function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/QPolyGamma.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/q-PolygammaFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[Accumulate[Table[E^k/(E^(2 k) + 9), {k, 1, 6}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 
                 LineBox[{{1., 0.16585957190276546`}, {2., 
                  0.2820430787355874}, {3.0000000000000004`, 
                  0.330743696248466}, {4., 0.3490042036769211}, {
                  5.000000000000001, 0.3557393986795861}, {6., 
                  0.35821801379401397`}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{1., 
                  0.16585957190276546`}}, {{2., 0.2820430787355874}}, {{
                  3.0000000000000004`, 0.330743696248466}}, {{4., 
                  0.3490042036769211}}, {{5.000000000000001, 
                  0.3557393986795861}}, {{6., 0.35821801379401397`}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}}, {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox["k", TraditionalForm], 
                FormBox[
                 SubscriptBox["\"S\"", "k"], TraditionalForm]}, 
              AxesOrigin -> {1., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{0, 6.}, {0., 0.35821801379401397`}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show points", "input" -> 
         "PartialSums__Show points"}, {}]}]}], Typeset`pod4$$, Typeset`pod5$$,
    Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, 
   Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "3", "datatypes" -> "Sum", "timedout" -> "Sum", 
     "timedoutpods" -> "", "timing" -> "2.841", "parsetiming" -> "0.785", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa90413658h88060cfc60000030g574fcd9a0ff1d3172133347439184749", "id" -> 
     "MSP90513658h88060cfc600000490dd8ghbd7i9g87", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "8", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa90613658h88060cfc6000005achebfacf9f0dbb3172133347439184749", "version" -> 
     "2.6", "inputstring" -> 
     "sum of E^n/( E^(2 n) + 9) from n=1 to infinity"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "Sum", "timedout" -> "Sum", 
     "timedoutpods" -> "", "timing" -> "1.387", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "18", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> "", 
     "version" -> "2.6", "inputstring" -> 
     "sum of E^n/( E^(2 n) + 9) from n=1 to infinity"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 16, 17, 16.8157272`8.978290598741246}, "Line" -> 
    526, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2, 3},
    Typeset`failedpods$$ = {4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "sum of E^n/( E^(2 n) + 9) from n=1 to infinity"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{504., {254.3544921875, 259.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa90413658h88060cfc60000030g574fcd9a0ff1d3172133347439184749", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.878486236956362*^9},ExpressionUUID->"9c3c4ae1-4e2b-44c3-9628-\
a16ec2c52e1d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ComplexPlot3D", "[", 
  RowBox[{
   RowBox[{"QPolyGamma", "[", 
    RowBox[{"z", ",", 
     RowBox[{"1", "/", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"z", ",", 
     RowBox[{
      RowBox[{"-", "1"}], "-", "I"}], ",", 
     RowBox[{"1", "+", "I"}]}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ImageSize", "->", "Full"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784861926054883`*^9, 3.878486193011774*^9}, {
  3.8784866047422657`*^9, 3.8784866067267246`*^9}},
 CellLabel->
  "In[539]:=",ExpressionUUID->"fcaf1ec8-63be-4b2f-9bba-8842bc907f98"],

Cell[BoxData[
 TemplateBox[{
   Graphics3DBox[{
     GraphicsComplex3DBox[CompressedData["
1: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
aXKdG0LP4MtPfIrZ0NqM9Azea7RFjHpZJdIz9w8+cw49cw49cw49cw49g9vc
aLXnw3QL0jP4r4Yv1zrdNSA9g6/J67pv702hZ/B7WfNuF7mVkp7BU+2OnBqc
J/QMHjTq7x/Prwg9gx95G9dMa6DQM3h4+7vHehVkkp7Bs2u36/+0ldAz+OJF
5/Z2rS30DD7icfW1lbYLPZNO7ievrF/0mvQMf3M9cw49g6cwPYNzPYMfYnoG
v8P0DP5l/3/rGdyH6Rlcj+kZ/BzTM3gY0zPpjukZvD/TM/cP/Ms5PnMOPXMO
PXMOPYNzPYPnMz2D+zM9g3M9g39kegbnegYPZ3qmcmd6Bv/G9Ay+hOmZ5qOY
nqlcmJ7hV65nzqFn8CAWb4DvYvEGuJrFG+D9WbwB/iLrv+MN8FYs3gCPZ/EG
+BMWb5D9LN4A78DiDfAQFm9w/0DPnMPvnOMz59Az+BwWb4A/Y/EG9S9ZvAF+
hMUb4Cks3gCvzOINcB5vgBexeAN8LIs3yH4Wb4DzeAO8I4s3wHm8Af9xPYOv
Yf1B8FTWHwT/zvqD4NGsPwhuyPqD4F1ZfxD8BesPgtux/iB4LOsPgo9l/UHw
uqw/SOvrWX8QPIf1B7k/oWfOUR70XKw/SP1C1h8ENwj67/4geB/WHwS/zfqD
9FysPwjehfUHaV0J6w+Ch7L+IHgk6w+CL2H9QdIb6w+C92P9QfAprD8IPyWz
8Trw3my8DjyTjdeB72TjdeB92Hgd+G02XgeezcbrwM+y8TpwFzZeB96QjdeB
Z7DxOvAQNl4HvpGN14EPYuN14HfYeB34DjZeR/5h43XgQWy8jvzDxuvA27Dx
OtoHwMbrwM+z8Trw+2y8DjyJjdeBJ7LxOtIPG68Dn8HG68BfsfE68FA2Xgdu
y8braH0Wm08B38vmU8D1F//3fAp4IJtPATdn8yngMWw+BTyYzaeAq9l8Ct2X
zaeAJ7H5FPBcNp8C/hebTwFvweZTwMPYfAp4BzafAn6UzaeA27D5FPC6bD4F
3IXNp+DqyuZTwPXYfAq4MZtPAb/N5lPALdh8CvhSNp9C/VQ2nwI+ic2ngLuz
+RTwmWw+Bbw5m0/Bc1ux+W7wXmy+G9yYzXeD8/luWofL5rvBtdh8N3gnNt9N
409svhs8k813kz1svpvsYfPd4NXZfDd4dzbfDW7P5rvB97H5bvADbL4bPILN
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
+sFPWseI9OBYrzi5XLeJ6icBPVctrpaiXlU6oPvHuYJvKPfrO/XkQz6zIhJ1
VIPL848n7lzf1vHeIl1Kv7h8H+ErtfXDZNeHNXUpPbjjvAoHNg/RUy0p99dd
Na4VAupd9u5rrgovf57ralxRvr+y/6/dm5RHy/1zjDg+43uennPzTvcW93D9
ph5YXi6XiOvubTVoQL3MPzg+/8HLy+XWH5zyl77/I3+JG2r9Oui02lrkz9JT
/tK1ospr+MEh1ir4/flw6yr5rT+o1y5+E5XmqKPaVV4/J1E5bjzpHfCzg45q
dfl83Bvi92ya9gz8Nz3ywf+t6r9404zaIh9831W56kx6nkKF8sP3sWWRYXX6
iPyRfsbPuMuW1XVUs8vjwxeUXrv5ae+dcwVHeofP6oc11umoRpe3E08offcV
Aw6OfC/sxH0uG2vFWd9RkJ2w68JzP9ekQcJOpPdMPNymRkdhJ74/tnb3i9n/
vl+wB99/ze7hYLdN2In0O79MT+21RdiJ9FfqjHi3dIauamP5+/WQuNmZqtMS
XPVUUzTlp8b3H/parM/PMSeO65gBs6Iu9rZWLdPogTj0YDij9PP9Tllqrn+k
pyvTWz9NeiXPZ6Hm/SJe+njKtaeGGcT/CprTt9smSxU+8/R4Th/NVXmknf3l
+r8U9L7P1PhN+Zf0vqMcfTVX5TPnwytiSxSUT6CmPJVJ95Li7zQV9Q/Se7L6
B7yPVP8g/4canSu1jyWtjWwuyj1e874oT12cMK+bvcgf6VHvIR+U//lWmavs
jIWuwJu3aT6y1mcF+ZPXV/AX56gfeHlZm261jPbO/qN8T5XX15v+4ChXufS4
8vqQc3zm9STy5+nBeXrYwdPT7yTJpOfrQMC5btFey9nJ84EdPB/8P+coJ67z
9C2dPFNDP6sXad5fpdn+d74JL7Sp/eqp0aMyunjKiUe5xqrPt72fTfVLJd4q
u3u7zr21iY/U6E65Obq188Z3ClVyXrjq29RPag+NrpRbex4/sfySgtLjPbJc
7nPy0EMdei4ev+H55fQgNy7B/QAdkh43jw0Ky9ZVWWk+K8EneC8xrDnwqxLt
Ct4zq2Dz6Y5XRP0M/t58ip3jOcHxHo0pCDX+66m26m2Dd8e9B3wknTetvNDh
8d1kJTiew3GN5d5J0+Ppvkhv/NzpbUfzT6QP7h+0l8jnrcfupOy39yh//F+a
vyZ/cPhHV7IH+XKdw79y7x33P+xB/of8TNLt6yVRHIz++mtpPTD8jnLg5YLr
eKlcMD6D/oFZ3fiD2jO1KI6l3zEcoRl3QpwJ/v2Mz+3J7jn0+0ToNxxl653g
j3bSuBnicP4+or/D/YB4Fen/yVTE1tr8gcoX/rPR3/rbtc87Gr+Fn3zYukSM
jyVeUK+2r/SNxiHB70vjt4iH0Y/Yz8Z7MT52fF/DR7WaFdK4JfqzgWx+CuP5
QafC/Cof1yVO+90DqrTcnybO0wZPfO6UOOSdAXH08yImRtUKmCfOFYf/U6R1
a2jfeTuC+gR8Tuqcyo7+4vc1kc8Wv4Yj/gmoSLri9QDeU/CSLV97uLYRv4PI
+2uoP3k+uC/S75Tui/gG8e+LXuv/3pxYicYVUS56km5hD+rnibkVEtw3/lSC
T9LUx8phqjCvg9GF9PtWeI8CJP8jfnPRXJX71GGH/JbqUXnRegCpHJEe9XPA
zAWbqxXp0j4C9Ncypf0yiBNQbx96uCMmsLrQCdKPl/bRIA5BevSbUD8ivsqU
4lLYAx4lxZ+wB/3BadL+KdiDeKm77/J6eb1FfIu4SyHF59Al+pufpX1nyB/9
x8HSvjbkjzjqzO8C2/FKkT/iLrd7Bqv8WurQvCd0N2jsuxFGxno0/gA/rZHW
I+F9BJ/J1v+AY/0P6hnwh2y9E96z5dJ6NsR78KuT4UWXFXfEvh6knyGtK8Pz
Iv3R4alHXrQQ40tIbyutN4M94N2k9XV4r/G+Jw30bhv6ypzea/QXxs/stqfJ
MWE//Z6vtH4S9iO9Oit0XY/HJVSPIX2EVI+hHHFfs2OL37Seo03liHzazPOf
ctpM7GNCPjHS+km8z7Rfpk16sx3JYlyI77PA+wz+RlqXCP/w9PAP2q870jpS
+Af1R1lZXnk/Gu0X8jF/8OZZu0EFStSHSL+t5sipP0Pzqb1AfVYstRfwJ9If
PuGw4nROAbUXqD/Hh7atuuhKLqVHfbt6zlP18rs/aVyA9+PgH7nf1cXzPpLW
c6L/j3wMpHEApIc9/aR1vDSOwNoFtH98PBD1KY8b0U/h8QzeW54/2mvwM58/
3Gq0NoPiB7TvuwLaGI27/IXKBe178KWLk3w9RbuP+7aX2n38P/cbjb/IPC+P
Q5Be7rnkOO93gPP8EdchfTsWZyL97d6rK00adE+J9OADF+/XUVW7QfEYniNJ
isegW+S/NCwhvbdvIvkN7e/7Z5p4GP7idsJf/LmgDz7PiP/nHH7g42DgPE5A
3Aj93pP2l8E/yMdi4/TROc3SyT/go1OWBEfnpFE9gnrlvbT/CO8P8m8g7f+C
vrmduC/eg6/3pyR/2/yd/I98tKT6BPYgfeDFv5J/p+ZQPYjx5OtS/Ib6FP3H
5mdHBioaG5M9vL8J//P13ugPIs5J+Nx4+vmEErov4pznUjyJ+h3j2PbS/lDE
acjnxew4p2PTrSlOg/220j47+BPj53bSfkbYj3zsVWZ57f+uRPYj/dsVd788
tbWi+6JfnO3f1LHHQpE/7Own7VdFXIe4y13qJ6LfjX70rp/7Px6daUjxM+K3
OV5bRxj6ivXbGJ+fJe0vhj3Ip22/Ee2mu4j9m0j/Ytnm1sbvDah+Q9xlzvq5
4G9ZPxdxF8ZR0S6DH0sy0tHJV9BzIQ782n9IVNI6YT/mC65L+9PR30M81aq2
qWO1lV/pPcLzKR5o9Azdgh+UdAuO8rRYremHon4G/xH26YJ5vKi3UU+GS/U2
3hekv/ZgZdSVqI9UX4FnL+2Q2rdvCnHkEyHVY9R/YPU53lveTqF+4Rx2Ir/X
kv103oTEt0h24n68/0LtK+NUX0ntbfWm804tO5ZH4yOYL42a1dbty0sxf4py
c7n5IC8kK42nV/P0+B7p6fxYaVxFp/agzbPOifl3xHc3wifdH1FDQbpFPD7p
XP2S3rFiPRt4zHHD6T3viPkpvE+J5j5bbeeWUnmBN5qg1J9RUEz6QT136rdn
c6dTRaRD8AZTv/1a4lVM60DALXLWeG74KdIjzmku+RP3Rf00ZWTUsILEX3Rf
pHd8kjir+o9cyh885UXa43MN8yh/lHMn1r6Ab5baF5rPlnhEwKvrOw3F+4Vx
j2Yrc/Jee7yk9hf82bPP3et/Eb8jxttZ5A/95+5+08xFN4byxzhJwgpN/vAD
dHhNeo9wX5pXle6L/JF+aNy6vJTw98TR7kR0NW7a1OQ7jU+hHRkirQ+E/dDt
QKm/xuofJeof7DvAe/M+p0Wo6pI414V+jzS/OHxoNx1q11AvLa9sNmC4v1i/
BP5IshP+QT7nm5wcsUH9TYl8UA/c07YcMrn1dyXiWO5/+A31ykopXkV/B/WK
nrTfGfE/+AgW/yMfHyn+Jy7VD5ulfgT6WdDdmg0DL/3f9fzoT9J8lDTOAI4r
xivw/oBHDEywjm9lSBzXFlK8gXEVlMs/I8cGFIYWKzG+DZ2rN007PtL6t+i3
SPy5ND6DcoQfXrPyRXwYIJVvznjDsrGRX0hvHRUB7yrv1abnwvhDT2m+D/Mp
GBfZc/raMotYU2pPad5mm0O18c20aX4HvOHaHwlpedrUf8F9OnxIWeOgY0n5
Yx7pkm7cFDt7S8of/HkD4zcr75YqkT/4wz2L7z05o0X5w8+KapsWV/5uTflT
e16zaNO2DhUof/Bx0jgV8gdvV0Fd2+zfuA56on69YdbD6d5WNN+B9HF34/Ma
N6xE/TjwGeP7X8hXWpOdvB8K/SHeqVRFO39F4Q9al0znCUjnENJ5TRIfXqLW
39xEi8YNkP/dmhe7Xq1dRu04n/9Ce8b7oWh3UB8+3v/lSVDOK4o30P8wc/1n
QVZwipgHYnEC6ivej0N9gv+rJ9W3yB/+dpHGS7d0XDS52rgUddtyfljpsfRW
wt1ryXQ/3o/A/TjH+4V6oPuk3St7dCmj+g3pV0vtC42Lot8vzQujXuP9KbJf
Sr9SGt8gO9m6AugJ459qqd7AfdFPyZbmqZEPeMg6s3VdLlpReuRz9fYqb5c8
Y4pDED9fZ3EI4vmJLA4BvyXFIbATvHGN155d9+rTfcG9uzbMOdHIkPJBHK4l
xUXIB9xKmpffadK9eNviD2q38v+7of4UUSnlVPF3Khf4+4bUbsLPaN/32kWf
3hj2iXTO9Yz0aFdXSunhH/TvhrB4BuVVQ4pn8F7Q73SzeAy8qhSPoX1EeVWV
4i7kT+UoxWkYf+Pto4vrOId6TbLVweV85R/tJnQ4afv4qDenv9D7Mr48v1PK
9YM3x95d9UmJ+h/1QBep/geHvsx/rwprH6NF45nwa+VDWzpERH6nOAf5XF8T
u6LG0e/kB3CbU9WcDtQU/R34v92DY/X7Rjwj/6AeGzxuy/R7J35SeownlFXW
1IfQA/ymLcWrSI/2umkPz2HbP4tzisAff7c9szdezG+ifj77YnNSWO9C0hV0
qr+hcFjn0hIqd3BnbfdaHtVKKD7Bc2VJ6+fRjsBvqw32HjvU4hfV54ifbaV9
7rAP71PVv87WXr9KW1XpYJKj6zdR722c2bJ5me1b8j/6p0/6LCyY4aJQVZtz
LPap4Ud6j2ybPFKOHvKD0kPPxcu6Tq3lLuJ58LPnk+v90hPxOcYH+s7dvfeQ
VRn5GeMMhUU1g73XF1D+KJd9+usGhV4S+8fB97huKt4fLDj9jqJWv30nTmqR
nmkepv0wvQkVRHmh/30wanvTqRm/6b6o3279PpGyzFJB6fE+Tjtma9z/UQnZ
j3GVzHrZs1c3EftlcF/zWpP93Kppkz2IW9KuVu4xt5WwE/b7dNjw96ijWqqB
AyPf1Kjw5/g52sG/q5rZBJ68TzzYXWvEtmt/js9j3jbN4nr2SLcY4gk+Jxc0
Vv15ThE+73E763BxjYgrEP81DXKe3DJA8Hreky/t+hz9x7i3sVag5cPdGX+s
ZzCSOJ8vjpPskTvXwu5HydMdzw8Qbyfdl6d3lvzGx9l+Sf7hHP7sqvHnH/sj
UnUOzY9+feeP9Sp1h97qahor+L1bDVsnLQ5Xd0u5ZHPW/w49b88nkTqhrbYq
WzZb37JunuBtxz9Ka7w3Q529+/SoAe3CiNdpr9peHJyhbhW73sPQTfjneJvg
om3mmeqKMw8M8Y4Qccio5Lxp+0puKafGd/5nzWDBV571vj0zNUu9+mrIYJMj
McQtdo14rrsoQnnmtq9V0sbbxHdP72fbL+yW+lN6Vl5yyEWy57Dn6rJuf8eo
z+Xnx3X9epD4SYm31XDKJ0TKJ1KTD/ET8Qvnnmkdq5y6svnet63CxPrelu1c
Fj3NVLdUNVmkW0Os+zVfv7JirWU3lLiC53pOKfikzFYn96/RuIL1PeKnF7yf
PNw2XNk56GADi1miXAqk9J816cn+Ge2/Dl5Y59wf7xfa++Cwfs/C2wieZPe6
JDZ9i/p5PecKnUpFOQZK9nfR2E8c83o30vYemt31BvFRV6L6nXS+/sc68KrO
/U6vmB39x/uIdA/CdpYYZ14lrif5pabmSvyI5OdzGj8Tt5V0tUajK+LDFnk/
ntYpVrn5ctegIwX7hJ0Sr6Xh5M9j36MW/NgZo442Xuh6b+1eoQeJ19NwSn9p
cVjdbQExf7zvs851cJ6RkPFH3Mv8JuLb1BI7N/cb6oWaK/G/9G/3Gl0rRvbc
+NJVJgts0q4JvUn14RdNfSjqn5v71wzIzZQ9D2fYrcQXV6bdJY56p5mmPhT9
BWXmvKJN12XPe3ns2qPQsaqof6pJunqp0RVxrwRNveGkqTf+qH/qaOofUZ9L
9nNdrZTskdufmKfxD/H5Y8+PvNA+9o91VnaSPnl9i3wfa/RJHDrerWlHiAdK
+pfbj/ZZU9/Sfc9J+vljn6NkJ9eVr6QTXMHXLwieMqg0Q701x3zwja8XKP0R
sxnOJ+xvK/c3XVl0eoGor8xvtCxZEhihbvEyu/7u4NuUj2uH5e6HQjPUm5te
i/jVQtRjmXOWH3GMzVCnmdbrebnBGeKzJZ3zfsRpqT6319TnxDdJdn7V2Em8
W2x/i/m+t//Ip6/Euf4TRha3m1PplnrppolV6+6L+EOH9zU6pHyg8yEanRP/
tlPTXkRo2gviaEdbatpl4s2l95HbOVBqp5Zp2ilRf0r+121W7n/iV6T6mbfX
rH4mvjDoyZKXxYfVr7akTMueJN4Xq3X1RqzteFa9JqnGLmVPkT5W8s8tjX/o
vtEudV0Pnz2sfO138UPdIUKH9Tfcqrtj61ll6duHF9pWF37zk9rZDZp2lriD
pJ+GGv38EW/w+E2unZIrF7n4UM4e2ThQpt74X9s1uXjyf9W53PsiFy/JxZly
7Z1cfCUXl/6v77tcuyZX/8jFdXLxsFz7KBdHybVrcu2gXNwoF1fLtY9ycZpc
vC0Xj8nVw3L9FLn4Sq5dkIuv5OIxuXpDLn6Wq7fl4mq59u7/V9wlF7fLtSNy
8bxc+/K/xglycZ1cnCAXV8jVt/9rOyLXXsi1L3L9xP/XuI73K+X6NXLxpFw/
V67f97/GsXL9Mrl4W66fLtdvlYvH5OJ8ufEBuf6mXNwo19+R6x/Jxcly/a//
NV6Si4vk4ii5cRi5OF+u/yjXX5Ab/5GLD+XGo+TiT7n4SjYek+kHyY23yPXf
5fodcuM5cuMD/wfjIeHO
      "], {{{
         EdgeForm[], 
         Texture[
          GraphicsBox[
           TagBox[
            RasterBox[CompressedData["
1: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
W5O3g9zJJ3REgZ2D5pV6ZjqJCCDUSI4SyCT81sOvT/7E+f1w+hPvOB7m03H2
J7PM8LemQZPVJDgPJQ5WPQSlhNWwiIV2YjxccjNGvYQlZdSS0a4skBFqKByr
buNScqxALHlsGdeQWV6fdkKf2wrD/o3k8onRy3jzhMe/NHm56iXlY3r5k630
Fgo0YlhXlgaZKplxnCG9GQ2asT2DWSPiRsBRoUNzR6eP76ij1BNqHQyIY0Qw
CbuxTBuyGH/l+K4YZ//TBJkcNEUNhVOt/CVRCsWyK2GZOjEQLtHL0el6S+gF
dmXfJGSYGmInFvn/31BSUqxgLPdMP8/9LFx2kOaWnthK643cy3SzEf6x1s+X
j7WOny1iEVMWylJXFsnEO8J9IC+XJTLixteXoaDx1KRdS2jcSDjKjuCjBTFK
SJNX6HnGehvXQYFwI5eq7Yoyk7BvUdi6aCjQcg9/6FNoVybIQDUMTrUmJkoK
mVkKFhEup9LFZO2FRYxBRqtx6qCSErDcYWDJnRhZb4RL9GR9XnuBn2kdW7Jz
8F16QsSErowOMo1kaNCUicZV8xdcDYVDt82idgQfLUhqsk0FC2IbO4/GpKMA
4TkSjZCmizNJGxhNexgd1o1E6sryn3tMmWmWCX90qIbCKXV6Kvo/p4flrwpP
4mORzRj2IkaYFDGYzKFJQYYDijA5FL6Wx4qFRbS1eX0eDC/5FLDvJYwwdJXs
iumGCZ9iEcO6sjzI+GRYbyaCJrdnVE2aa8poo+DEVo3aMfhEQRyRqEuMcr5E
0qAJYhnJUQKZpN2+hl9freqwrqyQSRNrGWemv35WQ+HEem4WVHKEFpcynZdM
M0vBgsIlDS/SS27JZMQkMkciGaqG8UH/n0ghsZKxhEMX3m1SQItwKSuNeZmx
0Use+T9P7zTyMhQxvCsL97iGZN6PyFhBY6lRcVPg1O2QTRsvRYgW1VuxDgGE
GslRkpsuzSRv+2W335hM6M24multk8AZS+mYgDzIHrMrSUmxArEMb9E5XOjw
Mg370AuLGEWGqoFwDuV/PQKkWFhiN0sHQNWM4avyxLXf5NPf/xk+kffvZVWZ
Tf15iplO99OurAwyZblMkYl7kejezFbzLqiGw2HbMr4F2SGCGCKx+WlvXaxo
CB0UCDNSZ/LON8YN8sRaKHifzGR2JDKhNyNqUoeWEkfY4XWAMImZkqUQLLET
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
b6M=
             "], {{0, 272.}, {272., 0}}, {0, 255}, ColorFunction -> RGBColor], 
            BoxForm`ImageTag[
            "Byte", ColorSpace -> "RGB", Interleaving -> True], Selectable -> 
            False], DefaultBaseStyle -> "ImageGraphics", 
           ImageSizeRaw -> {272., 272.}, 
           PlotRange -> {{0, 272.}, {0, 272.}}]], 
         GraphicsGroup3DBox[
          TagBox[{
            Polygon3DBox[CompressedData["
1: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
dMCwwIdF+fsF/BZ1/SPilgnYP+L3jbh9An6tZz7afqBrkrYf5hgeZh+WbWYf
qXvFyHc+SrlmnrUXmPayeF44YBBjG3Ns0cAXCfgl6hhYyzW8MrxxxP0l4L8B
s92LLgi8GtAz8Dp7TMDmgU+N970iHFpLOQkespsy0vryk6WtCx5xcd+Xstq6
yiulfEX+pZVTkG3ayw/DG7czjnI7yCPzbnnfw0Ojk9y8knLiGvKo8KzoEpFH
kUOxvWzp8yry1fDinXxP/tI2Q7pV5btJV9rzKHc1+W3erWCdtGl16+TdoHra
V7BRYM9D5sIeV9oCKQuZsZ/8PP0YqExAWYOUCborBwyQZsgZpa2PsL/028V0
pb2QdF1938+2IocgT2CT6yGtaetw323l+/3sP7I9cutg+4EtqIvt7SvNhlba
ZH3CwdJjsH3Y1H4MlK77WW4vyx4qzQ6wHXvX01YE7QbW077BM7araTHXpgf8
6L7APvFtLXlf9pjvDNkPprlHsK+s18w9aZb5X3cvmWHInjHTkH3yJ0P2tx8C
/mt92Hg47zn/p1o/dfxcy/LZ66r15KHh0/+oJf8NP/5rwLu13Ot+Me07AbV6
poUHx44ED0Eds31Pnno938PnNuoZkg5bE21BvsHmRPhVLe1hpKM8bDm/2xZs
aF9H+E0tbWnfSD/sdt9KP+xq39tv7IQ/2lfsaTOlDXbF6dIPG90M6YdNcaq0
x0b4g2OFTY52UTc2uZ8cC+wYP0sP7Bi/2G/sGbOlGTYNQmRHbBuE9Gdj1wo6
FOyH9A+5EzsiIePQ3hAadzCElisYQiPsWrMcwx1inuwca3W5au41u7quWCfo
UNC7IKvBsyJb7GYIb7tzLflX+N9dDEn3TT1lkb6MTeCdI9ye8aunfAlvPwie
pZ7y43f15MGRS7+upyzYBzpGu34I6BT4gFry3NS3Qy3Lh5eHl4CPGIYc2Ug/
GPZISMO+2b6SY448NsnxeMlnxudFn/tZHrx/f0N4/51qyfdT947G8XxK1Ldv
wH4Bh8b5cla04XvO+OjXlxG3Si3Pq51s+4x60oBz7VDL4t2R0g4aHyFNeT7c
fDz/UE/5hnOLsxFeED5wZj3pBL8y0j7Q9s/rKbtzVv1Uz3GAjzlE2pGuGm2e
1UjesiM8WrT/o0bymGta/rkR91PErR74M/CJ8TwTmaGecsweteQv+tufXxsZ
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
6fCjxB/xTHjLIn0qvyvS9xI/F3wx8ZHELxMflO0iXD3g9Vb6EEN3xgTfadZt
ef/mRdfNdb5njPCdxof62kr69d7jfC/9jBmbvxvH2FzqWN3r3H3ZOu50DZV3
kib57hbrfN78/3W97S3NGM8O8sTwwqUPMfsKuuTTnPfjjWM/uMH1xhy/2bJL
X+x/m3+c76HFjeYjDzLxcfIN6KxPtw58UfCfw1duhaDlAOwdQfcOge8U+N6B
Dw4YH/kGyE/Df8Pjr2oIb76KITw4siv+kfhbohvcBZ1QNXWExCPf9sPuV0/b
YntpgKywQ8TfBC8T+H2Rt0/k6Rf4/YHfUs89mbtL0/+0bsHhjW+o5/6NXDou
8D7VlGPbY8eM/LtHWTdG/A7VlIeRD7a1P7vFu+2qKRvvGGkHxnP/at6x4j7V
1Er6keLLubRzGllwjn9TtPmOeHdY4LfX025JHQ9G3oMb6UN7Zz3nL/3Cpjqx
nmtzVf2f8as9rJH+oPgVr1KknyV+0Xu51vG53S3iDoE/goaB7xr4xoGvGOl3
j+eR8bwzusxG+mcityOzIZ+taIjMtLJjxbtOxiGHIZf3dF52NI5n7vEhc7A/
PhDl79dIn8+bI37XatJlpWjDHvFuVCP99C6vtN0PuMw1hM/kFb5DB32c79HR
4KeIb+BepuPdbsbht4hOGR9NfB53NY7n8o4E6x7/MXw9OXvw+zrH+b2z+fAR
G2Ue0mHvwY8Sf7QBvucZuwq+nqUv5xmuGfy4zvQddhrOotIPkbD0VTzBPpQ+
bZyHpd9b6Qc3ync7+P7gStvdv3GuT8LrK213/66rtN2p+Ltt5cy+wP5xllxk
PRfYz/I+xt+k5SXmL++ilHdTrnRsynspV0mPi6yDs/Zq342p5N0Fnk+u5P2S
f0qnG+0D5/m1vjvFtl8r7cabDn+8s6QpcJPvyjswt1ba7qKUd1MmmI6xvcV3
55qWZ/aPfvotoPM73r0P/R16RvR556iX3rqWfjPYHbALoINGt45OGt01+m38
hbYoUr+N7hrd/U6mxTaBnht9N/pwdN/o1jcrUo+PPhwdPLp4dPnYJtDhY8/A
7wM5Ezsy/h74nOCjhT4f2zkyJT4MyEbow1v6q+AbU9rgS5s8IfIudnZk4KNr
6WeCLIv/Cj4t+LngG4aiFtkX3wj8T/AzQbY9SN8b/G2wv2AXwI6CTQN9P7r3
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
jGmoi/87DDU9Ogn0EZeZZh/j0T2gg0BfMdZ49DO0bU9peI55L1cPQXr0FdsX
6R+CjyNyPTqX2yxnlDg6A3QHN6kXAkeH8FMr9RfkPdm86BlmtfK/Oego+hTp
fwl+hWWiD0E3gD4FvQhyJPInMiMyN/Iw8uIO+p0iXyOvI8Mjy7Pf9HCvRu5G
j4D8voO8Fnrs641/zjLJi2z/sOUj14+zXmTeGfrSzCzy+9XrWS/zmvXJ3OYf
HYwB9C//scr+AN/H3Rv4hJo4fCP8F3cq4QHmFt9KnHuYJa8HvrU4dy9Lvgwc
ng1eGj7pQPkycPgxdPvc/UAXTRu41wPvCh8Nf3Z0yU81kzeDn+JuG2f9wuJ7
i3PPjXN/EfFBtTb+qeQHwDnrsaVzXxI+Bx4EHN4G3v5i2wafCI4/wC22ExsE
Nj2+h4WdAr0I+ib0IZcqy59TpL2Lb3Zg83raNC8pu8+R85XXwZEZsT3yTRDG
Av9w8NJuxn83sdnhE06Z2PFoD3dydrc9X1sXNijsVRc6tnyri7MD30Bwxpw0
/HP3HcsEx36Fr+B34hfrc3ZWkemxe2GTWke8tE9+bzm0+WvLx778he2vOKaM
ETId8hKy0ietvCfA2ctZzXe+HvPc5ltgnM+ftvJM5buqnMXYhjkTKfsOaQIv
eZXzsL1pyvP6DvENLPNxeVXSw0dB4zulOXSdKA35V9c9rkHuyt1t36HfXdIT
WyVthtfg24n3mp7zgvtanGvfWib04b9gpMGmg82FNNhZvrYN1Muchz572M4r
XXfI4me5Hln76JjQHU0SR4+BrgbfeOR0dC3gdXH82pHr3xZHFzS0SD0OPtuH
GfKfCHxx0ZugM+kojtyN7uRs1z76Cfx+ka/RkeDji0z9g+2co3No5F3uUpdw
pm2YaTmruu7o4ynGn9Nsk9fPsXzwc5ttcvO51vWJbUCviI0aWyx22K7i2GCx
JU51neJvwr1gdKrw9fD08PP4XPCtMHjp2aYZLY9Jmivl+V81Db4YfOvtKnHy
wg/XTTPa8l9xz4HfJj28NHZ17OtnaefBboqtB3v1lGab3Rgce+tKpn/XdYdN
Grst9ltsw9i3txDHfoQfB/5npT8aOHxsL+vC1tTVcli/C9tO9lLsCZwNnAvo
V0c7H9C94KvNmKMn2FIdwjHqEJBbnzQNY4pczzcLPnJ88BFnHEl/sDoIxp/v
IDCX4D/Zp1hTlNfbMmkL/5Sa83/AVsZTP9/p4Xs98CfIpNyZL88o7v+zXpCd
kbHZ5583DXs78ixpOLsmmQbZu7BMvv/DOcBdes4F+DR4C3gDZFXimbPorLir
if7qR3Hm1SztHT8XuX/wbU1s6djVp7uHMF4/OXbYvEmDHZw9hjSlDXyG+wl5
Z5q+p3nZQ9hLZpiePWmqda1jeupiLs1yzuBry/lTnSttv/j97OqcAcfOtrnp
mSfMGWz/2C2xv812Lp0i/qD2BGwA6P+fFsc+MElb1XVF+ln87Hyua3doRPhb
kfl+L5JP5izDTo49+UH3Rmx9/BeQMw7fZ+wx2GKwV5IGfhhfYGwhc+6KNhKf
KL+HzekZbR/gz2pr4f3l2hO4y4H+GZ9e8C/Uq3OnAt01/2VA78P5xf2jF9xj
O4mv4F6Hzg593WTz0s+pnhfsP+iMucOADhI/b+g3vsi7zJOabTwMOHwL5yb1
omvivxIvuZdyPt9tmcyde5w/V+uX+3DR5jeDfAl/RB8on7KpDz7rs1amiaxz
6iENvNUSRf5zDpsjsgL36neSb7/Q9cgdKPyb8W0+3zIpn2/rYYtFNoQ20Kik
DX2gT9jxsOdhK4THhm9HDmKNgeOPjX0Q3hub4Gz5cNIgpyIP4z/yuXL0cpU8
W6iLsUCuJh5fpfOtF7ohNyJLosvEhs49f2Qy/rtKm7Gz48vGnWT8Mej30fad
b1iBI1vxPQF8AvB54ztXx5oGvwXyInfCq/NvWvhzvmWEPRg5iO8QnGxe6qcd
+CEcb3vAkSm5u95N2RYbP/Z9vsuETRr561jLQbajXbQV2Q7/vTGWzztw/AH4
7+po28A3Eyhze2XS4+07/gbH2wZ8KmgDci3zF/8c9uc53wZotd0xgZ7MPXzz
uA8JP4Ytj/tU3OngDgg4dj1sK9uL/0ecdcf/Sbs71vi8wCexvyEPd3PcuZsG
zj+GyLut5SMnwauxT3IXD/vd59Wcl6T5wv2B+TxRuY87ivgYMH+Zx9h/uVc3
wLnXUxy5G98q7hbhK7hQkX3E/xD/HL6PjG8Pd1LAOX+xHW5jvej/0AOWujFw
dGL32GbmITpU9K2lfwQ6WXSq6P/QLcJTXGsazqMlTYNOcc7e00r+Dh+qzo4R
/Bp8W8mvgXMuv2qZ8DDo4NHFIwMRj+4VvgU/YXD4Hb6Xh0/F90XqKFizt3ru
MEY7yGPSBvZD5tecedbIf3dh832mSB0hesOSz5rbNqwoXvJQpIGP4tuC8CJP
yWfAL7Af8u9IfAzQLaALQSeC3wU67wOlFd8cAkcH3vAZnG/pjJD+jMtBrbb3
4Oha4fvq0mEJ8V+VEaEV/APfyxnuGKErRX8KX8c4Dpee6DapCx0m+iL8kPCR
47vo4OiO2HfxcWTv5Xvah7veWXOHifP9c3B0Sow7tgH8xaEj37NFj0p4iO0v
+3+18+cQaT5H39xs0x/zbRpkH3TnfLMJHhjdPDp69O3IU/8wfQfTwB82nYvX
yNOiK4cHRv+KfhbfTPS4fJv1OmVt0sA/L2uZ+9sG2oPeFxsK9WIXQHfOd3nQ
96Jbpsw35bFvlM6dpDm6X3TSxDNnulnvE+Ljm3/SnTdTvljNvpd6ZtI8br30
a6z0HClt0ROPdP3OI82hLTwp/jecg6vqi4PeDB0jvkfoqb4q8gz8ushvUf61
1ebHdYY436k4wvnAdwWPdE9mzZ3hHsU/zSkTPR66StLjezamyDrfLNLfDh8k
eKHOnjXs+eiyuA+M7gs93Dnu/2ONP9/8lHNqoQ6vlfn4NzhlolckPMvyyXee
eU+0X7SXdbKPa43vnWALxA6ILZhn7LPsxwPdG9GVcT8XnRW+GeDIqtjh8Qko
z4q9PSPgy8j7H+vZ37qwKw5zXbA2h1kvZ++erTx/3ygSv7JIn4FBtudLcXwG
frPcoe6NtL/8ZssQy+RsZ53CG7zuXnRuNfPta96yHewPlD3YurBRg1Mndtp9
3Vt+Nz3lY9NEJkIOxn6N3ISMi94R/SP/s+OOLPJ56dsAjg7gvSLl4M+K9IV4
0DTI+vy7sWF/+Y4c9lZ8PIjn7EBWe9x4/lMJjlyGDwz+OZyn+OiA48tEvjst
k/8W8//it4rUzYIjP8LjXe5eDZ3A4ffQZ3L/Hj0n/l/g9IvwSuPRV4LDD3DH
HN045w7n2WP2iz7TR3Qg3OnGd4ezF5+iu2wz/zbkH4fner5zr487d/zjnvt4
3MV7zTSc+VuYhvZwhpOGuXpAkff2XxTHz4w7/Pg34efE/wHxn/pA+rxtm+FV
8KV633joyX8x8StCh8N9cPQ2j4h/a70P2H5w+kI7uT9+j+n5Ty44482d9PvL
sWgkjszOz0jusxz0z+9LW3zYxtlm/OvG2c45/4eX5sw37lui6+abCVOMh4aT
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
B740P3z7CNcqaxD/xH0s8/8Arp8AYA==
             "]], 
            Polygon3DBox[CompressedData["
1:eJwlkstLVWEUxb/jveduB4HDRg2aOfbfcCAITXLWSBrUKMVGggresIdIoNWg
IqgQHyEG+SzthRUN8gGipVloUVQWRaLlb7kGi/Pb32N/e699jp44XX+qIqVU
g4roXaT0ATjE4lsxqkbNrC3xXUezJZ/R2WIllzi7WEgph9tZa8lSKrP/CP6C
ThKfJf4Kd6MmuCFPaRr+i56wP8rajnKjM+zdIB6AM3K+LPiNCvgCa525a1iD
53SfeI4z1+DnaCz3G7fgZdTD2S7i/nAP6kU1toZrUC3qcUO50IRqZf8xvBuu
bYN4Dx5Gr+F7aAh+GvZKd57Br9BDeJv9y/An1Fi0B5/hBXS85BxX4En0seie
1Nu3sFdl9r/Dv9HtzB79gTdRbeacW/BV1V9yTuXuQlWaHX5MwKVKz+YIa+eJ
L6GRgj2SV/PoGHcP8+1F58K1v+HMffh9eK+HtTthD+WlZqRZ/Qt7oxn9hwfD
szuYCbyivJlnsBrOoVwPOH9XvYW5ibU2uC/srWpSbT/CXtQTb8MX0Yvcnk3B
N8N31VMdvc6E/z292QFfD3uhO7qrmWq28mwRHg/3Ks/Gwv+Q/iXNsAz/DL+t
GfyC9wGXoIck
             "]]}, Annotation[#, "Charting`Private`Tag$2627827#1"]& ]]}, {}, {
         EdgeForm[], 
         GrayLevel[0.82], 
         GraphicsGroup3DBox[{
           Polygon3DBox[CompressedData["
1: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
            "]], 
           Polygon3DBox[CompressedData["
1:eJwtk8tL1VEUhY967z27hxZZRtHrUhiZZdoDg9KekhQNauwkKKhBjaIgCgxT
0UGQ0iwiwiY5UtCiCB8DCYJKGzRoIll/RWDfYjlY3O+cvffZdz9+5Wt3rtyu
TCkdQwX0Lqc0Iyil9AI+GCl951zJuQmuR9UE1KC98Bd8FospzValNAaf4G6i
IqUBYk7C69ATeAr7evgw+o3/Z85H4MvoHv538XlN/BrOPfAvfNbC29BDuEz+
7XCEff9xtwruI2YaHuJuCH6DHsA1+I/Ao9m2W/j0whf0Prb75OyE96N57H+x
N8J/8GlAvfg84ncQzWJfwv4c/rliu0n8K/g8MU9LfrMj/J/131VzNbwv3Cvl
aIBfErNc4Tffw83cTRfckxZ4J+qG27Htgs+h60XnUK5a9InzW2I2hmtSbR/o
57Psnqq3P8hxNDwDzWKY+Da4H5+Jgmc2DHejrqJrVu1b8Jmrcs+3wu3h2Buc
T2kXsnNd5W4BruNutOCYzfBu9LHkHdkDn9EOlFzDWfhiuPea+SV4Q3g3VJNq
2xSuTW/q7dPh3HpDb2mmmq3+81T2Tmg31LMd4R3Vrqqnh8I7ol3RTq0Oz1iz
1k4fgFvDvdLOHg/PWLPWNzCZvdPa7WXuvsHz2bVrxx5nfyP6VtTTcfhrtq92
sm9lhpqlelKG/wNaCGj8
            "]]}]}, {}, {}}, {{
         GrayLevel[0], 
         Line3DBox[CompressedData["
1:eJwl0rlSVEEUANArw6AiiyjgNmCRgv4AiKSiGZFAZgC4AW4zgwsqWGZmLqmB
oSYKP8AXsPwAAYigAiOigCyeVwSn+na9131v9+2GawMd/Qci4j1fSyKSeNBY
VRxxVtxKN0O8Y5wZClT6+TxXWDgY8Y1FlvjOD36yzAqrFPjFGr9Z5w9/2WCT
Lf6xzQ677BGH1EcRKYpJU8Ir3+uKIlroJMcbvjDFCuWpiCbaaUnbx5pe8Zzz
fjTvE1/nBje5xW36GWCQO9zlHvd5QJYceYZ4yCMe84RhnvKM54wwSqucKTW8
EM+r4ZN5j/gSjZSxrO5JPvOaLFdpJsOuu59lgg+8pI/LnKOCVVc3zRhvydPF
BY7r84Lc9UlfjW1qqBNnOMNpTnGSE9RSQ3WylmNUcTR5D1RQThlHKOXwfusi
aaEUIUVIG44XjhAX0/tv7z9+Wku4
          "]], 
         Line3DBox[{1919, 361, 391, 1170, 421, 1844, 1186, 1786, 451, 1204, 
          481, 511, 2055, 1951, 1977, 1931, 1942, 1975, 1976, 1949, 1971, 
          1928, 1940, 1996, 1970, 2000, 1999, 1927, 1939, 1964, 1926, 1938, 
          2001, 2003, 2002, 1922, 1958, 1957, 1984, 1921, 2021, 1918, 2008, 
          1953, 1919}], 
         Line3DBox[{2127, 1954, 1998, 1923, 1959, 1995, 1961, 1960, 2018, 
          1944, 2004, 1945, 1993, 1967, 1968, 1969, 1946, 2005, 1947, 2006, 
          1988, 1989, 1972, 1991, 1990, 2022, 2014, 2015, 2017, 2016, 1934, 
          1981, 1982, 1935, 1952, 1980, 1932, 1943, 1978, 1979, 1950, 1974, 
          1930, 1941, 1997, 1973, 1929, 1948, 1994, 1966, 1965, 1987, 1963, 
          2010, 2011, 2013, 2012, 1925, 1986, 1962, 1985, 1924, 2009, 1920, 
          2007, 2020, 2019, 1983, 1937, 1956, 1992, 1936, 2127}], 
         Line3DBox[{2124, 2123, 2122, 2121, 2120, 2119, 2118, 2117, 2116, 
          2115, 2114, 2113, 2112, 2111, 2110, 2109, 2108, 2107, 2106, 2105, 
          2104, 2103, 2102, 2101, 2100, 2099, 2098, 2097, 2096, 2095, 2094, 
          2093, 2092, 2091, 2090, 2089, 2088, 2087, 2086, 2085, 2084, 2083, 
          2082, 2081, 2080, 2079, 2078, 2077, 2076, 2075, 2074, 2073, 2072, 
          2071, 2070, 2069, 2068, 2067, 2066, 2065, 2064, 2063, 2062, 2061, 
          2060, 2059, 2058, 2057, 2056, 1955, 2126, 2125, 2124}]}}}, 
      VertexNormals -> CompressedData["
1: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
       "], VertexTextureCoordinates -> CompressedData["
1:eJyV3Xu0l1Wdx3HygoiKol0MR1PJbmChCeOY9hgZXjLxkogNOULpLCXTyAsK
OqiolItQqyOaoY0mYl7AO6LERYXEFIVRORzgcBQBU1DJME0ZWut57bPWh/Vb
zPDPXu+zn2ffPvvy3d+9nx97DTn7+NO26NChQ/9OHTr8M+zQYVTvfpcP+brw
jhOWn/voxN9V+B97zWmdOnFK4c/euPtVTSMeLfy5bR9tmjpxZuGDvrVi9cSu
TxU+5tKdDmka8XThIY9/7ZrRK54tPG3k/T+ZOvH5wk92O/I3k1sWFH7ukaVP
TOz6YuFFA85dM6Hfy4Vf/eu2uzaNaC685rqbvzF2ckvh93r1Hjp6xdLCl/7n
aU8fMra18JV9ev3H1InLC1+99QfrDpjVVviahU+OmdzySuGmW6/Zvef6Vwvf
OOzf75vY9bXCt3zjc4d377my8G07vb14Qr9Vhe9cNu2cboNXF77nniu3bhrx
euEHLj7uxq5Nfyn8yNH/8pWxk98oPH23lbM7zXuz8KzXpwwcvWJN4aenjnxz
w4a1VSNdM6Qvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yv
pi+mL6Yvpi+mL6Yvpi+mL6Zvo3GaumZIX0xfTF9MX0xfTF9MX0xfTF9MX0xf
TF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTN9G826O09Q1Q/pi+mL6
Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi
+jZaR3PezXGaumZIX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xf
TF9MX0xfTF9MX0xfTF9M30Z2Ua6jOe/mOE1dM6Qvpi+mL6Yvpi+mL6Yvpi+m
L6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mbyM7N+2iXEdz3s1xmrpm
SF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9M
30b7lrRz0y7KdTTn3RynqWuG9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9MX0
xfTF9MX0xfTF9MX0xfTF9G20D819S9q5aRflOprzbo7T1DVD+mL6Yvpi+mL6
Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvo28ivkPjT3LWnnpl2U
62jOuzlOU9cM6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL
6Yvp28hPlH6F3IfmviXt3LSLch3NeTfHaeqaIX0xfTF9MX0xfTF9MX0xfTF9
MX0xfTF9MX0xfTF9MX0xfTF9MX0b+f3ST5R+hdyH5r4l7dy0i3IdzXk3x2nq
miF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfTF9MX0xfRv5cdPvl36i
9CvkPjT3LWnnpl2U62jOuzlOU9cM6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL
6Yvpi+mL6Yvp28gvn37c9Pulnyj9CrkPzX1L2rlpF+U6mvNujtPUNUP6Yvpi
+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6NjpnSb98+nHT75d+ovQr5D40
9y1p56ZdlOtozrs5TlPXDOmL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvp
2+jcLM9Z0i+fftz0+6WfKP0KuQ/NfUvauWkX5Tqa826O09Q1Q/pi+mL6Yvpi
+mL6Yvpi+mL6Yvpi+mL6Yvpi+jY6B81zszxnSb98+nHT75d+ovQr5D409y1p
56ZdlOtozrs5TlPXDOmL6Yvpi+mL6Yvpi+mL6Yvpi+mL6Yvpi+nb6Fw7z0Hz
3CzPWdIvn37c9Pulnyj9CrkPzX1L2rlpF+U6mvNujtPUNUP6Yvpi+mL6Yvpi
+mL6Yvpi+mL6Yvpi+ja6p5Dn2nkOmudmec6Sfvn046bfL/1E6VfIfWjuW9LO
Tbso19Gcd3Ocpq4Z0hfTF9MX0xfTF9MX0xfTF9MX0xfTt9G9k7ynkOfaeQ6a
52Z5zpJ++fTjpt8v/UTpV8h9aO5b0s5NuyjX0Zx3c5ymrhnSF9MX0xfTF9MX
0xfTF9MX0xfTt9E9orx3kvcU8lw7z0Hz3CzPWdIvn37c9Pulnyj9CrkPzX1L
2rlpF+U6mvNujtPUNUP6Yvpi+mL6Yvpi+mL6Yvpi+ja6F5b3iPLeSd5TyHPt
PAfNc7M8Z0m/fPpx0++XfqL0K+Q+NPctaeemXZTraM67OU5T1wzpi+mL6Yvp
i+mL6Yvpi+nb6J5f3gvLe0R57yTvKeS5dp6D5rlZnrOkXz79uOn3Sz9R+hVy
H5r7lrRz0y7KdTTn3RynqWuG9MX0xfTF9MX0xfTF9G10bzPv+eW9sLxHlPdO
8p5CnmvnOWiem+U5S/rl04+bfr/0E6VfIfehuW9JOzftolxHc97NcZq6Zkhf
TF9MX0xfTF9M30b3cPPeZt7zy3theY8o753kPYU8185z0Dw3y3OW9MunHzf9
fuknSr9C7kNz35J2btpFuY7mvJvjNHXNkL6Yvpi+mL6Yvo3uVec93Ly3mff8
8l5Y3iPKeyd5TyHPtfMcNM/N8pwl/fLpx02/X/qJ0q+Q+9Dct6Sdm3ZRrqM5
7+Y4TV0zpC+mL6Yvpm+je/J5rzrv4ea9zbznl/fC8h5R3jvJewp5rp3noHlu
lucs6ZdPP276/dJPlH6F3IfmviXt3LSLch3NeTfHaeqaIX0xfTF9G333kPfk
81513sPNe5t5zy/vheU9orx3kvcU8lw7z0Hz3CzPWdIvn37c9Pulnyj9CrkP
zX1L2rlpF+U6mvNujtPUNUP6Yvo2+o4lv3vIe/J5rzrv4ea9zbznl/fC8h5R
3jvJewp5rp3noHlulucs6ZdPP276/dJPlH6F3IfmviXt3LSLch3NeTfHaeqa
IX0bfZeU37Hkdw95Tz7vVec93Ly3mff88l5Y3iPKeyd5TyHPtfMcNM/N8pwl
/fLpx02/X/qJ0q+Q+9Dct6Sdm3ZRrqM57+Y4TV0znPHtSzr2nvVCddgrF+1y
c7+51dOrd+nVc/3CwguvmnRy954vFX7o7lUth4ydXw38zO2nj538THkfex97
Hy/dp7q82+BFhQ988Yjm0Suml3R7Tew/Y3LL7MIZyg/LD8sPyw+vmr3wrq5N
iwvLX7ryz3xwhvLH8sfyx/LHO53yzlfv6PpQSUd5sPLgDOWH5Yflh+XnPflh
+WW6OEP5YfnhdYPPfLHTvCWF5e89+WP5Zz0yH5yh/LH8sfw9J38s/6xHposz
lB+eP+9fd7t+xJ3l7/LH8sPGWZY708UZdnj4E7+dNvHaaqvnnv7ViG7LS/5Y
/tg4xPo7lh/OcNsJv/7i+gPaCnc569Tpw/q/Ulh5PKc8WHkwPbDyYOMG6x9Z
Dpyh8uFdDu5xwpozXi2svJ5TXqy8WHmx8mLlxcqL9a9stywnzlD5sfL7u/Jj
5cfKj5UfKz9Wfqz82Y5ZLpyh8u663d9WnjF6RSkvVl6svFh5sfJi5cXKi5UX
Ky9Wzizf7s0zRq6Y8FopH1Y+rHxY+bDyYeXD8tt70tVdB09dWfLD8sPyw/LD
8sPyy/Q/P3zA7S0LVpX0sfSx9LH0sfSx+Szf73n4Xl8buGZ1eR97H+svJfSd
fM39jv9U91nD1pb48j19zeZb8yw2D/p7huLzOe2B2auYvYq1Z9o/7F7lwY3s
LqHn8u+eVx5/Vx7Mfk77Tbrav3xvU7ej9PXPtKfkqz75PU22m34gn0Z2pnTE
qw9Wn7QP8x542ovi9c/y/UldX/mrb9pvycqlPbD2yO9PGtnh2iPrj6WD1T/t
07z3nvaqePUv32cYR3U66p/2pHzVF6tvo36W+4zUrVE90g6WvnSw+mD2DP5w
wz//LSvpWH/TrsDaQz7aI+1b7aw9sPbAuU/KftlIp7TPpefvWP2x+mP19576
Y/XH6i9d9U/72r5b/bH6Y/rnvjD3bbmPyv1A3uPPfYG/qz9mN2Pt4T3tgbUH
1h5p7yfzO2gfrP6eV//cp+a+MePVQ3zWy/PyzX2Lv3sPa4/cB2DtkSwd9pR4
LJ59JR7nfgbzP2W8crIHxGt/8dofa+/cf4k3/4r3vHjtj7U/znb1d6w9M14o
HmtfrD2z/th4S5au9Ue8+uf+kF9MfbFx0Gjc0DX7kfez3vxxjdrJe43aSf/I
/WfepxXPf5n7Zc/rL3k/2vPaky7as9G8keNEfT0vn9xn5z3Y3Ofm/e/cz+Z9
4dyPi1dfbP7G+of39Y/cnxc/ab0+4UbrinjtlfNE9vusd+7/855w+gH8XT7l
Pm7dXvy62gdrH0z/9AeI117itRc2v6T/wPvas/iZ6/bE2g9rv5xXsz1z3sh2
SP+D9P0dy6fcd63bjx9c+2Hth7UX1p7S1X5Y+2Htl/4L6Wm/4pev2w9rP9xo
HcLaK/0d3tc+2HPlvmjdPrm/d06gfbD2wdqHP0L7YO2DtU/6S6Snfco5Rd0+
WPtg/Ut62gtrL6y90r+i/toHax/+CO3j3ET7YO3hfe2BtQfWHhmf/hPpa59y
blO3D9Ye6b8Rr33Eax+sfbI/8I+or3Mi9VVe9cXWH6y+WH3TnyN99c37h+k/
Eq/+4tUXqy9W3yy/8ig/Vl7+H+XFypv36dIflffrxCsvVt70T+33yTeeW9Dp
L6W+8vd++qeKH6q2N3CjMP1U+R6mv3bSfvk7NOm/Sj9R/h5OIz+W5/P3VdJf
kb/Pod3L+W7s9/P3GNJPg8t5bM3lPLZm+Rl38ku/Vfp5sPSx9LH06S59LP30
G+G0k6WPpa8fsS+x/LD8sPxyP2jfQaf8btLzypN2qefN19h8Xb4frvsrO9b8
hc1f+T1w7rfE629YfbD65HefjfYR7EGcdrf6YeNLusqXOma+uS/B0kvds91z
f5H7ifQ75Pd0WS/s/oV6Sh9LH0s/v+fKdsr09AvpYf6H7DdYenkelN/DsB+k
j6WPpY+ln/aH9OVbvveo88/vNazP8k/7Ib+/EK98WPmw8uX6n98T5Pqd3wOI
lx+WH5Zfpmd9NN7y/rn1UHq5Pub9Zuuh93N9zHso1jnlyXOC5PSL57lB+skb
nRukH117m//VF2s/7HnjRnz6B/N3CfI+Qf49f7cgz/lzvjXfmG9x+k3MC9h4
yO/mvadd8z1s/ZKO+S6/98z43O8Zf+bb/L4t9zv5fVTa//l9TdrD+q94fPRx
F75/xuj/qQatOeeDTvP+XPjATxwzcUS356sBa7t8dvDUlwqL73v/K/OH9V9Q
4vHgsbd9Z+CaRSUc2uOgC/p3bynhjPv3XzGhX2t13p+eu6XfwKUl9PcM9/zK
j745fsSN1ZOXfXhht8HLq9ZtfvDjK1bcUzjDp4+b26VpRFth7/u79/M5nKF6
f/fYxc93bZpXHdDv8p07dJhf2uvrr+568PoDXijsec8J/V07+bv3xR9x2T2n
rTljYYnH4o/f87BxKya8uEm60vF3+QjFC/1d+v6Oxcuv1HP6okdaFrxc+PRB
Z7ct6LS4/B0Lz3l/q+3nHbKk8Ixx28+9o+vtRXfxQvr03W38vS0LWsvzR7w+
5LCBa5ZXnWYM6jyl5f7CGSrX0rHrBo9e8Vrpn4M+94vr+w18rbTX4HcH9pw1
bGV5/pVB0/+2YcPK0r/Fex97//Qnus88ZOyq8v6qHj+7ekS31eV98alrtrv6
GR/qgfVf7TPj4kvefHzipaX9Roy/sfesYcsKa7eMFxpXjf7ufX8vOsS4FV/s
1IhnF2a5zI+Zn+cb5YuznXq+PLpH71mzquf2/OWtXZteKfPO8WPeO6t/91er
A87vdmLP9U9swiedNHuLeYesqA79+ORLuvecUy2a/oU/d5q3osTrL1nPrJf4
tIdL+Wu9hJ06HtVp8NS1hXMeyXkh54Ej7vvWHd0G/6nkj5VDejmvKr95zPPe
9xxWfu9lPbPf+Lv0vW9dLferoh0yZL/n/cQ8P8zf18r7hfn7TuW8qLZP8vd7
xGs/9RKf50P2L+yr/H2YvM9n/8L+yt9pbHSuv7lzbucb6m/+NF/o3zjPgelB
r7J+1Kyd1d/4Ey898eZ56yo9tUfpz/X4xd+Zuu+iBZ3af39Df7H+LFz7/QPH
Tm7//Qb2kXjjl13LPjLfGs/eF1/snzreOLN+SB9Ln31V7J56ffC+9YRu+b0z
+8v71gvvW0/4wejE/s17P3kPpvweZd3fsffLfY2wK6QnPu0A6ZffQ6zTz9+3
1D/1R/aB/Mt9iTp/8fLP3zeUXtGzfl55sh8qDxavH5bf+6vLn7/faP5Rfv3a
/ON540u8+cG4KfZCHW9+MP7EG5/GjeeVP39HqNxzr+1Uz4uXvnjpm6fEG4fW
C/ZGmd/rfud98yM2/5o/tYf50/PSy3sC6pvl85z4LE9y2TfU7H3rUa5vGZ/3
AZSj3MeL+uT86P1ip9XPa+esF1Ze9cR53k5X5fe88uPs5/qJ9+nseenpB+rv
eemLN67sb41D9lexS+rn1V967CvzvfTM98a5/bL1xvPql/ds7L/l73n5i5ce
e9D78rMeWU/Yk+xF5bX+KK/9u/Q9L33x+o/1RH7J1hPzIVYe65X8+QfYUdYN
+ioXPZO1m/GbbLzpH+KNj+S043N+87x+nvl5T36ZDqYvVl/znvGU/re0w/O7
P39n/7HH814xPa3bnsfKn/cfsfY3jpQfsxMzPtcb40J64r2Pva8dPY89jz3P
nlbf/L1N8533c3/B3lZeekkvf19TPDafeK74z+v8cx9BR/cJynpbs3nbfGQ8
yK/sM+vy5/O5Xub6UObz2j7Rz63/2Prveaz/snfoxA7Tv7BQP0kWsse1h/1z
+mmw9irlrdn6tedBaz/29bEzij7yZf/yb7CzzW/YuMLas9ib9fv8MN7H3sfe
L/Zh/b55s8yvNXsf08H7+qF49cTy0250yu8QsXkDF/u/fj/9HOahPD80vsyX
5T5m3Q/pZ3x4vty/r5/zvno3X7ndfvMO+XM1ZOZHB4+dvOm8LR2s/+iv5f+X
CDtWfM778k87FdPB/k967A3PY/GeN9/k+mt9L7+fX7P8sPTyeeu15/H8Vedt
s7DTvOrOC7a5bnJL+/yb65v5M9cx8Tlfpj2mffQH9o3nsflL+3gfl+896v7Q
+u7CX9444ufVspNvGNa/e/t8Ri/9o/t5++3dc31rGf/FX1lzmT/4vWO+97zy
pj2i/spvvIjP8+Ksn/lR+uk/M361Nx21Z+4vlaf4z+v6GN/WX/noNy8+fOhN
/bs/U8aT+rPfnvn0H4YNXPOn0l/E07d8P1Kz8rNf1Ze9633tUb57Sq79AXnu
I312pXjjR7z+Jf+835nnSmU9Uj7+iQ/OPGz/Zyds8vv7b019bOpN311Uvb71
LScu2q19X8Of13HkTltNmtRcDd/vV33v+ujuTX7n/oZJuzy48x7t9wzOa9n3
9HW7b9y/r3mmz4JB7fcIXt4w7/Hnrmn/vfeWmuk9vk4/7yNfu/bm6Q9MaK0O
r9MTP6quj+fW1uXP37/tdOtet045sf1+wcW3LDxm4Aft5423nTl8zMz32qrZ
lz++fd8xS6t7D79u6gl7NFdHruwy/NljW6tz/zropw9v0VztecFTg757+ZTq
Gx17dx7asrQa9akNt+/wqynV/qf3/Obcn7dWdxz15e7HXn1v9Xafo/a5YOjy
avvHLtnhgf9qq7Z58/7hB562vHrvp2e2XLrwlura63965sce3FivSad955YL
lldNw3u17XZdW3XDbXc9/KNPLa5u69t3+Q+OXlIN+P0eM+65t7m6YtSes4dO
WVqdWPOjfzx7j6Mmtpbn71p6yo7Pnry8+mS3cV2anmqrthv591cnXLuxPEP7
nL/vDydVHcd8a9yo7m3VZftdM2v2ju3hqN+9886pW46pWn72zdP67v1K9fi6
r0/rPLW1mnvtwlc/tmZj+9Xx/d4Y3nvEtEXVfS9f9u5b0zb1a37v+rs6DxjW
XD3/5a5zJ526rOq8ft9p53RorsbX+b+19tzlHz3S/r3K/K3HN3Vfu7h6YMwR
A17v0/69yPt391x48w82/Y5k4l+OvuWSIS3VpXW5/37TsouGty6uPlHXd8U2
O/SZtVGPkbUe47868cKzX19afbv/mgvvntNWXfDEbhec99bS6uiaZ+4+7LAn
r2qtmrbsOmT2Dc3VndXBD07Zcln165q/2Dp4n89f0lrtPPikh5t/2/778If2
6bqs36OTN7nPv+uH9x/w405t1U1XjnrojFWLq3sf++Nn523XVs0ZdeCkebdu
ep++1yPnXH/p0vb79B/OXH9xjz+0VePffnvW5d+/Y5P79UPHv/+9C3Zo/z3j
p7quPrrjT9qqD2af8vBnVm96P73bvC9UHWe3VS/VeozY6oz/nrOhrepX9+c5
VxzX77aP2vv/I1/ace3ILhvHd51/uSdQp5/3t343bo/n/9G3pdrxR+dfPWBO
+72g9bV+ef9o358vunfGs+1+ta/2OP/3fzunrbqn1j/vF3X844Ah/bdtrj5e
t3+571Xnp9w31+0tnL9X0/cf6ji52nZtr61vOmZ59eDMHX7W+4q2qnnnRzZc
dNLy6qOJJ596bJcl1V+3faLPyYuaq1t23vLKM6+YUp21+vEHr9o4Xo7ttcUp
/7ZycvVsr2Gjh26xvDq41ls/H1OP792uG/pg1y8uqR6r83tlrwnvzhmypDr7
mJ4j917WPi7Oqpku268etd+tBy2udj3yyr22uKj9+4tnz7jn0nUXtvtHezzX
+aiuKxZV4+r54YUuN39t7uL23zlfsueMy5pmLa2eqvuX/DrX881b+4zvMq73
kuq+uv6HNo/r0Pm4JdWkevym3/KEBya9v3DjONr1pf2H73/N0mrE/iPfXPJG
WzX9F9MW/vjlJdXbv+m+buXctqpLXf65Z6177IPtllS/2Hnm/mMf3LguTzj+
8PVfaq7eObDnsCM/vXEfNveZF/bbWJ/Wer5rmb9rjw9/3Vx9ULf/1h/89ocn
/LJtk/Un55tsj1y/Mv1N1qvoz5ubj3J925ze2T9yfcj1LuenXD9yPdxc/9xk
Por+n+tRrq85f+V6kfNRzle5nuV6nPNXrje5Puf6kuM17Y1cP3I+yPUj15fs
z7n+5njO9Tjnp//vepLrec4Xub7n/LG5+TbXo5xvcz7O8bm5+SLnh5w/0t76
v65H7LG0R3J9S3sv7anNrZdpD+X6nPZm2nO5vuR6n/Zr2me5nqV9kvZLrrdp
/2xufcj1INeLtNdzvU/7K+2DtP9z/cr9Ra5/uX7k+pL2StrnaX+mPZH2fdqv
/wsuC2zO
       "]], {}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, DisplayFunction -> 
     Identity, Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> None, 
     DisplayFunction -> Identity, Axes -> True, 
     AxesLabel -> {None, None, None}, 
     AxesOrigin -> {Automatic, Automatic, Automatic}, 
     BoxRatios -> {1, 1, 0.4}, DisplayFunction :> Identity, ImageSize -> Full,
      Lighting -> "Neutral", Method -> {"RotationControl" -> "Globe"}, 
     PlotRange -> {{-1., 1.}, {-1., 1.}, {0., 5.544721476389553}}, 
     PlotRangePadding -> {
       Scaled[0.02], 
       Scaled[0.02], 
       Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{
       FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           GraphicsBox[{
             RasterBox[CompressedData["
1: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

              "], {{
                Rational[-15, 2], 
                Rational[-225, 2]}, {
                Rational[15, 2], 
                Rational[225, 2]}}], {Antialiasing -> False, 
              AbsoluteThickness[0.1], 
              Directive[
               Opacity[0.3], 
               GrayLevel[0]], 
              LineBox[
               NCache[{{
                  Rational[15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[-225, 2]}, {
                  Rational[-15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[225, 2]}, {
                  Rational[15, 2], 
                  Rational[-225, 2]}}, {{7.5, -112.5}, {-7.5, -112.5}, {-7.5, 
                112.5}, {7.5, 112.5}, {7.5, -112.5}}]]}, {
              CapForm[None], {}}, 
             StyleBox[{Antialiasing -> False, 
               StyleBox[
                LineBox[{{7.5, -112.5}, {7.5, 112.5}}], {
                 Directive[
                  AbsoluteThickness[0.2], 
                  Opacity[0.3], 
                  GrayLevel[0]]}, StripOnInput -> False], 
               StyleBox[
                StyleBox[{{
                   StyleBox[
                    LineBox[{{{7.5, -112.5}, 
                    Offset[{4., 0}, {7.5, -112.5}]}, {{7.5, -56.25}, 
                    Offset[{4., 0}, {7.5, -56.25}]}, {{7.5, 0.}, 
                    Offset[{4., 0}, {7.5, 0.}]}, {{7.5, 56.25}, 
                    Offset[{4., 0}, {7.5, 56.25}]}, {{7.5, 112.5}, 
                    Offset[{4., 0}, {7.5, 112.5}]}}], {
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]]}, StripOnInput -> False], 
                   StyleBox[
                    LineBox[{{{7.5, -101.25}, 
                    Offset[{2.5, 0.}, {7.5, -101.25}]}, {{7.5, -90.}, 
                    Offset[{2.5, 0.}, {7.5, -90.}]}, {{7.5, -78.75}, 
                    Offset[{2.5, 0.}, {7.5, -78.75}]}, {{7.5, -67.5}, 
                    Offset[{2.5, 0.}, {7.5, -67.5}]}, {{7.5, -67.5}, 
                    Offset[{2.5, 0.}, {7.5, -67.5}]}, {{7.5, -45.}, 
                    Offset[{2.5, 0.}, {7.5, -45.}]}, {{7.5, -33.75}, 
                    Offset[{2.5, 0.}, {7.5, -33.75}]}, {{7.5, -22.5}, 
                    Offset[{2.5, 0.}, {7.5, -22.5}]}, {{7.5, -22.5}, 
                    Offset[{2.5, 0.}, {7.5, -22.5}]}, {{7.5, -11.25}, 
                    Offset[{2.5, 0.}, {7.5, -11.25}]}, {{7.5, 11.25}, 
                    Offset[{2.5, 0.}, {7.5, 11.25}]}, {{7.5, 22.5}, 
                    Offset[{2.5, 0.}, {7.5, 22.5}]}, {{7.5, 22.5}, 
                    Offset[{2.5, 0.}, {7.5, 22.5}]}, {{7.5, 33.75}, 
                    Offset[{2.5, 0.}, {7.5, 33.75}]}, {{7.5, 45.}, 
                    Offset[{2.5, 0.}, {7.5, 45.}]}, {{7.5, 67.5}, 
                    Offset[{2.5, 0.}, {7.5, 67.5}]}, {{7.5, 67.5}, 
                    Offset[{2.5, 0.}, {7.5, 67.5}]}, {{7.5, 78.75}, 
                    Offset[{2.5, 0.}, {7.5, 78.75}]}, {{7.5, 90.}, 
                    Offset[{2.5, 0.}, {7.5, 90.}]}, {{7.5, 101.25}, 
                    Offset[{2.5, 0.}, {7.5, 101.25}]}}], {
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4], 
                    Opacity[0.3]]}, StripOnInput -> False]}, 
                  StyleBox[
                   StyleBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"-\[Pi]\"", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -112.5}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"-\[Pi]/2\"", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, -56.25}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"0\"", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 0.}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"\[Pi]/2\"", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 56.25}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"\[Pi]\"", TraditionalForm], 
                    Offset[{7., 0.}, {7.5, 112.5}], 
                    ImageScaled[{0, 0.5}], Automatic, {1, 0}]}, {
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False], 
                    
                    StyleBox[{{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}}, {
                    Directive[
                    AbsoluteThickness[0.2], 
                    GrayLevel[0.4], 
                    Opacity[0.3]], {
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False]}, {}}, {{
                    Directive[
                    Opacity[1]], 
                    Directive[
                    Opacity[1]]}}, StripOnInput -> False], {"GraphicsLabel"}, 
                   StripOnInput -> False]}, {"GraphicsTicks"}, StripOnInput -> 
                 False], {{
                  Directive[
                   AbsoluteThickness[0.2], 
                   GrayLevel[0.4]], 
                  Directive[
                   AbsoluteThickness[0.2], 
                   GrayLevel[0.4], 
                   Opacity[0.3]]}}, StripOnInput -> False]}, {"GraphicsAxes"},
               StripOnInput -> False]}, PlotRangePadding -> Scaled[0.02], 
            PlotRange -> All, Frame -> True, 
            FrameTicks -> {{False, False}, {True, False}}, FrameStyle -> 
            Opacity[0], FrameTicksStyle -> Opacity[0], 
            ImageSize -> {Automatic, 225}, BaseStyle -> {}], Alignment -> 
           Left, AppearanceElements -> None, ImageMargins -> {{5, 5}, {5, 5}},
            ImageSizeAction -> "ResizeToFit"], LineIndent -> 0, StripOnInput -> 
          False], {FontFamily -> "Arial"}, Background -> Automatic, 
         StripOnInput -> False], TraditionalForm]}, "BarLegend", 
      DisplayFunction -> (#& ), 
      InterpretationFunction :> (RowBox[{"BarLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   InterpretationBox[
                    RowBox[{
                    TagBox["ColorDataFunction", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"MidShiftBalancedHue\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Gradient: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    StyleBox[
                    GraphicsBox[{
                    RasterBox[CompressedData["
1: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
                    "], {{0, 0}, {1, 1}}]}, {
                    ImageSize -> 65, BaselinePosition -> Bottom, AspectRatio -> 
                    NCache[
                    Rational[1, 8], 0.125], PlotRange -> {{0, 1}, {0, 1}}}], 
                    Selectable -> False, StripOnInput -> False], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"MidShiftBalancedHue\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Gradient: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    StyleBox[
                    GraphicsBox[{
                    RasterBox[CompressedData["
1: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
                    "], {{0, 0}, {1, 1}}]}, {
                    ImageSize -> 65, BaselinePosition -> Bottom, AspectRatio -> 
                    NCache[
                    Rational[1, 8], 0.125], PlotRange -> {{0, 1}, {0, 1}}}], 
                    Selectable -> False, StripOnInput -> False], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Class: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ThemeGradients\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    ColorDataFunction[
                    "MidShiftBalancedHue", "ThemeGradients", {0, 1}, Blend[
                    "MidShiftBalancedHue", #]& ], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], "[", "#1",
                    "]"}], "&"}], ",", 
               RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}], ",", 
           RowBox[{"LegendMarkerSize", "\[Rule]", 
             RowBox[{"Max", "[", 
               RowBox[{"150", ",", "Full"}], "]"}]}], ",", 
           RowBox[{"\"ColorFunctionShading\"", "\[Rule]", "None"}], ",", 
           RowBox[{"OpacityFunction", "\[Rule]", "None"}], ",", 
           RowBox[{"\"OpacityFunctionTicks\"", "\[Rule]", "None"}], ",", 
           RowBox[{"\"OpacityFunctionSize\"", "\[Rule]", 
             RowBox[{"Scaled", "[", "0.5`", "]"}]}], ",", 
           RowBox[{"\"OpacityFunctionRange\"", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"0", ",", "1"}], "}"}]}], ",", 
           RowBox[{"Charting`TickLabels", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "\"-\[Pi]\"", ",", "\"-\[Pi]/2\"", ",", "\"0\"", ",", 
                 "\"\[Pi]/2\"", ",", "\"\[Pi]\""}], "}"}]}], ",", 
           RowBox[{"Ticks", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   
                   RowBox[{
                    "0.`", ",", "0.25`", ",", "0.5`", ",", "0.75`", ",", 
                    "1.`"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    FractionBox["1", "20"], ",", 
                    FractionBox["1", "10"], ",", 
                    FractionBox["3", "20"], ",", 
                    FractionBox["1", "5"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "5"], ",", 
                    FractionBox["1", "4"], ",", 
                    FractionBox["3", "10"], ",", 
                    FractionBox["7", "20"], ",", 
                    FractionBox["2", "5"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["2", "5"], ",", 
                    FractionBox["9", "20"], ",", 
                    FractionBox["1", "2"], ",", 
                    FractionBox["11", "20"], ",", 
                    FractionBox["3", "5"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["3", "5"], ",", 
                    FractionBox["13", "20"], ",", 
                    FractionBox["7", "10"], ",", 
                    FractionBox["3", "4"], ",", 
                    FractionBox["4", "5"]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["4", "5"], ",", 
                    FractionBox["17", "20"], ",", 
                    FractionBox["9", "10"], ",", 
                    FractionBox["19", "20"], ",", "1"}], "}"}]}], "}"}]}], 
               "}"}]}], ",", 
           RowBox[{"Charting`TickSide", "\[Rule]", "Right"}], ",", 
           RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}]}], "]"}]& )], 
     TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8784861961813173`*^9, 3.8784866117460027`*^9},
 CellLabel->
  "Out[539]=",ExpressionUUID->"a966a4ff-c2e7-42d6-bd3f-8305d9b7ac90"]
}, Open  ]],

Cell["C", "Text",
 CellChangeTimes->{
  3.8784857101535273`*^9},ExpressionUUID->"16ddf21d-1e0a-4883-9a77-\
b079043bd906"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.14", "Section",
 CellChangeTimes->{{3.878485629761165*^9, 
  3.878485630370572*^9}},ExpressionUUID->"cb19dca0-1aad-4fdc-acde-\
81c436c78c30"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"i", "=", "1"}], "\[Infinity]"], 
  FractionBox["1", 
   RowBox[{"i", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Log", "[", "i", "]"}]}], ")"}], 
     RowBox[{"3", "/", "2"}]]}]]}]], "Input",
 CellChangeTimes->{{3.8784862768222785`*^9, 3.8784863166422167`*^9}},
 CellLabel->
  "In[527]:=",ExpressionUUID->"3555cb3d-385c-423c-acd0-c25d73071627"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"i", "=", "1"}], "\[Infinity]"], 
  FractionBox["1", 
   RowBox[{"i", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Log", "[", "i", "]"}]}], ")"}], 
     RowBox[{"3", "/", "2"}]]}]]}]], "Output",
 CellChangeTimes->{3.8784863177827272`*^9},
 CellLabel->
  "Out[527]=",ExpressionUUID->"0e7ab606-2624-4d5e-a66a-cb9aaf719fd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["sum of 1/(n*(1+log(n))^(3/2) from n=1 to infinity", "WolframAlphaLong",
 CellChangeTimes->{{3.878486319563986*^9, 3.878486370269933*^9}},
 CellLabel->
  "In[530]:=",ExpressionUUID->"178f267e-09a2-4a3a-8564-45f74f865068"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "sum of 1/(n*(1+log(n))^(3/2) from n=1 to infinity", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "0", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "5.112", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "", "parseidserver" -> "10", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "10", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 16, 19, 36.2835944`9.312285194460648}, "Line" -> 
    530, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "sum of 1/(n*(1+log(n))^(3/2) from n=1 to infinity"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{505., {42.8544921875, 48.1455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8784863762992687`*^9},ExpressionUUID->"b95d2832-e848-4f10-87f7-\
ece299d9a1a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "1", "\[Infinity]"], 
  RowBox[{
   FractionBox["1", 
    RowBox[{"i", " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"Log", "[", "i", "]"}]}], ")"}], 
      RowBox[{"3", "/", "2"}]]}]], 
   RowBox[{"\[DifferentialD]", "i"}]}]}]], "Input",
 CellChangeTimes->{{3.8784863950724783`*^9, 3.878486409480553*^9}},
 CellLabel->
  "In[531]:=",ExpressionUUID->"3c8f1d6b-7531-4360-8147-35a661090430"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.8784864108712063`*^9},
 CellLabel->
  "Out[531]=",ExpressionUUID->"c180d1cb-313b-4023-8e27-19bb191b5c2e"]
}, Open  ]],

Cell["I don\[CloseCurlyQuote]t understand why this diverges.", "Text",
 CellChangeTimes->{{3.878486444936906*^9, 
  3.8784864541224155`*^9}},ExpressionUUID->"c4599719-4526-45fe-9a3c-\
3dc7ef003a3c"],

Cell["D", "Text",
 CellChangeTimes->{
  3.8784857109919195`*^9},ExpressionUUID->"ac1ccf42-4871-41da-9be6-\
edfbbc2ccc18"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", 
  FractionBox["1", 
   RowBox[{"i", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Log", "[", "i", "]"}]}], ")"}], 
     RowBox[{"3", "/", "2"}]]}]], "]"}]], "Input",
 CellChangeTimes->{{3.878488807401912*^9, 3.8784888082769957`*^9}},
 CellLabel->
  "In[540]:=",ExpressionUUID->"55887c42-c7be-4530-a86e-fcd01b21cefa"],

Cell[BoxData[
 RowBox[{"Log", "[", 
  FractionBox["1", 
   RowBox[{"i", " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Log", "[", "i", "]"}]}], ")"}], 
     RowBox[{"3", "/", "2"}]]}]], "]"}]], "Output",
 CellChangeTimes->{3.878488808853114*^9},
 CellLabel->
  "Out[540]=",ExpressionUUID->"051186ca-242a-47e1-916c-3fab58969aea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"i", "=", "1"}], "\[Infinity]"], 
  RowBox[{"Log", "[", 
   FractionBox["1", 
    RowBox[{"i", " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"Log", "[", "i", "]"}]}], ")"}], 
      RowBox[{"3", "/", "2"}]]}]], "]"}]}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[541]:=",ExpressionUUID->"3f08f838-9db6-4814-b12a-9d6ff10d72d4"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 541, 75, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.878488812451043*^9},
 CellLabel->
  "During evaluation of \
In[541]:=",ExpressionUUID->"e34a53ed-8f91-4921-8679-519508fb664d"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"i", "=", "1"}], "\[Infinity]"], 
  RowBox[{"Log", "[", 
   FractionBox["1", 
    RowBox[{"i", " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"Log", "[", "i", "]"}]}], ")"}], 
      RowBox[{"3", "/", "2"}]]}]], "]"}]}]], "Output",
 CellChangeTimes->{3.8784888126853976`*^9},
 CellLabel->
  "Out[541]=",ExpressionUUID->"d5dfb9a6-290f-41af-8c7f-f15a64dc407e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["1/(n(1+log(n))^(3/2))", "WolframAlphaLong",
 CellChangeTimes->{{3.878488879625203*^9, 3.8784888834845805`*^9}, {
  3.8784889161329556`*^9, 3.8784889179454217`*^9}},
 CellLabel->
  "In[544]:=",ExpressionUUID->"0e840613-2cae-44a5-a752-db57b2277847"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "1/(n(1+log(n))^(3/2))", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"1/(n (1 + Log[n])^(3/2))"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox["1", 
              RowBox[{"n", " ", 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                 RowBox[{"3", "/", "2"}]]}]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[1/(n (1 + Log[n])^(3/2)), {n, -2.2, 2.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2577$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2576$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2576$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2577$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1795231$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2576$\
1795236$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2577$1795237$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2577$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2576$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1795231$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2576$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2576$\
1795236$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2577$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2577$\
1795237$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$1795208[
                    Plot[{
                    
                    Re[$CellContext`n^(-1) (1 + Log[$CellContext`n])^
                    Rational[-3, 2]], 
                    
                    Im[$CellContext`n^(-1) (1 + Log[$CellContext`n])^
                    Rational[-3, 2]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][$CellContext`n^(-1) (1 + Log[$CellContext`n])^
                    Rational[-3, 2], {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2576$$], 
                    (
                    Piecewise[{{
                    0. + 2.3518989288293346` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.3518989288293346` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2576$$], \
-2.2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2576$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2577$$]], 
                    (
                    Piecewise[{{
                    0. + 2.3518989288293346` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.3518989288293346` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2576$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2577$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2576$$ + 
                    0.0044, 
                    CalculateUtilities`GraphicsUtilities`Private`max2577$$]], 
                    2.2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2576$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2577$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1795208]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1795208[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[CalculateUtilities`GraphicsUtilities`Private`t === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1795208[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbikwfjP4D5B4RqyAEA9Igw7GpAElKe/\
1kkti4drBdrbBPw8+u0matasU0wGa0odTfWk+33333fUeHYkg6fd6PXXVmA+\
CxckWnh4aMxKzXBQ8fneaS1CKCp5cwWe3jAlB7wEjPyB2vuvGvBdyRrQ7v8b3CYsKRjR81ZRRTUFN9\
yXJMxqp2jOW9Nj8ZMpERBj9CY93Xr56MRw+dTAYy5hoDZKrZ20h80wSBUkPga4Z85YR/\
s0dH5THTwVjIXwvgEeg7hvvRJLYwAhOGObjfevlZuoOJqYJj4mML5wmK89R2wuUlpSnE5jl+\
Mb5ZO20BSYyVY6buyU36xTkwr+BD0RoY3Iem7Q9WwL9wrhk9J2V1T/\
nboDn3bbwUpysJg7ze8OQN6LpMahlOp+0rpNjpOpaG/2cq4uaLxsN8vwpU/\
8vHVKll8MYtg0DZkemxqu1twz/vC28yLHr5+K+\
Z8xn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIzbFd8hOn0qWOEEJs6yX2x/\
bFfg9aYQYu2mG5AOr2dAADkYV2y53aMp1aOMSBIZ4Pl1/\
bLJJqIOxePO9rWnPKZmgDlC1i1PaA6ShboTHWVf/\
qi4lVzONBnyfsA1pCDXiv4m1kcacnk8EZ6RhHhBU6/eHFZJjYn0lv2gBAlzwilC0l/mY7+\
5h4uVQKr2JapLOhYHtjSn/kn0ywIfAk911tyxPUeXd9tiNoE4qVUX0CRZnDabY7rfZLpxQ3Og+\
5LgWxL/gd5tCt2m8Fc3haU9uFsTujWhWxO6NaFbE/7fNcFGjP9KvwFri7hu"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[1/(n (1 + Log[n])^(3/2)), {n, -11., 11.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2579$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2578$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2578$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2579$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1795328$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2578$\
1795329$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2579$1795330$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2579$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2578$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1795328$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2578$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2578$\
1795329$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2579$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2579$\
1795330$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$1795307[
                    Plot[{
                    
                    Re[$CellContext`n^(-1) (1 + Log[$CellContext`n])^
                    Rational[-3, 2]], 
                    
                    Im[$CellContext`n^(-1) (1 + Log[$CellContext`n])^
                    Rational[-3, 2]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][$CellContext`n^(-1) (1 + Log[$CellContext`n])^
                    Rational[-3, 2], {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2578$$], 
                    (
                    Piecewise[{{
                    0. + 11.75949464414667 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    11.75949464414667 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2578$$], \
-11.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2578$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2579$$]], 
                    (
                    Piecewise[{{
                    0. + 11.75949464414667 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 11.75949464414667 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2578$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2579$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2578$$ + 
                    0.022, CalculateUtilities`GraphicsUtilities`Private`\
max2579$$]], 11.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2578$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2579$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1795307]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1795307[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[CalculateUtilities`GraphicsUtilities`Private`t === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1795307[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkcpAEx+\
QGN0YkwaUpHzvLXESC9cOtrMN/jz47CZp1q5STAdoSj+c6kvz+O6556739FgESb/\
X66nrxnwQLE628PTEmJGY5aLg8f5ZLolSVPDkGj67Y0xI9B5h8IPEznfTmPdCzkC78xt8H1hUMNDkq\
6aMakrU9EBCntFI1Z6xpCfmJ1MmImD0J3k23Hn9anu442AwljFoTSRX220h80yCIkkPgW4Y844B/+\
aOj8vjp4KxkHwvCI+\
Iemi8EwmxgREcGObjfevVZuoeJqaBxyDjS6fJynPU9gKlJeXphMxyfONisoZtgUGmynFzv+RmnYJc+\
LfwgQhtTM5jk7ZnS6BfGFeMvvOy+ufcDfD8ti28FKericP8dhnyBpqeELVM5/\
PWdXKMVF1ro59zdVnzZaNBXjxl6v+lI6r0chgv2oZBZsemxqu1twz/si28yLHr5+J+\
YMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIy7Fd8hOn0qWOEEJs6yX2x/\
PKrA600hxNpNNyAdXs+AgOTEuGLL7R5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwmC3UHHWVf/qi4lVzONRnyfsg1SYlcK/\
rbWB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJKpLOhYHtjRn/\
kn0ywIfEZ7qrLlje44u77bFbAJxWqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgPAFbim"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Complex-valued plots", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "NoSolutionsFromReduce", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Reduce[1/(n (1 + Log[n])^(3/2)) == 0, {n}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"no roots exist\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "NoSolutionsFromReduce__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion at n = 1/e", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtn=0.36787944117144233", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[1/(n (1 + Log[n])^(3/2)), {n, E^(-1), 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    SqrtBox["\[ExponentialE]"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", 
                    FractionBox["1", "\[ExponentialE]"]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "-", 
                    FractionBox[
                    SqrtBox["\[ExponentialE]"], 
                    RowBox[{"4", " ", 
                    SqrtBox[
                    RowBox[{"n", "-", 
                    FractionBox["1", "\[ExponentialE]"]}]]}]], "+", 
                    RowBox[{
                    FractionBox["7", "32"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "/", "2"}]], " ", 
                    SqrtBox[
                    RowBox[{"n", "-", 
                    FractionBox["1", "\[ExponentialE]"]}]]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", 
                    FractionBox["1", "\[ExponentialE]"]}], ")"}], 
                    RowBox[{"3", "/", "2"}]], ")"}], 
                    SeriesData[$CellContext`n, E^(-1), {}, -3, 3, 2], 
                    Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", 
                    FractionBox["1", "\[ExponentialE]"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox["\[ExponentialE]"]], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox["\[ExponentialE]"], "4"]}], ",", "0", ",", 
                    FractionBox[
                    RowBox[{"7", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"3", "/", "2"}]]}], "32"]}], "}"}], ",", 
                    RowBox[{"-", "3"}], ",", "3", ",", "2"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Puiseux series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[1/(n (1 + Log[n])^(3/2)), n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "n"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "n"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              FractionBox[
               RowBox[{
                 RowBox[{"-", 
                   RowBox[{
                    RowBox[{"2"}], " ", 
                    RowBox[{"log", "(", "n", ")"}]}]}], "-", "5"}], 
               RowBox[{"2", " ", 
                 SuperscriptBox["n", "2"], " ", 
                 SuperscriptBox[
                  RowBox[{"(", 
                    TagBox[
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}], 
                  RowBox[{"5", "/", "2"}]]}]]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[1/(n (1 + Log[n])^(3/2)), n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{
                  TagBox[
                   RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], 
                    RowBox[{"\[DifferentialD]", "n"}]}]}], HoldForm], 
                  "\[LongEqual]", 
                  TagBox[
                   StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{"-", 
                    FractionBox["2", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}]]]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a complex\[Hyphen]valued logarithm\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "GlobalExtrema", "id" -> "Limit", 
     "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Limit[1/(n (1 + Log[n])^(3/2)), {n -> -Infinity, n -> Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TemplateBox[{
                 FractionBox["1", 
                  RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "n", 
                 RowBox[{"\[PlusMinus]", "\[Infinity]"}]}, "Limit2Arg", 
                SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], HoldForm], 
              "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, AutoStyleOptions -> {\
"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "800", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1/(n (1 + Log[n])^(3/2)) == (n (1 + Log[E, n])^(3/2))^(-1)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox["1", 
                 RowBox[{"n", " ", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "\[LongEqual]", 
                FractionBox["1", 
                 RowBox[{"n", " ", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    
                    TemplateBox[{"\[ExponentialE]", "n"}, "Log", 
                    DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1/(n (1 + Log[n])^(3/2)) == (n (1 + Log[a] Log[a, n])^(3/2))^(-1)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox["1", 
                 RowBox[{"n", " ", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "\[LongEqual]", 
                FractionBox["1", 
                 RowBox[{"n", " ", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{
                    RowBox[{"log", "(", "a", ")"}], " ", 
                    TemplateBox[{"a", "n"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )]}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1/(n (1 + Log[n])^(3/2)) == (n (1 - PolyLog[1, 1 - \
n])^(3/2))^(-1)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox["1", 
                 RowBox[{"n", " ", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "\[LongEqual]", 
                FractionBox["1", 
                 RowBox[{"n", " ", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    TemplateBox[{"1", 
                    RowBox[{"1", "-", "n"}]}, "PolyLog"]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "log_b(x) is the base- b logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "Li_n(x) is the polylogarithm function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/PolyLog.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ZetaFunctionsandPolylogarithms/\
PolyLog", "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Polylogarithm.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "900", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1/(n (1 + Log[n])^(3/2)) == 1/(n (1 - Sum[((-1)^k (-1 + n)^k)/k, {k, \
1, Infinity}])^(3/2)) /; Abs[-1 + n] < 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  FractionBox["1", 
                   RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "\[LongEqual]", 
                  FractionBox["1", 
                   RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    UnderoverscriptBox[
                    StyleBox["\[Sum]", ScriptLevel -> 0], 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "n"}], ")"}], "k"]}], "k"]}]}], 
                    ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   RowBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "n"}]}, "Abs"], "<", "1"}], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1/(n (1 + Log[n])^(3/2)) == 1/(n (1 + Log[-1 + n] - Sum[(-1)^k/(k \
(-1 + n)^k), {k, 1, Infinity}])^(3/2)) /; Abs[-1 + n] > 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  FractionBox["1", 
                   RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "\[LongEqual]", 
                  FractionBox["1", 
                   RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "n"}], ")"}], "-", 
                    RowBox[{
                    UnderoverscriptBox[
                    StyleBox["\[Sum]", ScriptLevel -> 0], 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "n"}], ")"}], 
                    RowBox[{"-", "k"}]]}], "k"]}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   RowBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "n"}]}, "Abs"], ">", "1"}], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1/(n (1 + Log[n])^(3/2)) == 1/(n (1 + (2 I) Pi Floor[Arg[n - x]/(2 \
Pi)] + Log[x] - Sum[((-1)^k (n - x)^k)/(k x^k), {k, 1, Infinity}])^(3/2)) /; \
x < 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  FractionBox["1", 
                   RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "\[LongEqual]", 
                  FractionBox["1", 
                   RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"n", "-", "x"}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "+", 
                    RowBox[{"log", "(", "x", ")"}], "-", 
                    RowBox[{
                    UnderoverscriptBox[
                    StyleBox["\[Sum]", ScriptLevel -> 0], 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", "x"}], ")"}], "k"], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"-", "k"}]]}], "k"]}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   RowBox[{"x", "<", "0"}], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "4"}, {
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Integral representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "IntegralRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1000", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1/(n (1 + Log[n])^(3/2)) == 1/(n (1 + Integrate[t^(-1), {t, 1, \
n}])^(3/2))"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                FractionBox["1", 
                 RowBox[{"n", " ", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "\[LongEqual]", 
                FractionBox["1", 
                 RowBox[{"n", " ", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "1", "n"], 
                    RowBox[{
                    FractionBox["1", "t"], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "1/(n (1 + Log[n])^(3/2)) == 1/(n (1 - (I/2 Integrate[(Gamma[-s]^2 \
Gamma[1 + s])/((-1 + n)^s Gamma[1 - s]), {s, -I Infinity + \[Gamma], I \
Infinity + \[Gamma]}])/Pi)^(3/2)) /; -1 < \[Gamma] < 0 && Abs[Arg[-1 + n]] < \
Pi"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  FractionBox["1", 
                   RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "\[LongEqual]", 
                  FractionBox["1", 
                   RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    RowBox[{
                    FractionBox["\[ImaginaryI]", 
                    RowBox[{"2", " ", "\[Pi]"}]], 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Infinity]"}], "+",
                     "\[Gamma]"}], 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Infinity]"}], "+", 
                    "\[Gamma]"}]], 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "n"}], ")"}], 
                    RowBox[{"-", "s"}]], " ", 
                    SuperscriptBox[
                    TemplateBox[{
                    RowBox[{"-", "s"}]}, "Gamma"], "2"], " ", 
                    TemplateBox[{
                    RowBox[{"1", "+", "s"}]}, "Gamma"]}], 
                    TemplateBox[{
                    RowBox[{"1", "-", "s"}]}, "Gamma"]], 
                    RowBox[{"\[DifferentialD]", "s"}]}]}]}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "<", "\[Gamma]", "<", "0"}], 
                    StyleBox[
                    "\" and \"", {FontFamily -> "Roboto", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "n"}], ")"}]}, "Abs"], "<", 
                    "\[Pi]"}]}, "RowDefault"], "\[NoBreak]", ")"}], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/GammaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log/07/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegral", "position" -> 
     "1050", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[1/(n (1 + Log[n])^(3/2)), {n, 1, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "1", "\[Infinity]"], 
                 RowBox[{
                   FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], 
                   RowBox[{"\[DifferentialD]", "n"}]}]}], HoldForm], 
              "\[LongEqual]", "2"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.16883190201112075`, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.16883190201112075`, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.16883190201112075`, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, 
                 CalculateScan`PlotterScanner`Private`taylorParabolas$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$\
 = Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.16883190201112075`, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.16883190201112075`, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["n", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["n", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.16883190201112075`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.16883190201112075`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.16883190201112075`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.16883190201112075`, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.16883190201112075`, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$530361$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$530366$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$530367$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$530368$$ = False,
                  CalculateScan`PlotterScanner`Private`fy1$530369$$ = 0, 
                 CalculateScan`PlotterScanner`Private`fy2$530370$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$530371$$ = False,
                  CalculateScan`PlotterScanner`Private`sqPRQ$530372$$ = False,
                  CalculateScan`PlotterScanner`Private`ar$530373$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentCount$530374$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$530375$\
$ = 0, CalculateScan`PlotterScanner`Private`tangentThickness$530376$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$530377$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$530378$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.16883190201112075`, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.16883190201112075`, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.16883190201112075`, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.16883190201112075`, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.16883190201112075`, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$530361$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$530366$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$530367$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$530368$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$530369$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$530370$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$530371$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$530372$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$530373$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$530374$$\
, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$530375$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
530376$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
530377$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$530378$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`n}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    11.733333333333334`/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    5.866666666666667], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    5.866666666666667]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/($CellContext`n^(-1) (1 + Log[$CellContext`n])^
                    Rational[-3, 2]) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`n < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`n,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`n, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n], {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n], {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate]}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    5.866666666666667]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    5.866666666666667], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 5.866666666666667], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{3.75, {3, 0, 4}}, {4.5, {3, 0, 8}}, {
                    1.5, {3, 0, 11}}, {2.5, {3, 0, 9}}, {2, {2, 0, 2}}, {
                    1, {2, 0, 1}}, {3, {2, 0, 0}}, {3.5, {3, 0, 5}}}, {0, 3, 
                    13, 0, 0}, {{41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 1}, {40, 60,
                     3, 0, 1, 3, 0, 2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 1, 
                    3}, {13, 3, 1, 3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {
                    40, 60, 3, 0, 6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 
                    0, 3, 3, 0, 9, 3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 10}, {16,
                     8, 2, 10, 7}, {41, 263, 3, 0, 3, 3, 0, 11, 3, 0, 10}, {
                    40, 60, 3, 0, 10, 3, 0, 12}, {10, 2, 10}, {16, 10, 2, 12, 
                    10}, {13, 6, 7, 10, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$462, Compile`$463, Compile`$464}, 
                    Compile`$462 = $CellContext`n^(-3); 
                    Compile`$463 = Log[$CellContext`n]; 
                    Compile`$464 = 1 + Compile`$463; 
                    Rational[15, 4] Compile`$462 Compile`$464^Rational[-7, 2] + 
                    Rational[9, 2] Compile`$462 Compile`$464^Rational[-5, 2] + 
                    2 Compile`$462 Compile`$464^Rational[-3, 2]]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{3.75, {3, 0, 4}}, {4.5, {3, 0, 8}}, {
                    1.5, {3, 0, 11}}, {2.5, {3, 0, 9}}, {2, {2, 0, 2}}, {
                    1, {2, 0, 1}}, {3, {2, 0, 0}}, {3.5, {3, 0, 5}}}, {0, 3, 
                    13, 0, 0}, {{41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 1}, {40, 60,
                     3, 0, 1, 3, 0, 2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 1, 
                    3}, {13, 3, 1, 3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {
                    40, 60, 3, 0, 6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 
                    0, 3, 3, 0, 9, 3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 10}, {16,
                     8, 2, 10, 7}, {41, 263, 3, 0, 3, 3, 0, 11, 3, 0, 10}, {
                    40, 60, 3, 0, 10, 3, 0, 12}, {10, 2, 10}, {16, 10, 2, 12, 
                    10}, {13, 6, 7, 10, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$462, Compile`$463, Compile`$464}, 
                    Compile`$462 = $CellContext`n^(-3); 
                    Compile`$463 = Log[$CellContext`n]; 
                    Compile`$464 = 1 + Compile`$463; 
                    Rational[15, 4] Compile`$462 Compile`$464^Rational[-7, 2] + 
                    Rational[9, 2] Compile`$462 Compile`$464^Rational[-5, 2] + 
                    2 Compile`$462 Compile`$464^Rational[-3, 2]]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{3.75, {3, 0, 4}}, {4.5, {3, 0, 8}}, {
                    1.5, {3, 0, 11}}, {2.5, {3, 0, 9}}, {2, {2, 0, 2}}, {
                    1, {2, 0, 1}}, {3, {2, 0, 0}}, {3.5, {3, 0, 5}}}, {0, 3, 
                    13, 0, 0}, {{41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 1}, {40, 60,
                     3, 0, 1, 3, 0, 2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 1, 
                    3}, {13, 3, 1, 3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {
                    40, 60, 3, 0, 6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 
                    0, 3, 3, 0, 9, 3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 10}, {16,
                     8, 2, 10, 7}, {41, 263, 3, 0, 3, 3, 0, 11, 3, 0, 10}, {
                    40, 60, 3, 0, 10, 3, 0, 12}, {10, 2, 10}, {16, 10, 2, 12, 
                    10}, {13, 6, 7, 10, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$462, Compile`$463, Compile`$464}, 
                    Compile`$462 = $CellContext`n^(-3); 
                    Compile`$463 = Log[$CellContext`n]; 
                    Compile`$464 = 1 + Compile`$463; 
                    Rational[15, 4] Compile`$462 Compile`$464^Rational[-7, 2] + 
                    Rational[9, 2] Compile`$462 Compile`$464^Rational[-5, 2] + 
                    2 Compile`$462 Compile`$464^Rational[-3, 2]]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n], 1} (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{3.75, {3, 0, 4}}, {4.5, {3, 0, 8}}, {
                    1.5, {3, 0, 11}}, {2.5, {3, 0, 9}}, {2, {2, 0, 2}}, {
                    1, {2, 0, 1}}, {3, {2, 0, 0}}, {3.5, {3, 0, 5}}}, {0, 3, 
                    13, 0, 0}, {{41, 263, 3, 0, 0, 2, 0, 0, 3, 0, 1}, {40, 60,
                     3, 0, 1, 3, 0, 2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 1, 
                    3}, {13, 3, 1, 3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {
                    40, 60, 3, 0, 6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 
                    0, 3, 3, 0, 9, 3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 10}, {16,
                     8, 2, 10, 7}, {41, 263, 3, 0, 3, 3, 0, 11, 3, 0, 10}, {
                    40, 60, 3, 0, 10, 3, 0, 12}, {10, 2, 10}, {16, 10, 2, 12, 
                    10}, {13, 6, 7, 10, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$462, Compile`$463, Compile`$464}, 
                    Compile`$462 = $CellContext`n^(-3); 
                    Compile`$463 = Log[$CellContext`n]; 
                    Compile`$464 = 1 + Compile`$463; 
                    Rational[15, 4] Compile`$462 Compile`$464^Rational[-7, 2] + 
                    Rational[9, 2] Compile`$462 Compile`$464^Rational[-5, 2] + 
                    2 Compile`$462 Compile`$464^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n], {$CellContext`n, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`n] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/($CellContext`n^(-1) (1 + Log[$CellContext`n])^
                    Rational[-3, 2]) == 0, $CellContext`n, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`n, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
n] == Sqrt[1 + D[$CellContext`n^(-1) (1 + Log[$CellContext`n])^
                    Rational[-3, 2], $CellContext`n]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`n, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]}], $CellContext`n], \
{$CellContext`n, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 5.866666666666667]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n], 
                    1}], $CellContext`n], {$CellContext`n, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 5.866666666666667], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n], 
                    1}]], $CellContext`n], {$CellContext`n, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`n) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) $CellContext`n + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`n)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]), {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`n) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) $CellContext`n + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`n)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]), {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`n)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n], 1}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`n)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n], 1}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n], 1}/(($CellContext`n + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`n, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`n + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n], 1}/(($CellContext`n + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`n, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`n + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
n - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`n, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
n - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`n, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] ($CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] ($CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]^2), {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] ($CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n] ($CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate][$CellContext`n]^2), {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`n}, 
                    Rational[-3, 2] $CellContext`n^(-2) (1 + 
                    Log[$CellContext`n])^
                    Rational[-5, 2] - $CellContext`n^(-2) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`n}, 
                    Rational[-3, 2] $CellContext`n^(-2) (1 + 
                    Log[$CellContext`n])^
                    Rational[-5, 2] - $CellContext`n^(-2) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 4}}, {1, {2, 0, 0}}}, {0, 1, 5, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 3, 0, 4,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {16, 1, 3, 1}, {
                    1}}, 
                    Function[{$CellContext`n}, $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    6}}, {{-1.5, {3, 0, 4}}, {1.5, {3, 0, 8}}, {
                    2.5, {3, 0, 5}}, {1, {2, 0, 0}}}, {0, 1, 10, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 3}, {13, 3, 1, 
                    3}, {41, 263, 3, 0, 3, 3, 0, 5, 3, 0, 6}, {40, 60, 3, 0, 
                    6, 3, 0, 7}, {16, 4, 2, 7, 6}, {41, 263, 3, 0, 3, 3, 0, 8,
                     3, 0, 7}, {40, 60, 3, 0, 7, 3, 0, 9}, {16, 2, 9, 7}, {19,
                     7, 9}, {13, 6, 9, 6}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$433, Compile`$460, Compile`$461}, 
                    Compile`$433 = $CellContext`n^(-2); 
                    Compile`$460 = Log[$CellContext`n]; 
                    Compile`$461 = 1 + Compile`$460; 
                    Rational[-3, 2] Compile`$433 Compile`$461^Rational[-5, 2] - 
                    Compile`$433 Compile`$461^Rational[-3, 2]]], 
                    Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style["\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["n", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["n", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.16883190201112075`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.16883190201112075`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.16883190201112075`, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{
                    CalculateScan`PlotterScanner`Private`involuteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.16883190201112075`, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.16883190201112075`, ""}, 0, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    60}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMBmXfkBDbYEwaUJLyvV58SS1cO7OdbfDnwWc3SbN2lWI6QFP64VRfmsd3zz13vWdHMkr7vV5P\
X7fmo+Q0vYWnp9bsylkuC0Hfn+UKtGZSpNfw2V1rYjB7wMkPoN5305oPUs2I8ec3+D7hScGJgW+\
GcWYY6Mm+IvmUJbr2jBQ7sT+ZcJkQzn7C8+\
3h1nB7y6NgKCNiDCihh20R86kiGtIeAt2wZocT8d0fn5THzwXnMRwXIBLQj6x3rAi1MFIQjukE33ql\
ibqPeRkiKFH00lly4txpe4E2iolsDLMc37iQq5dtcYnKtKfmQUnNOv346G/jAxm7kLzH5ezOjr+\
wMK4We+dF9c+pG+D5bVt4JU9X8obpveNIGzHsBPQymy9aV8kTUrWsC35O1SXNlo3GePGEqf+\
RDpk2y2G8ahsGzI5shVcrbxn+dVt4mWPLz6X90Jov3lECrpoMldw+\
SVrweRTNlAdeoO3T1bl1eIx7Fd8xOkMqWOFENs6yW1x3PK7A6x0hxtpNNiAdUU+\
ACHKwLuq43WMZM7tTokhigefX9cseG8s6lIA729eeCcrs+PKErFub0BykC3UnJpl+/aPiVnI512TI+\
4EwkIFaK/o7WB9lyRV0LAMjifGCpl6DOaySGhEVLPtBCRLnRDCEZL/\
sx33zDxcrgVTtK1SX8iwOXGnOwpPolwU+BJGZaXO7DhxdwW2L2UTytFZdxNJ0cdpsjul+k+\
nGDc2BHkpCaEnCB3q3J3R7wl/cE5Z24G5J6JaEbknoloRuSfh/lwQXMf4r/Qb6c7aW"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1200", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa101319d26f136dc79c4800002i96dc981ah3ad401697175660060143921", 
     "asyncfailed" -> "data not found", "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1300", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa101419d26f136dc79c4800003e1893dh03h7e7g51697175660060143921", 
     "asyncfailed" -> "data not found", "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, 
   Typeset`pod39$$, Typeset`pod40$$, Typeset`pod41$$, Typeset`pod42$$, 
   Typeset`pod43$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux9$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux10$$ = {True, False, {False, False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`aux41$$ = {
   True, False, {False}, True}, Typeset`aux42$$ = {
   True, False, {False}, True}, Typeset`aux43$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "log", "template" -> 
        "Assuming \"log\" is the natural logarithm${separator}Use ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FunClash\", \"log\"} -> {\"Log\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log10\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "13", "datatypes" -> "Math", "timedout" -> 
     "InterestingDefiniteIntegrals", "timedoutpods" -> "", "timing" -> 
     "3.725", "parsetiming" -> "0.355", "parsetimedout" -> "false", 
     "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa100819d26f136dc79c4800004hg556ce8bc560gg1697175660060143921", "id" -> 
     "MSP100919d26f136dc79c480000297dca05gg6g24eb", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa101019d26f136dc79c480000490c02996ch4i2751697175660060143921", "version" -> 
     "2.6", "inputstring" -> "1/(n(1+log(n))^(3/2))"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "Math", "timedout" -> "", 
     "timedoutpods" -> "", "timing" -> "2.698", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "13", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "13", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "1/(n(1+log(n))^(3/2))"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 2, 3.1342438`8.248707756414513}, "Line" -> 
    544, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, Typeset`failedpods$$ = {13, 14, 15, 
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
    35, 36, 37, 38, 39, 40, 41, 42, 43}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "1/(n(1+log(n))^(3/2))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
         Typeset`pod41$$, Typeset`pod42$$, Typeset`pod43$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
         Typeset`aux41$$, Typeset`aux42$$, Typeset`aux43$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{504., {1141.3544921875, 1146.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, 
          Typeset`pod41$$, Typeset`pod42$$, Typeset`pod43$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$, 
          Typeset`aux41$$, Typeset`aux42$$, Typeset`aux43$$}, 
         Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa100819d26f136dc79c4800004hg556ce8bc560gg1697175660060143921", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.87848892339989*^9},ExpressionUUID->"79e9a798-863d-4b54-92d3-03533c32a344"]
}, Open  ]],

Cell[CellGroupData[{

Cell["log(1/(n(1+log(n))^(3/2)))", "WolframAlphaLong",
 CellChangeTimes->{{3.878488879625203*^9, 3.8784888834845805`*^9}, {
  3.8784889161329556`*^9, 3.8784889179454217`*^9}, {3.8784889596131396`*^9, 
  3.878488968416487*^9}},
 CellLabel->
  "In[545]:=",ExpressionUUID->"a868204b-a701-4e32-b50e-7b7fe2b08872"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "log(1/(n(1+log(n))^(3/2)))", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Log[1/(n (1 + Log[n])^(3/2))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"log", "(", 
               FractionBox["1", 
                RowBox[{"n", " ", 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                   RowBox[{"3", "/", "2"}]]}]], ")"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[Log[1/(n (1 + Log[n])^(3/2))], {n, 6.7*^-23, 0.37}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              TemplateBox[{
                GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
gSWTb6ZdTBAVsjzWbXUY/v//n/8DSw4Qqw==
                    "]]}, Annotation[#, "Charting`Private`Tag$602995#1"]& ], 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGAwAWIQzW+/72+OvIOdhK5LyG/Fn/ZFm64HHpycaw/j7xJ6
5bt/ci2c/+HIsU0Gl/rgfK8rrcucnk6D889PntN5zXoenK/XxXfhosRiOL9y
ymu7neeXwfme9bXuttdWwfmfJnBKfzu5Ds4PMJN8ed1mI5yfKdIh2GyzGc5v
DT+6Wk9qK5zPu65+dcm7bXD+jRKRHx2vdsD5SxaUb5t7ZBecv8lm68GGY3vg
fN03+Ub/9u2D80Mbarj2eR2A87c66Sk98TwI508zP17EZXEIzp+RcvaluNVh
hPulJ00uMj8C53ey2JWdVT4K5z9WDa/nVzkG5++rDD8YKHwcoT9czOzhXwSf
OdfpYvifE3C++dbQpedenoTze0yvzdd5fQrhHnvRs9efn4bzVWusjZsvn4Hz
L384t1/08lk4n2mGZ+uKg+fg/Ocnmmo7Vp+H87/PEDm3POQCnL877XYl92kE
f8KFGzuSvC/C+Usve4pYHUbwp0pLce6wuIQIv/8KEzV3IPg3amabSutfhvO1
pvnkMmxA8MO/xNj16F2B84++fqA9YwmC71w/e810lasI/6w56Sk+B8GfIxve
YCt4Dc5315b2Cp+A4BtdCjL4yHYdzn/DbLFe2RPBX2oqqxfWjeADAKYQcsk=

                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$602995#2"]& ]}}, {}}, 
                 DisplayFunction -> Identity, Ticks -> {Automatic, Automatic},
                  AxesOrigin -> {6.734638674259455*^-23, 1.5707963267948966`},
                  FrameTicks -> {{Automatic, {{2., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {4.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {5., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{0.05, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.15, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.25, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.35, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.01, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.02, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.03, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.04, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.06, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.07, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.08, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.09, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.11, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.12, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.13, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.14, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.16, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.17, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.18, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.19, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.21, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.22, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.23, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.24, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.26, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.27, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.28, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.29, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.31, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.32, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.33, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.34, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.36, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.37, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.38, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.39, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {None, None}, 
                 DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                 All, DisplayFunction -> Identity, AspectRatio -> 
                 NCache[GoldenRatio^(-1), 0.6180339887498948], 
                 Axes -> {True, True}, AxesLabel -> {
                   FormBox[
                    TagBox["n", HoldForm], TraditionalForm], 
                   FormBox["y", TraditionalForm]}, 
                 AxesOrigin -> {0, 1.5707963267948966`}, AxesStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1], BaseStyle -> Automatic, DisplayFunction :> 
                 Identity, Frame -> {{False, False}, {False, False}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                   FontOpacity -> 1], 
                 FrameTicks -> {{Automatic, Automatic}, {
                   Automatic, Automatic}}, GridLines -> {None, None}, 
                 GridLinesStyle -> {
                   GrayLevel[0.85], 
                   GrayLevel[0.9]}, ImageSize -> Scaled[0.4], 
                 Method -> {
                  "DefaultBoundaryStyle" -> Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultMeshStyle" -> PointSize[Medium], 
                   "PointSizeFunction" -> "SmallPointSize", 
                   "ScalingFunctions" -> None, 
                   "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
                 PlotRange -> {{6.734638674259455*^-23, 0.3678794411713986}, {
                  1.5707963267948966`, 4.600898673271639}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Prolog -> {
                   Opacity[0], 
                   TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                 Ticks -> {Automatic, Automatic}], 
                TagBox[
                 GridBox[{{
                    StyleBox[
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    TemplateBox[{"n", 
                    TemplateBox[{4}, "Spacer1"], "\"from \"", 
                    TagBox[
                    RowBox[{"6.7", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.5]], 
                    SuperscriptBox["10", "-23"]}], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{"6.7", "\[Times]", 
                    SuperscriptBox["10", "-23"]}], "SRString" -> 
                    "6.7 times 10 to the negative 23"], SyntaxForm -> 
                    CenterDot], "\" to \"", 
                    TagBox["0.4", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.4", "SRString" -> "0.4"]]}, 
                    "RowDefault"], "\[NoBreak]", "\")\""}], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {"\"\""}, {
                    TemplateBox[{
                    GraphicsBox[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    LineBox[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    StyleBox["\" real part\"", Smaller, 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, {
                    TemplateBox[{
                    GraphicsBox[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    LineBox[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    StyleBox["\" imaginary part\"", Smaller, 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{0}}}], "Column"]}, 
               "Labeled", DisplayFunction -> (FormBox[
                 GridBox[{{
                    TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"], 
                    
                    ItemBox[#2, Alignment -> {Inherited, Bottom}, 
                    DefaultBaseStyle -> "LabeledLabel"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                  False, GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  BaselinePosition -> {1, 1}], TraditionalForm]& ), 
               InterpretationFunction -> (RowBox[{
                  StyleBox[
                  "Labeled", FontFamily -> "Roboto", 
                   FontSize -> -1 + Inherited], "[", 
                  RowBox[{#, ",", #2, ",", 
                    TemplateBox[{
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Bottom", FontFamily -> "Roboto", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center]}, "Matrix", 
                    DisplayFunction -> (
                    RowBox[{"(", "\[NoBreak]", #, "\[NoBreak]", ")"}]& ), 
                    InterpretationFunction -> (#& )]}], "]"}]& )], 
              $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
             $CellContext`TagBoxWrapper["CDFContent" -> {"RangeControl"}]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming n>0", "scanner" -> 
     "Simplification", "id" -> 
     "AlternateFormAssumingAllVariablesAreRealAndPositive", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "PowerExpand[Log[1/(n (1 + Log[n])^(3/2))], Assumptions -> {}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
                 TemplateBox[{
                   RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}]}], 
                    RowBox[{"4", " ", "\[Pi]"}]], "+", 
                    FractionBox["1", "2"]}]}, "Floor"]}], "-", 
               RowBox[{"log", "(", "n", ")"}], "-", 
               RowBox[{
                 FractionBox["3", "2"], " ", 
                 RowBox[{"log", "(", 
                   RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}]}]}], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at n = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtn=0.", "position" -> "400", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[Log[1/(n (1 + Log[n])^(3/2))], {n, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], ")"}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["n", "2"], ")"}], 
                    SeriesData[$CellContext`n, 0, {}, 0, 2, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"Log", "[", 
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"Log", "[", "n", "]"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "]"}], "}"}], ",", "0", ",", 
                    "2", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion at n = 1/e", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtn=0.36787944117144233", "position" -> "500", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[Log[1/(n (1 + Log[n])^(3/2))], {n, E^(-1), 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[ExponentialE]", " ", "n"}], "-", "1"}], ")"}], 
                    RowBox[{"3", "/", "2"}]]], ")"}], "+", "1"}], ")"}], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "\[ExponentialE]", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", 
                    FractionBox["1", "\[ExponentialE]"]}], ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", 
                    FractionBox["1", "\[ExponentialE]"]}], ")"}], 
                    RowBox[{"3", "/", "2"}]], ")"}], 
                    SeriesData[$CellContext`n, E^(-1), {}, 0, 3, 2], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", 
                    FractionBox["1", "\[ExponentialE]"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"1", "+", 
                    RowBox[{"Log", "[", 
                    FractionBox["1", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"\[ExponentialE]", " ", "n"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]], "]"}]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["\[ExponentialE]", "4"]}]}], "}"}], ",", "0", 
                    ",", "3", ",", "2"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Puiseux series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion at n = \[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAtn=Infinity", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[Log[1/(n (1 + Log[n])^(3/2))], {n, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], ")"}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "2"], ")"}], 
                    SeriesData[$CellContext`n, 
                    DirectedInfinity[1], {}, 0, 2, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Log", "[", 
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"Log", "[", "n", "]"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], "]"}], "}"}], ",", "0", ",", 
                    "2", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[Log[1/(n (1 + Log[n])^(3/2))], n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "n"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "n"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], ")"}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", "n", ")"}]}], "+", "5"}], 
                  RowBox[{
                    RowBox[{"2", " ", "n"}], "+", 
                    RowBox[{"2", " ", "n", " ", 
                    RowBox[{"log", "(", "n", ")"}]}]}]]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {"Integrate[Log[1/(n (1 + Log[n])^(3/2))], n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 RowBox[{
                   TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], ")"}], 
                    RowBox[{"\[DifferentialD]", "n"}]}]}], HoldForm], 
                   "\[LongEqual]", 
                   TagBox[
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}]}, 
                    "ExpIntegralEi"]}], 
                    RowBox[{"2", " ", "\[ExponentialE]"}]], "+", "n", "+", 
                    RowBox[{"n", " ", 
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]], ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}, {
                 PaneBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    Cell[
                    TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    "\"assuming a complex\[Hyphen]valued logarithm\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    BaseStyle -> {LineIndent -> 0}], 
                   $CellContext`TagBoxWrapper["Label"]], 
                  BaseStyle -> {LineIndent -> 0}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
               "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], ImageSizeMultipliers -> {1, 1}, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Ei(x) is the exponential integral Ei"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/ExpIntegralEi.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/ExpIntegralEi", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ExponentialIntegral.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "900", "error" -> 
     "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa141318950d3hgii7f9i2000054afcc0e32h5d5b04222294402565530544", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1000", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa141418950d3hgii7f9i2000046b25c7f62a54g834222294402565530544", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1100", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa141518950d3hgii7f9i200002c8h6d473ihah70i4222294402565530544", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "log", "template" -> 
        "Assuming \"log\" is the natural logarithm${separator}Use ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FunClash\", \"log\"} -> {\"Log\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log10\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "", "timedout" -> 
     "Plotter,Expression,Simplification,Arithmetic,Derivative,Geometry,\
Integral,Series,FunctionProperties,Reduce,BranchPoint,ComplexMap,\
RiemannSurface,ODE,Sequence,DomainAndRange,GlobalExtrema,\
InterestingDefiniteIntegrals,InterestingMultiDimensionalDefiniteIntegrals,\
MathematicalFunctionData", "timedoutpods" -> "", "timing" -> 
     "3.5460000000000003", "parsetiming" -> "0.435", "parsetimedout" -> 
     "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa189513658ifgad97977b000038ec26059d5gfa0g3172133347439184749", "id" -> 
     "MSP189613658ifgad97977b00004h9gegcc6889i91f", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "8", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa189713658ifgad97977b000055792hg72f7e27493172133347439184749", "version" -> 
     "2.6", "inputstring" -> "log(1/(n(1+log(n))^(3/2)))"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "11", "datatypes" -> "", "timedout" -> 
     "Reduce,BranchPoint,ComplexMap,RiemannSurface,ODE,Sequence,\
DomainAndRange,GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "5.476", "parsetiming" -> "0.435", 
     "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", 
     "parseidserver" -> "13", "host" -> "https://www6b3.wolframalpha.com", 
     "server" -> "13", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa141118950d3hgii7f9i2000020hi14676f25gg594222294402565530544", "version" -> 
     "2.6", "inputstring" -> "log(1/(n(1+log(n))^(3/2)))"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 2, 53.4266195`9.480332540233501}, "Line" -> 
    545, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {9, 10, 11, 12, 13, 14, 
   15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "log(1/(n(1+log(n))^(3/2)))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{505., {482.8544921875, 488.1455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa189513658ifgad97977b000038ec26059d5gfa0g3172133347439184749", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.878488973520419*^9},ExpressionUUID->"1c68c842-444a-4e82-9e7a-\
6ccc63c492fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["log(1/(n(1+log(n))^3/2))", "WolframAlphaLong",
 CellChangeTimes->{{3.8784888205795813`*^9, 3.878488838663392*^9}},
 CellLabel->
  "In[542]:=",ExpressionUUID->"fcd19a44-c73d-4a2a-993f-a423c5accfce"],

Cell[BoxData[
 TemplateBox[{
  "First", "nofirst", 
   "\"\\!\\(\\*RowBox[{\\\"{\\\", \\\"}\\\"}]\\) has zero length and no first \
element.\"", 2, 542, 76, 16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8784888401165166`*^9},
 CellLabel->
  "During evaluation of \
In[542]:=",ExpressionUUID->"667f2865-a9e8-4747-b44c-c338c49a6e60"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "log(1/(n(1+log(n))^3/2))", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Log[1/(n ((1 + Log[n])^3/2))]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"log", "(", 
               FractionBox["1", 
                RowBox[{"n", " ", 
                  RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], "3"]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}]],
                ")"}], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"log", "(", 
               FractionBox["2", 
                RowBox[{"n", " ", 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                   "3"]}]], ")"}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[Log[2/(n (1 + Log[n])^3)], {n, -0.13, 0.42}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max13400$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min13399$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min13399$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max13400$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4723888$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min13399$\
4723893$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max13400$\
4723894$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max13400$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min13399$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4723888$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min13399$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min13399$\
4723893$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max13400$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max13400$\
4723894$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$4723865[
                    Plot[{
                    Re[
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Im[
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Log[
                    2 $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^(-3)], {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min13399$$], 
                    (
                    Piecewise[{{
                    0.1452383149979297 + 
                    0.2924097969700043 Tan[1.5040801783846716` #], # < 0}}, 
                    0.1452383149979297 + 
                    0.2924097969700043 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min13399$$], \
-0.12828600420154163`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min13399$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max13400$$]], 
                    (
                    Piecewise[{{
                    0.1452383149979297 + 
                    0.2924097969700043 Tan[1.5040801783846716` #], # < 0}}, 
                    0.1452383149979297 + 
                    0.2924097969700043 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min13399$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max13400$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min13399$$ + 
                    0.0005470486383989426, 
                    CalculateUtilities`GraphicsUtilities`Private`max13400$$]],
                     0.418762634197401]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min13399$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max13400$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4723865]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4723865[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4723865[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkdgmlS9IsI6NSQNKUr7XSy6JhWsH29kGfx58dpM0a1cppgM0pR9O9aV5fPfcc9d7fiKCpN/\
r9dRNYz4IFidbeHpmzEjMclHw+P15LkEpKnhyA5/dMyYEvQ+M/IDY+\
W4bcyDkjGh3foPvExYVjGj4qimjmoKaHkqSZzRStWcs6an5yZSJiDD6E17sDrd3Xg+\
HDgZjGROtQXK10xYyzyRRkPQQ6JYxe4zwb+74tDx+KhgL4XsBPAL12HgnksQGRnDCMB/\
vW683Uw8wMU14TGR85TRZeY7aXqC0pDydwCzHNy4n61VbYCJT5bh5WHKzTkEu/\
Dv4QIQ2JuexSduzJdAvjGtG30VZ/XPuBnh+2xZeirPVxGF+\
7xjyRjQ9BbVM58vWdXKMVF1ro59zdVXzZaNBXj5l6v+\
lY6r0chjbbcOA2Ymp8WrtLcPvtoUXOXb9XNyPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G/\
4jtEp08FK5zAxFn2i+\
2PJxV4vSmEWLvpBqTD6xkQQA7GFVtu92lK9SgjkkQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmqNk\
oe5ER9mXPypuJZcLTYa8H3ENKci1or+\
L9ZGGXB5PhGckIV7Q1Ks3h1VSYyK9ZT8oQcKccIqQ9Jf52G/\
u4WIlkKpDieqSjsWBLc25fxL9ssDHwFOdNXdsz9Hl3baYTSDOatUFNEkWp83mmO43mW7c0BzoviT4l\
sR/oHebQrcp/NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/SbyERuM4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[Log[2/(n (1 + Log[n])^3)], {n, -1.2, 1.5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max13402$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min13401$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min13401$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max13402$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4723985$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min13401$\
4723986$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max13402$\
4723987$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max13402$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min13401$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4723985$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min13401$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min13401$\
4723986$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max13402$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max13402$\
4723987$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$4723964[
                    Plot[{
                    Re[
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Im[
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Log[
                    2 $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^(-3)], {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min13401$$], 
                    (
                    Piecewise[{{
                    0.1452383149979296 + 
                    1.4620489848500215` Tan[1.5040801783846716` #], # < 0}}, 
                    0.1452383149979296 + 
                    1.4620489848500215` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min13401$$], \
-1.2223832809994268`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min13401$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max13402$$]], 
                    (
                    Piecewise[{{
                    0.1452383149979296 + 
                    1.4620489848500215` Tan[1.5040801783846716` #], # < 0}}, 
                    0.1452383149979296 + 
                    1.4620489848500215` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min13401$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max13402$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min13401$$ + 
                    0.002735243191994713, 
                    CalculateUtilities`GraphicsUtilities`Private`max13402$$]],
                     1.512859910995286]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min13401$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max13402$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4723964]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4723964[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4723964[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkdgqTXxAgnVsTBpQkvK9XnJJLFw72M42+PPgs5ukWbtKMR2gKf1wqi/\
N47vnnrve8xMRJP1er6duGvNBsDjZwtMzY0ZilouCx+/PcwlKUcGTG/\
jsnjEh6H1g5AfEznfbmAMhZ0S78xt8n7CoYETDV00Z1RTU9FCSPKORqj1jSU/NT6ZMRITRn/\
BiuLu983p36GAwljHRGiRXO20h80wSBUkPgW4Zs8cI/+\
aOT8vjp4KxEL4XwCNQj413IklsYAQnDPPxvvV6M/\
UAE9OEx0TGV06Tleeo7QVKS8rTCcxyfONysl61BSYyVY6bhyU36xTkwr+\
DD0RoY3Iem7Q9WwL9wrhm9F2U1T/\
nboDnt23hpThbTRzm944hb0TTU1DLdL5sXSfHSNW1Nvo5V1c1XzYa5OVTpv5fOqZKL4ex3TYMmJ2YG\
q/W3jL8sC28yLHr5+J+\
ZMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIz7Fd8hOn0qWOEEJs6yX2x/\
PKnA600hxNpNNyAdXs+AAHIwrthyu09TqkcZkSQywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwlC3UnOsq+/FFxK7lcaDLk/\
YhrSEGuFf1drI805PJ4IjwjCfGCpl69OaySGhPpLftBCRLmhFOEpL/\
Mx35zDxcrgVQdSlSXdCwObGnO/ZPolwU+Bp7qrLlje44u77bFbAJxVqsuoEmyOG02x3S/\
yXTjhuZA9yXBtyT+A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgMtjLi+"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Complex-valued plots", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}]}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"FunctionExpand[Log[2/(n (1 + Log[n])^3)]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"log", "(", 
                 FractionBox["1", 
                  RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                    "3"]}]], ")"}], "+", 
               RowBox[{"log", "(", "2", ")"}]}], Identity], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming n>0", "scanner" -> 
     "Simplification", "id" -> 
     "AlternateFormAssumingAllVariablesAreRealAndPositive", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Simplify[PowerExpand[Log[2/(n (1 + Log[n])^3)]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
                 TemplateBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{"3", " ", 
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}]}], "+", 
                    "\[Pi]"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "-", 
               RowBox[{"log", "(", "n", ")"}], "-", 
               RowBox[{"3", " ", 
                 RowBox[{"log", "(", 
                   RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}]}], "+", 
               RowBox[{"log", "(", "2", ")"}]}], Identity], TraditionalForm]],
           "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at n = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtn=0.", "position" -> "600", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[Log[2/(n (1 + Log[n])^3)], {n, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"log", "(", 
                    FractionBox["2", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                    "3"]}]], ")"}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["n", "2"], ")"}], 
                    SeriesData[$CellContext`n, 0, {}, 0, 2, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"Log", "[", 
                    FractionBox["2", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"Log", "[", "n", "]"}]}], ")"}], "3"]}]], "]"}], 
                    "}"}], ",", "0", ",", "2", ",", "1"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Series expansion at n = 1/e", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtn=0.36787944117144233", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[Log[2/(n (1 + Log[n])^3)], {n, E^(-1), 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"log", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ExponentialE]"}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[ExponentialE]", " ", "n"}], "-", "1"}], ")"}], 
                    "3"]], ")"}], "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", "\[ExponentialE]", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", 
                    FractionBox["1", "\[ExponentialE]"]}], ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", 
                    FractionBox["1", "\[ExponentialE]"]}], ")"}], "2"], ")"}], 
                    SeriesData[$CellContext`n, E^(-1), {}, 0, 2, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", 
                    FractionBox["1", "\[ExponentialE]"], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    FractionBox[
                    RowBox[{"2", " ", "\[ExponentialE]"}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"\[ExponentialE]", " ", "n"}]}], ")"}], "3"]], 
                    "]"}], ",", 
                    FractionBox["\[ExponentialE]", "2"]}], "}"}], ",", "0", 
                    ",", "2", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Puiseux series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Series expansion at n = \[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAtn=Infinity", "position" -> "800", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[Log[2/(n (1 + Log[n])^3)], {n, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"log", "(", 
                    FractionBox["2", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                    "3"]}]], ")"}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "2"], ")"}], 
                    SeriesData[$CellContext`n, 
                    DirectedInfinity[1], {}, 0, 2, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Log", "[", 
                    FractionBox["2", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"Log", "[", "n", "]"}]}], ")"}], "3"]}]], "]"}], 
                    "}"}], ",", "0", ",", "2", ",", "1"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "900", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[Log[2/(n (1 + Log[n])^3)], n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "n"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "n"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    RowBox[{
                    FractionBox["1", "2"], " ", "n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], "3"]}]], ")"}], 
                    HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox[
                  RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "4"}], 
                  RowBox[{"n", "+", 
                    RowBox[{"n", " ", 
                    RowBox[{"log", "(", "n", ")"}]}]}]]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["minput", {}, {"Integrate[Log[2/(n (1 + Log[n])^3)], n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 RowBox[{
                   TagBox[
                    RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    FractionBox["2", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"log", "(", "n", ")"}]}], ")"}], "3"]}]], ")"}], 
                    RowBox[{"\[DifferentialD]", "n"}]}]}], HoldForm], 
                   "\[LongEqual]", 
                   TagBox[
                    StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"3", " ", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}]}, 
                    "ExpIntegralEi"]}], "\[ExponentialE]"], "+", "n", "+", 
                    RowBox[{"n", " ", 
                    RowBox[{"log", "(", 
                    FractionBox["2", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                    "3"]}]], ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}, {
                 PaneBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    Cell[
                    TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{"\"(\"", "\[NoBreak]", 
                    "\"assuming a complex\[Hyphen]valued logarithm\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    BaseStyle -> {LineIndent -> 0}], 
                   $CellContext`TagBoxWrapper["Label"]], 
                  BaseStyle -> {LineIndent -> 0}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
               "Column", 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Column"], ImageSizeMultipliers -> {1, 1}, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Ei(x) is the exponential integral Ei"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/ExpIntegralEi.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/ExpIntegralEi", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ExponentialIntegral.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.9406112814107258, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.9406112814107258, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.9406112814107258, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.9406112814107258, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.9406112814107258, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.6335107626650864, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.9020565242316507, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.6335107626650864, 
                    Subscript[
                    Style["n", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.9020565242316507, 
                    Subscript[
                    Style["n", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.9406112814107258, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.9406112814107258, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.9406112814107258, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.9406112814107258, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.9406112814107258, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$927628$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$927633$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$927634$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$927635$$ = False,
                  CalculateScan`PlotterScanner`Private`fy1$927636$$ = 0, 
                 CalculateScan`PlotterScanner`Private`fy2$927637$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$927638$$ = False,
                  CalculateScan`PlotterScanner`Private`sqPRQ$927639$$ = False,
                  CalculateScan`PlotterScanner`Private`ar$927640$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentCount$927641$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$927642$\
$ = 0, CalculateScan`PlotterScanner`Private`tangentThickness$927643$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$927644$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$927645$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.9406112814107258, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.9406112814107258, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.9406112814107258, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.9406112814107258, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.9406112814107258, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.6335107626650864, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.9020565242316507}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$927628$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$927633$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$927634$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$927635$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$927636$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$927637$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$927638$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$927639$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$927640$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$927641$$\
, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$927642$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
927643$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
927644$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$927645$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`n}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    1.458796369063847/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    0.7293981845319235], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7293981845319235]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/Log[2 $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^(-3)] == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`n < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`n,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`n, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 2, 0, 2,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 2}, {16, 2,
                     1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n], {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 2, 0, 2,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 2}, {16, 2,
                     1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n], {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 2, 0, 2,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 2}, {16, 2,
                     1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate]}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    0.7293981845319235]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 2, 0, 2,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 2}, {16, 2,
                     1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    0.7293981845319235], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 2, 0, 2,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 2}, {16, 2,
                     1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 0.7293981845319235], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 2, 0, 2,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 2}, {16, 2,
                     1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    13}}, {{1.5, {3, 0, 15}}, {-6, {2, 0, 3}}, {
                    4, {2, 0, 2}}, {5, {2, 0, 6}}, {-2, {2, 0, 4}}, {
                    24, {2, 0, 5}}, {18, {2, 0, 7}}, {1, {2, 0, 0}}, {
                    3, {2, 0, 1}}, {0.5, {3, 0, 11}}}, {0, 8, 16, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 0, 2, 0, 1, 3, 0, 3}, {40, 60, 3, 0, 
                    3, 3, 0, 4}, {41, 263, 3, 0, 2, 2, 0, 2, 3, 0, 3}, {40, 
                    60, 3, 0, 3, 3, 0, 5}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 
                    60, 3, 0, 3, 3, 0, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 
                    3}, {40, 60, 3, 0, 3, 3, 0, 7}, {41, 263, 3, 0, 2, 2, 0, 
                    1, 3, 0, 3}, {10, 3, 8}, {16, 8, 6, 5, 8}, {10, 4, 9}, {
                    16, 9, 6, 7, 9}, {13, 8, 9, 10}, {41, 263, 3, 0, 2, 2, 0, 
                    6, 3, 0, 12}, {40, 60, 3, 0, 12, 3, 0, 13}, {10, 5, 12}, {
                    16, 12, 4, 13, 12}, {10, 7, 13}, {16, 13, 4, 5, 13}, {10, 
                    2, 14}, {16, 14, 4, 7, 14}, {13, 12, 13, 14, 12}, {16, 11,
                     0, 3, 12, 13}, {40, 56, 3, 0, 2, 3, 0, 14}, {16, 15, 14, 
                    10, 12}, {16, 11, 3, 10, 14}, {13, 13, 12, 14, 13}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$430, Compile`$433, Compile`$436, 
                    Compile`$439, Compile`$454, Compile`$441, Compile`$434, 
                    Compile`$456, Compile`$457, Compile`$458}, 
                    Compile`$430 = Log[$CellContext`n]; 
                    Compile`$433 = 1 + Compile`$430; 
                    Compile`$436 = $CellContext`n^(-3); 
                    Compile`$439 = Compile`$433^(-4); 
                    Compile`$454 = $CellContext`n^(-2); 
                    Compile`$441 = Compile`$433^(-3); 
                    Compile`$434 = Compile`$433^3; 
                    Compile`$456 = (-6) Compile`$454 Compile`$439; 
                    Compile`$457 = (-2) Compile`$454 Compile`$441; 
                    Compile`$458 = Compile`$456 + Compile`$457; 
                    Rational[1, 2] $CellContext`n 
                    Compile`$434 (24 Compile`$436 Compile`$433^(-5) + 
                    18 Compile`$436 Compile`$439 + 
                    4 Compile`$436 Compile`$441) + 
                    Rational[3, 2] Compile`$433^2 Compile`$458 + 
                    Rational[1, 2] Compile`$434 Compile`$458]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 2, 0, 2,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 2}, {16, 2,
                     1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    13}}, {{1.5, {3, 0, 15}}, {-6, {2, 0, 3}}, {
                    4, {2, 0, 2}}, {5, {2, 0, 6}}, {-2, {2, 0, 4}}, {
                    24, {2, 0, 5}}, {18, {2, 0, 7}}, {1, {2, 0, 0}}, {
                    3, {2, 0, 1}}, {0.5, {3, 0, 11}}}, {0, 8, 16, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 0, 2, 0, 1, 3, 0, 3}, {40, 60, 3, 0, 
                    3, 3, 0, 4}, {41, 263, 3, 0, 2, 2, 0, 2, 3, 0, 3}, {40, 
                    60, 3, 0, 3, 3, 0, 5}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 
                    60, 3, 0, 3, 3, 0, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 
                    3}, {40, 60, 3, 0, 3, 3, 0, 7}, {41, 263, 3, 0, 2, 2, 0, 
                    1, 3, 0, 3}, {10, 3, 8}, {16, 8, 6, 5, 8}, {10, 4, 9}, {
                    16, 9, 6, 7, 9}, {13, 8, 9, 10}, {41, 263, 3, 0, 2, 2, 0, 
                    6, 3, 0, 12}, {40, 60, 3, 0, 12, 3, 0, 13}, {10, 5, 12}, {
                    16, 12, 4, 13, 12}, {10, 7, 13}, {16, 13, 4, 5, 13}, {10, 
                    2, 14}, {16, 14, 4, 7, 14}, {13, 12, 13, 14, 12}, {16, 11,
                     0, 3, 12, 13}, {40, 56, 3, 0, 2, 3, 0, 14}, {16, 15, 14, 
                    10, 12}, {16, 11, 3, 10, 14}, {13, 13, 12, 14, 13}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$430, Compile`$433, Compile`$436, 
                    Compile`$439, Compile`$454, Compile`$441, Compile`$434, 
                    Compile`$456, Compile`$457, Compile`$458}, 
                    Compile`$430 = Log[$CellContext`n]; 
                    Compile`$433 = 1 + Compile`$430; 
                    Compile`$436 = $CellContext`n^(-3); 
                    Compile`$439 = Compile`$433^(-4); 
                    Compile`$454 = $CellContext`n^(-2); 
                    Compile`$441 = Compile`$433^(-3); 
                    Compile`$434 = Compile`$433^3; 
                    Compile`$456 = (-6) Compile`$454 Compile`$439; 
                    Compile`$457 = (-2) Compile`$454 Compile`$441; 
                    Compile`$458 = Compile`$456 + Compile`$457; 
                    Rational[1, 2] $CellContext`n 
                    Compile`$434 (24 Compile`$436 Compile`$433^(-5) + 
                    18 Compile`$436 Compile`$439 + 
                    4 Compile`$436 Compile`$441) + 
                    Rational[3, 2] Compile`$433^2 Compile`$458 + 
                    Rational[1, 2] Compile`$434 Compile`$458]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 2, 0, 2,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 2}, {16, 2,
                     1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    13}}, {{1.5, {3, 0, 15}}, {-6, {2, 0, 3}}, {
                    4, {2, 0, 2}}, {5, {2, 0, 6}}, {-2, {2, 0, 4}}, {
                    24, {2, 0, 5}}, {18, {2, 0, 7}}, {1, {2, 0, 0}}, {
                    3, {2, 0, 1}}, {0.5, {3, 0, 11}}}, {0, 8, 16, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 0, 2, 0, 1, 3, 0, 3}, {40, 60, 3, 0, 
                    3, 3, 0, 4}, {41, 263, 3, 0, 2, 2, 0, 2, 3, 0, 3}, {40, 
                    60, 3, 0, 3, 3, 0, 5}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 
                    60, 3, 0, 3, 3, 0, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 
                    3}, {40, 60, 3, 0, 3, 3, 0, 7}, {41, 263, 3, 0, 2, 2, 0, 
                    1, 3, 0, 3}, {10, 3, 8}, {16, 8, 6, 5, 8}, {10, 4, 9}, {
                    16, 9, 6, 7, 9}, {13, 8, 9, 10}, {41, 263, 3, 0, 2, 2, 0, 
                    6, 3, 0, 12}, {40, 60, 3, 0, 12, 3, 0, 13}, {10, 5, 12}, {
                    16, 12, 4, 13, 12}, {10, 7, 13}, {16, 13, 4, 5, 13}, {10, 
                    2, 14}, {16, 14, 4, 7, 14}, {13, 12, 13, 14, 12}, {16, 11,
                     0, 3, 12, 13}, {40, 56, 3, 0, 2, 3, 0, 14}, {16, 15, 14, 
                    10, 12}, {16, 11, 3, 10, 14}, {13, 13, 12, 14, 13}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$430, Compile`$433, Compile`$436, 
                    Compile`$439, Compile`$454, Compile`$441, Compile`$434, 
                    Compile`$456, Compile`$457, Compile`$458}, 
                    Compile`$430 = Log[$CellContext`n]; 
                    Compile`$433 = 1 + Compile`$430; 
                    Compile`$436 = $CellContext`n^(-3); 
                    Compile`$439 = Compile`$433^(-4); 
                    Compile`$454 = $CellContext`n^(-2); 
                    Compile`$441 = Compile`$433^(-3); 
                    Compile`$434 = Compile`$433^3; 
                    Compile`$456 = (-6) Compile`$454 Compile`$439; 
                    Compile`$457 = (-2) Compile`$454 Compile`$441; 
                    Compile`$458 = Compile`$456 + Compile`$457; 
                    Rational[1, 2] $CellContext`n 
                    Compile`$434 (24 Compile`$436 Compile`$433^(-5) + 
                    18 Compile`$436 Compile`$439 + 
                    4 Compile`$436 Compile`$441) + 
                    Rational[3, 2] Compile`$433^2 Compile`$458 + 
                    Rational[1, 2] Compile`$434 Compile`$458]], 
                    Evaluate]}, {$CellContext`n, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 
                    2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3, 2, 0, 2,
                     3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 2}, {16, 2,
                     1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n], 1} (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    13}}, {{1.5, {3, 0, 15}}, {-6, {2, 0, 3}}, {
                    4, {2, 0, 2}}, {5, {2, 0, 6}}, {-2, {2, 0, 4}}, {
                    24, {2, 0, 5}}, {18, {2, 0, 7}}, {1, {2, 0, 0}}, {
                    3, {2, 0, 1}}, {0.5, {3, 0, 11}}}, {0, 8, 16, 0, 
                    0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 0, 2, 0, 1, 3, 0, 3}, {40, 60, 3, 0, 
                    3, 3, 0, 4}, {41, 263, 3, 0, 2, 2, 0, 2, 3, 0, 3}, {40, 
                    60, 3, 0, 3, 3, 0, 5}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 
                    60, 3, 0, 3, 3, 0, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 
                    3}, {40, 60, 3, 0, 3, 3, 0, 7}, {41, 263, 3, 0, 2, 2, 0, 
                    1, 3, 0, 3}, {10, 3, 8}, {16, 8, 6, 5, 8}, {10, 4, 9}, {
                    16, 9, 6, 7, 9}, {13, 8, 9, 10}, {41, 263, 3, 0, 2, 2, 0, 
                    6, 3, 0, 12}, {40, 60, 3, 0, 12, 3, 0, 13}, {10, 5, 12}, {
                    16, 12, 4, 13, 12}, {10, 7, 13}, {16, 13, 4, 5, 13}, {10, 
                    2, 14}, {16, 14, 4, 7, 14}, {13, 12, 13, 14, 12}, {16, 11,
                     0, 3, 12, 13}, {40, 56, 3, 0, 2, 3, 0, 14}, {16, 15, 14, 
                    10, 12}, {16, 11, 3, 10, 14}, {13, 13, 12, 14, 13}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$430, Compile`$433, Compile`$436, 
                    Compile`$439, Compile`$454, Compile`$441, Compile`$434, 
                    Compile`$456, Compile`$457, Compile`$458}, 
                    Compile`$430 = Log[$CellContext`n]; 
                    Compile`$433 = 1 + Compile`$430; 
                    Compile`$436 = $CellContext`n^(-3); 
                    Compile`$439 = Compile`$433^(-4); 
                    Compile`$454 = $CellContext`n^(-2); 
                    Compile`$441 = Compile`$433^(-3); 
                    Compile`$434 = Compile`$433^3; 
                    Compile`$456 = (-6) Compile`$454 Compile`$439; 
                    Compile`$457 = (-2) Compile`$454 Compile`$441; 
                    Compile`$458 = Compile`$456 + Compile`$457; 
                    Rational[1, 2] $CellContext`n 
                    Compile`$434 (24 Compile`$436 Compile`$433^(-5) + 
                    18 Compile`$436 Compile`$439 + 
                    4 Compile`$436 Compile`$441) + 
                    Rational[3, 2] Compile`$433^2 Compile`$458 + 
                    Rational[1, 2] Compile`$434 Compile`$458]], 
                    Evaluate][$CellContext`n], {$CellContext`n, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`n] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/Log[2 $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^(-3)] == 0, $CellContext`n, Reals], 
                    1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`n, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
n] == Sqrt[1 + D[
                    Log[
                    2 $CellContext`n^(-1) (1 + 
                    Log[$CellContext`n])^(-3)], $CellContext`n]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`n, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]}], $CellContext`n], \
{$CellContext`n, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.7293981845319235]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n], 
                    1}], $CellContext`n], {$CellContext`n, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.7293981845319235], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n], 
                    1}]], $CellContext`n], {$CellContext`n, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`n) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) $CellContext`n + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`n)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]), {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`n) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) $CellContext`n + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`n) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`n)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]), {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`n)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n], 1}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`n)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n], 1}, {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n], 1}/(($CellContext`n + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`n, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`n + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n], 1}/(($CellContext`n + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`n, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`n + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
n - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`n, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
n - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`n, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] ($CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] ($CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]^2), {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]}, 
                    ParametricPlot[{$CellContext`n, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] ($CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate][$CellContext`n] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n] ($CellContext`n - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], 
                    Evaluate][$CellContext`n]^2), {$CellContext`n, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`n}, 
                    Rational[1, 2] $CellContext`n (1 + 
                    Log[$CellContext`n])^3 ((-6) $CellContext`n^(-2) (1 + 
                    Log[$CellContext`n])^(-4) - 
                    2 $CellContext`n^(-2) (1 + Log[$CellContext`n])^(-3))][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`n}, 
                    Rational[1, 2] $CellContext`n (1 + 
                    Log[$CellContext`n])^3 ((-6) $CellContext`n^(-2) (1 + 
                    Log[$CellContext`n])^(-4) - 
                    2 $CellContext`n^(-2) (1 + Log[$CellContext`n])^(-3))][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 0}}, {1, {2, 0, 1}}, {3, {2, 0, 2}}}, {0,
                     3, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {40, 34, 3, 0, 
                    0, 3, 0, 2}, {10, 1, 3}, {13, 3, 2, 3}, {41, 263, 3, 0, 3,
                     2, 0, 2, 3, 0, 2}, {40, 60, 3, 0, 2, 3, 0, 3}, {10, 0, 
                    2}, {16, 2, 1, 3, 2}, {40, 34, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`n}, 
                    Log[
                    2 $CellContext`n^(-1) (1 + Log[$CellContext`n])^(-3)]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    7}}, {{-6, {2, 0, 2}}, {4, {2, 0, 3}}, {-2, {2, 0, 4}}, {
                    1, {2, 0, 0}}, {3, {2, 0, 1}}, {0.5, {3, 0, 5}}}, {0, 5, 
                    9, 0, 0}, {{40, 34, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {13, 2,
                     1, 2}, {40, 56, 3, 0, 0, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 
                    0, 4}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0, 3}, {41, 263, 3, 
                    0, 2, 2, 0, 3, 3, 0, 6}, {40, 60, 3, 0, 6, 3, 0, 7}, {10, 
                    2, 6}, {16, 6, 4, 7, 6}, {41, 263, 3, 0, 2, 2, 0, 1, 3, 0,
                     7}, {40, 60, 3, 0, 7, 3, 0, 8}, {10, 4, 7}, {16, 7, 4, 8,
                     7}, {13, 6, 7, 6}, {16, 5, 0, 3, 6, 7}, {1}}, 
                    Function[{$CellContext`n}, 
                    
                    Block[{Compile`$428, Compile`$429, Compile`$432}, 
                    Compile`$428 = Log[$CellContext`n]; 
                    Compile`$429 = 1 + Compile`$428; 
                    Compile`$432 = $CellContext`n^(-2); 
                    Rational[1, 2] $CellContext`n 
                    Compile`$429^3 ((-6) Compile`$432 Compile`$429^(-4) - 2 
                    Compile`$432 Compile`$429^(-3))]], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{"log", "(", 
                    FractionBox["2", 
                    RowBox[{"n", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "n", ")"}], "+", "1"}], ")"}], 
                    "3"]}]], ")"}], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style["\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.6335107626650864, 
                    Subscript[
                    Style["n", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.9020565242316507, 
                    Subscript[
                    Style["n", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.9406112814107258, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.9406112814107258, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.9406112814107258, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.9406112814107258, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.9406112814107258, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtIGYkJAQ29iYNKAk5XtvsZNauHawnb3w58FnN0mzdpViOkBT+uFUX5rHd889d71nRzJK+\
71eT1+35qPkJL2Fp6fW7MhpLgtBPpzmimrNpEiv4bO71sTU7FIOZ5R4301r9qSagvHnt/g+\
8KTgYOg3wzgzjOrxvoJ8whJde4aKHdufjLlMgLOf9Pmbza3XG1seBUMZgjFUCf2yLWI+\
UaBp2kOgG9ZscxDf/\
fFJefxccB7THwUVCdWPrHekgFgYKYBjOsG3Xmmi7mNeBgQBRS6dJSfO7bYXaKOYyEZ0muMbF3K10RY\
XVKY9NQ9Kalbpx0d/Gx/I2IXkPS5nd3b8hYVxtdg7L6p/Tt0Az+/\
awit5spQ3TO89R9rAsGOqF9l80bpKnpCqZV3wM6ouabasNcaLJ0z9j3TItFkMY7NtGHR6ZCu8XHmL8\
K/awsscW34m7YfWfPGOEnDZZKjk9kmSgs+\
iaKY88AJtn67OrcNj3Kv4jtEZUsEKJ7Jxlt3iuuNxBV7vCDHWbrwG6Yh6AkQ0p9ZFHLe7LGNmZwIKE\
gs8u65f9thI1qEE3Nm+\
9kwQZseXJ2TV2oTmIJ2rO5hk8vWPilvJ5VyTIe8HwtCMqpWiv4P1UZZcQUYyMJIYL2jqNZjDKqkhqG\
DZD0qQOAfBEJL9sh/3zT+crwRSta9QXcqzOHClOQ1Pol8W+\
JCKzEya23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2xP+\
4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3lpO3Fg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1200", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa21161hgifdd8d47c4f830000673300b23df924g1822558548030476863", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1300", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa21171hgifdd8d47c4f8300002agd53a39i26938a822558548030476863", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "log", "template" -> 
        "Assuming \"log\" is the natural logarithm${separator}Use ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FunClash\", \"log\"} -> {\"Log\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log10\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "2", "datatypes" -> "", "timedout" -> 
     "Plotter,Expression,Simplification,Arithmetic,Derivative,Geometry,\
Integral,Series,FunctionProperties,Reduce,BranchPoint,ComplexMap,\
RiemannSurface,ODE,Sequence,DomainAndRange,GlobalExtrema,\
InterestingDefiniteIntegrals,InterestingMultiDimensionalDefiniteIntegrals,\
MathematicalFunctionData", "timedoutpods" -> "", "timing" -> "3.496", 
     "parsetiming" -> "0.354", "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa3433240ege1f0bba8457000069g5974f22hida8e3629183885576317489", "id" -> 
     "MSP3434240ege1f0bba845700002588587bc5g7e2e7", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "3", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa3435240ege1f0bba845700004gc6i9c2c8650aba3629183885576317489", "version" -> 
     "2.6", "inputstring" -> "log(1/(n(1+log(n))^3/2))"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "11", "datatypes" -> "", "timedout" -> 
     "Reduce,BranchPoint,ComplexMap,RiemannSurface,ODE,Sequence,\
DomainAndRange,GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "5.375", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "12", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "12", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "log(1/(n(1+log(n))^3/2))"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 0, 44.694857`9.402832421250983}, "Line" -> 
    542, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, Typeset`failedpods$$ = {12, 13, 14, 15, 
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "log(1/(n(1+log(n))^3/2))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{505., {919.3544921875, 924.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa3433240ege1f0bba8457000069g5974f22hida8e3629183885576317489", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.878488844835455*^9},ExpressionUUID->"fba1dc12-ed3c-4e3d-a2b1-\
c7b9ec96c105"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.18", "Section",
 CellChangeTimes->{{3.8784856331502724`*^9, 
  3.8784856336502714`*^9}},ExpressionUUID->"9c688965-b7d4-4f47-a295-\
e1510b03867e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"i", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox["2", "i"], 
   SuperscriptBox["i", "2"]]}]], "Input",
 CellChangeTimes->{{3.8784864625104713`*^9, 3.878486468975031*^9}},
 CellLabel->
  "In[532]:=",ExpressionUUID->"ba5be6cc-b961-4667-8325-56129ca02266"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 532, 72, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8784864694437222`*^9},
 CellLabel->
  "During evaluation of \
In[532]:=",ExpressionUUID->"5ebe75ca-7473-42c1-8660-eb26907a2682"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"i", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox["2", "i"], 
   SuperscriptBox["i", "2"]]}]], "Output",
 CellChangeTimes->{3.878486469631222*^9},
 CellLabel->
  "Out[532]=",ExpressionUUID->"fe81a1a5-a24e-4b39-a66d-95bef1e54ed0"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{{3.8784857188792734`*^9, 
  3.8784857222982635`*^9}},ExpressionUUID->"de5f5cec-cb05-4059-90c1-\
6db34e55ef5f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.20", "Section",
 CellChangeTimes->{{3.8784856364158025`*^9, 
  3.8784856368689203`*^9}},ExpressionUUID->"6602dcc8-0775-41e9-982b-\
007d7a3aa594"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  FractionBox[
   RowBox[{"n", "!"}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"2", "n"}], ")"}], "!"}]]}]], "Input",
 CellChangeTimes->{{3.8784864902422223`*^9, 3.8784865048525076`*^9}},
 CellLabel->
  "In[533]:=",ExpressionUUID->"1904d495-b7a8-4190-93ee-c5f270e28128"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "2"], " ", 
  RowBox[{"(", 
   RowBox[{"2", "+", 
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"1", "/", "4"}]], " ", 
     SqrtBox["\[Pi]"], " ", 
     RowBox[{"Erf", "[", 
      FractionBox["1", "2"], "]"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.8784865051976647`*^9},
 CellLabel->
  "Out[533]=",ExpressionUUID->"babc2798-1f76-45a0-beb3-6ac7c9da95d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"n", "=", "0"}], "\[Infinity]"], 
   FractionBox[
    RowBox[{"n", "!"}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"2", "n"}], ")"}], "!"}]]}], "//", "N"}]], "Input",
 CellChangeTimes->{{3.8784864902422223`*^9, 3.878486508041498*^9}},
 CellLabel->
  "In[534]:=",ExpressionUUID->"d6f31282-9520-4ae1-9b05-8dbf5f35997a"],

Cell[BoxData["1.5922965364693265`"], "Output",
 CellChangeTimes->{3.878486508369523*^9},
 CellLabel->
  "Out[534]=",ExpressionUUID->"341b7f5e-f62e-480c-9250-0b694f3a0478"]
}, Open  ]],

Cell["C", "Text",
 CellChangeTimes->{
  3.878485725392084*^9},ExpressionUUID->"c4df7b86-5dba-4227-8690-\
7dedd4cca599"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.22", "Section",
 CellChangeTimes->{{3.8784856385095644`*^9, 
  3.8784856391790743`*^9}},ExpressionUUID->"2b8f76b8-139a-4358-85e6-\
d3c5d748d463"],

Cell["C", "Text",
 CellChangeTimes->{
  3.8784857307165327`*^9},ExpressionUUID->"a417f41c-5f5d-4803-832c-\
ebf928661b0a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox["10", "n"], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"n", "!"}], ")"}], "2"]]}]], "Input",
 CellChangeTimes->{{3.8784865265191298`*^9, 3.878486537415989*^9}},
 CellLabel->
  "In[535]:=",ExpressionUUID->"49802c74-3c78-4711-b34a-5e2274cba27c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1"}], "+", 
  RowBox[{"BesselI", "[", 
   RowBox[{"0", ",", 
    RowBox[{"2", " ", 
     SqrtBox["10"]}]}], "]"}]}]], "Output",
 CellChangeTimes->{3.8784865379003453`*^9},
 CellLabel->
  "Out[535]=",ExpressionUUID->"992db0fc-e95c-4c6f-94b2-2be1032b2c77"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
   FractionBox[
    SuperscriptBox["10", "n"], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"n", "!"}], ")"}], "2"]]}], "//", "ReIm"}]], "Input",
 CellChangeTimes->{{3.8784865265191298`*^9, 3.878486543767602*^9}},
 CellLabel->
  "In[536]:=",ExpressionUUID->"6a0eb788-aa59-40de-a43b-4bf47035329b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "1"}], "+", 
    RowBox[{"BesselI", "[", 
     RowBox[{"0", ",", 
      RowBox[{"2", " ", 
       SqrtBox["10"]}]}], "]"}]}], ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{3.878486544142593*^9},
 CellLabel->
  "Out[536]=",ExpressionUUID->"d2c5a89f-6bcb-4e8d-b6e8-3bb4f8e73bc3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.23", "Section",
 CellChangeTimes->{{3.87848564164791*^9, 
  3.878485642335391*^9}},ExpressionUUID->"865bc1c2-5447-4111-b97c-\
0a876ca9a272"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   RowBox[{"n", "!"}], 
   SuperscriptBox["100", "n"]]}]], "Input",
 CellChangeTimes->{{3.8784865587812986`*^9, 3.8784865677774177`*^9}},
 CellLabel->
  "In[537]:=",ExpressionUUID->"dc3b9345-4fe0-4c72-9091-b7f2ef8159b6"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 537, 73, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.878486568168049*^9},
 CellLabel->
  "During evaluation of \
In[537]:=",ExpressionUUID->"aa37057c-5c25-4aaa-9a06-aa21c200f680"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox["100", 
    RowBox[{"-", "n"}]], " ", 
   RowBox[{"n", "!"}]}]}]], "Output",
 CellChangeTimes->{3.8784865684023952`*^9},
 CellLabel->
  "Out[537]=",ExpressionUUID->"b915d7db-065b-4d75-8cb0-ee81687b8528"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.8784857341317058`*^9},ExpressionUUID->"b2610d40-4c29-49bd-8a4d-\
f40044cff1b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.24", "Section",
 CellChangeTimes->{{3.8784856447260027`*^9, 
  3.8784856453922305`*^9}},ExpressionUUID->"3183daab-b73a-4695-9c97-\
77b3b5e7ed9f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox["3", 
    RowBox[{"2", "n"}]], 
   SuperscriptBox["2", 
    RowBox[{"3", "n"}]]]}]], "Input",
 CellChangeTimes->{{3.878486579709776*^9, 3.8784865904391212`*^9}},
 CellLabel->
  "In[538]:=",ExpressionUUID->"baa01835-cc4c-4463-88f9-4c078b3940f8"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 538, 74, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.878486590923489*^9},
 CellLabel->
  "During evaluation of \
In[538]:=",ExpressionUUID->"78114db7-1448-4f3f-a6e3-29fce49d7a76"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox["2", 
    RowBox[{
     RowBox[{"-", "3"}], " ", "n"}]], " ", 
   SuperscriptBox["3", 
    RowBox[{"2", " ", "n"}]]}]}]], "Output",
 CellChangeTimes->{3.8784865912047396`*^9},
 CellLabel->
  "Out[538]=",ExpressionUUID->"fde89170-5447-4376-b2ef-86392cecc8b8"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.878485738727274*^9},ExpressionUUID->"2a196fc2-e474-4616-905a-\
0293d27abac0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.26", "Section",
 CellChangeTimes->{{3.8784856497828293`*^9, 
  3.878485650392227*^9}},ExpressionUUID->"187fe786-7c7a-47bd-9e9b-\
0bbec2e2bdff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  FractionBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"n", "!"}], ")"}], "3"], 
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"3", "n"}]]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"3", "n"}], ")"}], "!"}]]}]], "Input",
 CellChangeTimes->{{3.8784891068963118`*^9, 3.8784891273009863`*^9}},
 CellLabel->
  "In[546]:=",ExpressionUUID->"cce928f6-b490-4697-8e51-2bcf3d1a045d"],

Cell[BoxData[
 RowBox[{"HypergeometricPFQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1", "3"], ",", 
     FractionBox["2", "3"]}], "}"}], ",", 
   FractionBox[
    SuperscriptBox["\[ExponentialE]", "3"], "27"]}], "]"}]], "Output",
 CellChangeTimes->{3.8784891276290703`*^9},
 CellLabel->
  "Out[546]=",ExpressionUUID->"38e34a7e-dbd6-46dd-a488-c88c72c1ceca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"ReIm", "[", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"n", "=", "0"}], "\[Infinity]"], 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"n", "!"}], ")"}], "3"], 
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"3", "n"}]]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"3", "n"}], ")"}], "!"}]]}], "]"}], ",", "100"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8784891300886054`*^9, 3.878489147775767*^9}},
 CellLabel->
  "In[549]:=",ExpressionUUID->"5cd943d9-994c-47ac-baba-900b2a173ab6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "44.589007396871594346009846142273747880163272373145508396295316404578762240\
9793717392002342913194728557600309993094971`100.", ",", "0"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.878489133246403*^9, 3.87848914816634*^9}},
 CellLabel->
  "Out[549]=",ExpressionUUID->"2161de9b-8dfe-4f9a-ab13-8a50e063ce58"]
}, Open  ]],

Cell["C", "Text",
 CellChangeTimes->{
  3.8784857720350485`*^9},ExpressionUUID->"e7381d9b-9ab2-4d3a-8913-\
162ebbba4dab"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.29", "Section",
 CellChangeTimes->{{3.8784856518248014`*^9, 
  3.8784856539497147`*^9}},ExpressionUUID->"cce3d561-4ea3-4ddd-9f7f-\
bc8f9d3e1db5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  FractionBox[
   SqrtBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{"2", "n"}], ")"}], "!"}]], 
   RowBox[{
    RowBox[{"(", "n", ")"}], "!"}]]}]], "Input",
 CellChangeTimes->{{3.878489258503603*^9, 3.8784892650987635`*^9}},
 CellLabel->
  "In[552]:=",ExpressionUUID->"c20aa311-5bbb-4062-958f-d437fd98449c"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 552, 77, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8784892665986743`*^9},
 CellLabel->
  "During evaluation of \
In[552]:=",ExpressionUUID->"7508097b-ad04-4b50-99f4-e17665e2d81e"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  FractionBox[
   SqrtBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{"2", " ", "n"}], ")"}], "!"}]], 
   RowBox[{"n", "!"}]]}]], "Output",
 CellChangeTimes->{3.8784892668486753`*^9},
 CellLabel->
  "Out[552]=",ExpressionUUID->"27c04941-6ebd-450d-bbec-faf97f4d817a"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.878485776716708*^9},ExpressionUUID->"c80bde2d-d631-40c7-acf9-\
e146824eee16"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.31", "Section",
 CellChangeTimes->{{3.8784856567935667`*^9, 
  3.8784856574654293`*^9}},ExpressionUUID->"98ed0165-7fa4-4a57-b45a-\
663530edd783"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "9"}], "\[Infinity]"], 
  RowBox[{"(", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", "n"}], "+", "1"}], ")"}], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"3", "n"}], "-", "5"}], ")"}]}], 
    SqrtBox[
     RowBox[{
      SuperscriptBox["n", "2"], "-", "73"}]]], ")"}]}]], "Input",
 CellChangeTimes->{{3.8784892817484703`*^9, 3.878489311667373*^9}},
 CellLabel->
  "In[554]:=",ExpressionUUID->"f0fe8836-e774-43f6-b944-21abbf7398fd"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 554, 79, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.878489297178462*^9, 3.8784893122142763`*^9}},
 CellLabel->
  "During evaluation of \
In[554]:=",ExpressionUUID->"1ce25550-0396-4d23-adf2-9d46d61341f7"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "9"}], "\[Infinity]"], 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "n"}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "5"}], "+", 
      RowBox[{"3", " ", "n"}]}], ")"}]}], 
   SqrtBox[
    RowBox[{
     RowBox[{"-", "73"}], "+", 
     SuperscriptBox["n", "2"]}]]]}]], "Output",
 CellChangeTimes->{{3.8784892974440775`*^9, 3.87848931247561*^9}},
 CellLabel->
  "Out[554]=",ExpressionUUID->"38c0308d-5c4d-4263-9665-f76f318dcaff"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.878485780940852*^9},ExpressionUUID->"85500381-638b-418f-9d0a-\
7a637bea8f9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.32", "Section",
 CellChangeTimes->{{3.878485659852543*^9, 
  3.8784856608853836`*^9}},ExpressionUUID->"59d4eb5e-2d87-469f-b862-\
34cc1ecfedde"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  FractionBox[
   RowBox[{"(", 
    RowBox[{"n", 
     RowBox[{"(", 
      RowBox[{"n", "+", "1"}], ")"}]}], ")"}], 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"n", "+", "2"}], ")"}], "2"], 
    RowBox[{"(", 
     RowBox[{"n", "+", "3"}], ")"}]}]]}]], "Input",
 CellChangeTimes->{{3.878489333131319*^9, 3.878489348889527*^9}},
 CellLabel->
  "In[555]:=",ExpressionUUID->"7b6b3d39-d9f3-4b3c-96a6-33fe8607142e"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 555, 80, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8784893492801347`*^9},
 CellLabel->
  "During evaluation of \
In[555]:=",ExpressionUUID->"5ad6bb78-4f97-42fb-a07e-c8a0f8f4ee86"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  FractionBox[
   RowBox[{"n", " ", 
    RowBox[{"(", 
     RowBox[{"1", "+", "n"}], ")"}]}], 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"2", "+", "n"}], ")"}], "2"], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", "n"}], ")"}]}]]}]], "Output",
 CellChangeTimes->{3.8784893495457525`*^9},
 CellLabel->
  "Out[555]=",ExpressionUUID->"1d58d8cd-dcff-466a-b15b-8bfc97c7a3d1"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.878485783784625*^9},ExpressionUUID->"2ac96d25-9d1e-47ec-ad45-\
d8d6764b4f9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.35", "Section",
 CellChangeTimes->{{3.878485663401781*^9, 
  3.878485664214363*^9}},ExpressionUUID->"75d4b590-def6-4799-a7cf-\
7625f3d7a64c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"n", "-", 
      RowBox[{"Log", "[", "n", "]"}]}], ")"}], "3"], 
   RowBox[{
    RowBox[{"5", 
     SuperscriptBox["n", "4"]}], "-", 
    RowBox[{"3", 
     SuperscriptBox["n", "2"]}], "+", "1"}]]}]], "Input",
 CellChangeTimes->{{3.878489362988879*^9, 3.8784893929950285`*^9}},
 CellLabel->
  "In[556]:=",ExpressionUUID->"cddd13b1-25d1-48da-80a5-0d348efca795"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"n", "-", 
      RowBox[{"Log", "[", "n", "]"}]}], ")"}], "3"], 
   RowBox[{"1", "-", 
    RowBox[{"3", " ", 
     SuperscriptBox["n", "2"]}], "+", 
    RowBox[{"5", " ", 
     SuperscriptBox["n", "4"]}]}]]}]], "Output",
 CellChangeTimes->{3.878489393416931*^9},
 CellLabel->
  "Out[556]=",ExpressionUUID->"2d1b36ae-1552-4c92-b4c0-5a3366e07991"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"n", "=", "3"}], "\[Infinity]"], 
   FractionBox[
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"n", "-", 
       RowBox[{"Log", "[", "n", "]"}]}], ")"}], "2"], 
    RowBox[{
     RowBox[{"5", 
      SuperscriptBox["n", "4"]}], "-", 
     RowBox[{"3", 
      SuperscriptBox["n", "2"]}], "+", "1"}]]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784893952137623`*^9, 3.8784894286524477`*^9}},
 CellLabel->
  "In[559]:=",ExpressionUUID->"67bde7d2-ee0c-46a8-a205-fd989a12ed06"],

Cell[BoxData["0.04243338485250195`"], "Output",
 CellChangeTimes->{{3.878489397543915*^9, 3.8784894364686875`*^9}},
 CellLabel->
  "Out[559]=",ExpressionUUID->"30d0e997-d253-44cb-9f91-a446a254993b"]
}, Open  ]],

Cell["C", "Text",
 CellChangeTimes->{
  3.878485790663307*^9},ExpressionUUID->"404ce7d6-2412-4a2e-af3a-\
c6c72349507c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["6.36", "Section",
 CellChangeTimes->{{3.878485667882995*^9, 
  3.878485668726783*^9}},ExpressionUUID->"8b65f246-411e-4899-a526-\
636f5fd7c75f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   UnderoverscriptBox["\[Sum]", 
    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
   FractionBox[
    SqrtBox[
     RowBox[{
      SuperscriptBox["n", "3"], "+", 
      RowBox[{"5", "n"}], "-", "1"}]], 
    RowBox[{
     SuperscriptBox["n", "2"], "-", 
     RowBox[{"Sin", "[", 
      SuperscriptBox["n", "3"], "]"}]}]]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784893952137623`*^9, 3.8784894286524477`*^9}, {
  3.878489463148014*^9, 3.878489498980291*^9}, {3.8784895376364584`*^9, 
  3.8784895386989784`*^9}},
 CellLabel->
  "In[561]:=",ExpressionUUID->"b7a6eed2-b291-437a-a397-ad736ec47621"],

Cell[BoxData[
 TemplateBox[{
  "NIntegrate", "slwcon", 
   "\"Numerical integration converging too slowly; suspect one of the \
following: singularity, value of the integration is 0, highly oscillatory \
integrand, or WorkingPrecision too small.\"", 2, 561, 90, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8784895004646626`*^9, 3.8784895403552136`*^9},
 CellLabel->
  "During evaluation of \
In[561]:=",ExpressionUUID->"67d6f44d-e3bb-45be-92ec-931aa90f857c"],

Cell[BoxData[
 TemplateBox[{
  "NIntegrate", "ncvb", 
   "\"NIntegrate failed to converge to prescribed accuracy after \
\\!\\(\\*RowBox[{\\\"9\\\"}]\\) recursive bisections in \
\\!\\(\\*RowBox[{\\\"n\\\"}]\\) near \\!\\(\\*RowBox[{\\\"{\\\", \\\"n\\\", \
\\\"}\\\"}]\\) = \\!\\(\\*RowBox[{\\\"{\\\", \\\"8.169069784662288`*^224\\\", \
\\\"}\\\"}]\\). NIntegrate obtained \
\\!\\(\\*RowBox[{\\\"3.843941796202754`15.954589770191005*^13977\\\"}]\\) and \
\\!\\(\\*RowBox[{\\\"3.843941796202754`15.954589770191005*^13977\\\"}]\\) for \
the integral and error estimates.\"", 2, 561, 91, 16944803280185088864, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8784895004646626`*^9, 3.8784895406520863`*^9},
 CellLabel->
  "During evaluation of \
In[561]:=",ExpressionUUID->"8dce2b58-ea26-4aad-911f-ced5aede522a"],

Cell[BoxData["3.8439417962027543450710890833`15.954589770191005*^13977"], \
"Output",
 CellChangeTimes->{3.8784895011521587`*^9, 3.8784895410427513`*^9},
 CellLabel->
  "Out[561]=",ExpressionUUID->"b1f87ca4-0b87-4df3-9c25-095568c262f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", 
  FractionBox[
   SqrtBox[
    RowBox[{
     SuperscriptBox["n", "3"], "+", 
     RowBox[{"5", "n"}], "-", "1"}]], 
   RowBox[{
    SuperscriptBox["n", "2"], "-", 
    RowBox[{"Sin", "[", 
     SuperscriptBox["n", "3"], "]"}]}]], "]"}]], "Input",
 CellChangeTimes->{{3.8784902171990952`*^9, 3.878490222667924*^9}},
 CellLabel->
  "In[562]:=",ExpressionUUID->"df4e034b-fc36-4b1c-80e6-7e336ec6d2bc"],

Cell[BoxData[
 RowBox[{"Log", "[", 
  FractionBox[
   SqrtBox[
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"5", " ", "n"}], "+", 
     SuperscriptBox["n", "3"]}]], 
   RowBox[{
    SuperscriptBox["n", "2"], "-", 
    RowBox[{"Sin", "[", 
     SuperscriptBox["n", "3"], "]"}]}]], "]"}]], "Output",
 CellChangeTimes->{3.8784902233520474`*^9},
 CellLabel->
  "Out[562]=",ExpressionUUID->"675111a8-a07f-4e87-bd39-c09cd0c7a834"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  RowBox[{"Log", "[", 
   FractionBox[
    SqrtBox[
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"5", " ", "n"}], "+", 
      SuperscriptBox["n", "3"]}]], 
    RowBox[{
     SuperscriptBox["n", "2"], "-", 
     RowBox[{"Sin", "[", 
      SuperscriptBox["n", "3"], "]"}]}]], "]"}]}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[563]:=",ExpressionUUID->"96c87b31-2973-49c8-8f2b-f6978f84032f"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 563, 92, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.878490226180138*^9},
 CellLabel->
  "During evaluation of \
In[563]:=",ExpressionUUID->"cb79db47-048b-46b1-85d2-1a4fe4b509e0"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  RowBox[{"Log", "[", 
   FractionBox[
    SqrtBox[
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"5", " ", "n"}], "+", 
      SuperscriptBox["n", "3"]}]], 
    RowBox[{
     SuperscriptBox["n", "2"], "-", 
     RowBox[{"Sin", "[", 
      SuperscriptBox["n", "3"], "]"}]}]], "]"}]}]], "Output",
 CellChangeTimes->{3.8784902264770184`*^9},
 CellLabel->
  "Out[563]=",ExpressionUUID->"2af02f73-0ab3-4043-996c-bb9698f94978"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.8784857951774635`*^9},ExpressionUUID->"c5d7dad8-7db8-4a5a-ad86-\
2231404e9351"]
}, Open  ]]
},
WindowSize->{576., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.2 for Microsoft Windows (64-bit) (November 18, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c3b7ffc8-38dc-488d-a920-fca384dc609f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 225, 5, 35, "Text",ExpressionUUID->"c18538c4-1de5-411e-9b09-255db53b3132"],
Cell[CellGroupData[{
Cell[808, 29, 171, 3, 67, "Section",ExpressionUUID->"2400e692-a82a-4e3f-8afd-2037bf41bd28"],
Cell[CellGroupData[{
Cell[1004, 36, 268, 4, 41, "WolframAlphaLong",ExpressionUUID->"d7626e00-eb9a-4968-b207-d6c108c34aaf"],
Cell[1275, 42, 13242, 267, 390, "Print",ExpressionUUID->"38d24573-e407-4eaa-b566-484e2c3d62ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14554, 314, 321, 8, 48, "Input",ExpressionUUID->"f8dd5d2e-3783-48e4-b28f-4fdb5807b380"],
Cell[14878, 324, 153, 3, 32, "Output",ExpressionUUID->"b9d1b6b9-5094-4daa-8e4b-52ca9f3368c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15068, 332, 353, 9, 48, "Input",ExpressionUUID->"0a3074b0-0d58-46db-9323-83c9bf6a6308"],
Cell[15424, 343, 526, 12, 41, "Message",ExpressionUUID->"ea6d0713-10e7-4bd8-b906-01a8c25e8db8"],
Cell[15953, 357, 328, 9, 51, "Output",ExpressionUUID->"fab337c2-9d38-4010-bf21-c46df3c22146"]
}, Open  ]],
Cell[16296, 369, 143, 3, 35, "Text",ExpressionUUID->"938982a4-8961-4c82-9032-56e569d1f96a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16476, 377, 147, 3, 67, "Section",ExpressionUUID->"e2a6903c-c262-4d8f-b312-a933550c84fe"],
Cell[CellGroupData[{
Cell[16648, 384, 346, 9, 57, "Input",ExpressionUUID->"77878424-9adb-462c-ad89-34fb05b068ed"],
Cell[16997, 395, 313, 8, 28, "Message",ExpressionUUID->"b84e11e8-b218-4657-ace2-6710dc1a8b81"],
Cell[17313, 405, 317, 9, 56, "Output",ExpressionUUID->"8fd618e9-60ef-4273-8b53-13d474ec7c18"]
}, Open  ]],
Cell[17645, 417, 121, 3, 35, "Text",ExpressionUUID->"60d207d8-342e-4d1f-9670-19e755e85f00"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17803, 425, 150, 3, 67, "Section",ExpressionUUID->"8ab916b7-75a7-4e62-83de-a6ab75d184a6"],
Cell[CellGroupData[{
Cell[17978, 432, 340, 9, 52, "Input",ExpressionUUID->"ecd42be1-dd4b-429c-9ae3-adc9399fd9ac"],
Cell[18321, 443, 175, 4, 48, "Output",ExpressionUUID->"3bf290ee-b67a-42a5-b65c-02b66e5bfa30"]
}, Open  ]],
Cell[18511, 450, 119, 3, 35, "Text",ExpressionUUID->"ca11b585-8a1d-4967-b2a0-e0d4ca40c385"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18667, 458, 149, 3, 67, "Section",ExpressionUUID->"c0f9912a-9a3a-46c0-adf1-631bbcc9eef8"],
Cell[CellGroupData[{
Cell[18841, 465, 441, 12, 57, "Input",ExpressionUUID->"2545353a-7bb9-4c5d-9606-67d911f86a85"],
Cell[19285, 479, 862, 24, 85, "Output",ExpressionUUID->"be6ba0bc-ff58-4058-affd-35650bd20e78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20184, 508, 473, 13, 57, "Input",ExpressionUUID->"a75f34c9-788f-4cb9-8c11-1adb936574b0"],
Cell[20660, 523, 253, 5, 32, "Output",ExpressionUUID->"3d2593d3-9776-432b-867d-763ed747d2b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20950, 533, 628, 17, 41, "WolframAlphaLong",ExpressionUUID->"24ef0f9f-8ffc-4837-8a8a-a88b93a9f5e5"],
Cell[21581, 552, 23529, 454, 524, "Print",ExpressionUUID->"9c3c4ae1-4e2b-44c3-9628-a16ec2c52e1d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45147, 1011, 619, 16, 48, "Input",ExpressionUUID->"fcaf1ec8-63be-4b2f-9bba-8842bc907f98"],
Cell[45769, 1029, 200272, 3374, 468, "Output",ExpressionUUID->"a966a4ff-c2e7-42d6-bd3f-8305d9b7ac90"]
}, Open  ]],
Cell[246056, 4406, 121, 3, 35, "Text",ExpressionUUID->"16ddf21d-1e0a-4883-9a77-b079043bd906"]
}, Open  ]],
Cell[CellGroupData[{
Cell[246214, 4414, 149, 3, 67, "Section",ExpressionUUID->"cb19dca0-1aad-4fdc-acde-81c436c78c30"],
Cell[CellGroupData[{
Cell[246388, 4421, 449, 13, 53, "Input",ExpressionUUID->"3555cb3d-385c-423c-acd0-c25d73071627"],
Cell[246840, 4436, 429, 13, 57, "Output",ExpressionUUID->"0e7ab606-2624-4d5e-a66a-cb9aaf719fd2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[247306, 4454, 226, 3, 41, "WolframAlphaLong",ExpressionUUID->"178f267e-09a2-4a3a-8564-45f74f865068"],
Cell[247535, 4459, 2706, 52, 101, "Print",ExpressionUUID->"b95d2832-e848-4f10-87f7-ece299d9a1a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250278, 4516, 491, 14, 49, "Input",ExpressionUUID->"3c8f1d6b-7531-4360-8147-35a661090430"],
Cell[250772, 4532, 155, 3, 32, "Output",ExpressionUUID->"c180d1cb-313b-4023-8e27-19bb191b5c2e"]
}, Open  ]],
Cell[250942, 4538, 198, 3, 35, "Text",ExpressionUUID->"c4599719-4526-45fe-9a3c-3dc7ef003a3c"],
Cell[251143, 4543, 121, 3, 35, "Text",ExpressionUUID->"ac1ccf42-4871-41da-9be6-edfbbc2ccc18"],
Cell[CellGroupData[{
Cell[251289, 4550, 387, 11, 49, "Input",ExpressionUUID->"55887c42-c7be-4530-a86e-fcd01b21cefa"],
Cell[251679, 4563, 367, 11, 52, "Output",ExpressionUUID->"051186ca-242a-47e1-916c-3fab58969aea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[252083, 4579, 442, 14, 53, "Input",ExpressionUUID->"3f08f838-9db6-4814-b12a-9d6ff10d72d4"],
Cell[252528, 4595, 311, 8, 28, "Message",ExpressionUUID->"e34a53ed-8f91-4921-8679-519508fb664d"],
Cell[252842, 4605, 466, 14, 57, "Output",ExpressionUUID->"d5dfb9a6-290f-41af-8c7f-f15a64dc407e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[253345, 4624, 253, 4, 41, "WolframAlphaLong",ExpressionUUID->"0e840613-2cae-44a5-a752-db57b2277847"],
Cell[253601, 4630, 477745, 8701, 2298, "Print",ExpressionUUID->"79e9a798-863d-4b54-92d3-03533c32a344"]
}, Open  ]],
Cell[CellGroupData[{
Cell[731383, 13336, 309, 5, 41, "WolframAlphaLong",ExpressionUUID->"a868204b-a701-4e32-b50e-7b7fe2b08872"],
Cell[731695, 13343, 72782, 1441, 981, "Print",ExpressionUUID->"1c68c842-444a-4e82-9e7a-6ccc63c492fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[804514, 14789, 203, 3, 41, "WolframAlphaLong",ExpressionUUID->"fcd19a44-c73d-4a2a-993f-a423c5accfce"],
Cell[804720, 14794, 379, 9, 28, "Message",ExpressionUUID->"667f2865-a9e8-4747-b44c-c338c49a6e60"],
Cell[805102, 14805, 470993, 8416, 1854, "Print",ExpressionUUID->"fba1dc12-ed3c-4e3d-a2b1-c7b9ec96c105"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1276144, 23227, 153, 3, 67, "Section",ExpressionUUID->"9c688965-b7d4-4f47-a295-e1510b03867e"],
Cell[CellGroupData[{
Cell[1276322, 23234, 338, 9, 55, "Input",ExpressionUUID->"ba5be6cc-b961-4667-8325-56129ca02266"],
Cell[1276663, 23245, 313, 8, 28, "Message",ExpressionUUID->"5ebe75ca-7473-42c1-8660-eb26907a2682"],
Cell[1276979, 23255, 313, 9, 58, "Output",ExpressionUUID->"fe81a1a5-a24e-4b39-a66d-95bef1e54ed0"]
}, Open  ]],
Cell[1277307, 23267, 147, 3, 35, "Text",ExpressionUUID->"de5f5cec-cb05-4059-90c1-6db34e55ef5f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1277491, 23275, 153, 3, 67, "Section",ExpressionUUID->"6602dcc8-0775-41e9-982b-007d7a3aa594"],
Cell[CellGroupData[{
Cell[1277669, 23282, 374, 11, 52, "Input",ExpressionUUID->"1904d495-b7a8-4190-93ee-c5f270e28128"],
Cell[1278046, 23295, 425, 13, 48, "Output",ExpressionUUID->"babc2798-1f76-45a0-beb3-6ac7c9da95d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1278508, 23313, 403, 12, 52, "Input",ExpressionUUID->"d6f31282-9520-4ae1-9b05-8dbf5f35997a"],
Cell[1278914, 23327, 171, 3, 32, "Output",ExpressionUUID->"341b7f5e-f62e-480c-9250-0b694f3a0478"]
}, Open  ]],
Cell[1279100, 23333, 119, 3, 35, "Text",ExpressionUUID->"c4df7b86-5dba-4227-8690-7dedd4cca599"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1279256, 23341, 153, 3, 67, "Section",ExpressionUUID->"2b8f76b8-139a-4358-85e6-d3c5d748d463"],
Cell[1279412, 23346, 121, 3, 35, "Text",ExpressionUUID->"a417f41c-5f5d-4803-832c-ebf928661b0a"],
Cell[CellGroupData[{
Cell[1279558, 23353, 385, 11, 52, "Input",ExpressionUUID->"49802c74-3c78-4711-b34a-5e2274cba27c"],
Cell[1279946, 23366, 294, 9, 35, "Output",ExpressionUUID->"992db0fc-e95c-4c6f-94b2-2be1032b2c77"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1280277, 23380, 419, 12, 52, "Input",ExpressionUUID->"6a0eb788-aa59-40de-a43b-4bf47035329b"],
Cell[1280699, 23394, 349, 11, 36, "Output",ExpressionUUID->"d2c5a89f-6bcb-4e8d-b6e8-3bb4f8e73bc3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1281097, 23411, 148, 3, 67, "Section",ExpressionUUID->"865bc1c2-5447-4111-b97c-0a876ca9a272"],
Cell[CellGroupData[{
Cell[1281270, 23418, 336, 9, 52, "Input",ExpressionUUID->"dc3b9345-4fe0-4c72-9091-b7f2ef8159b6"],
Cell[1281609, 23429, 311, 8, 28, "Message",ExpressionUUID->"aa37057c-5c25-4aaa-9a06-aa21c200f680"],
Cell[1281923, 23439, 333, 10, 56, "Output",ExpressionUUID->"b915d7db-065b-4d75-8cb0-ee81687b8528"]
}, Open  ]],
Cell[1282271, 23452, 121, 3, 35, "Text",ExpressionUUID->"b2610d40-4c29-49bd-8a4d-f40044cff1b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1282429, 23460, 153, 3, 67, "Section",ExpressionUUID->"3183daab-b73a-4695-9c97-77b3b5e7ed9f"],
Cell[CellGroupData[{
Cell[1282607, 23467, 378, 11, 53, "Input",ExpressionUUID->"baa01835-cc4c-4463-88f9-4c078b3940f8"],
Cell[1282988, 23480, 311, 8, 28, "Message",ExpressionUUID->"78114db7-1448-4f3f-a6e3-29fce49d7a76"],
Cell[1283302, 23490, 388, 12, 56, "Output",ExpressionUUID->"fde89170-5447-4376-b2ef-86392cecc8b8"]
}, Open  ]],
Cell[1283705, 23505, 119, 3, 35, "Text",ExpressionUUID->"2a196fc2-e474-4616-905a-0293d27abac0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1283861, 23513, 151, 3, 67, "Section",ExpressionUUID->"187fe786-7c7a-47bd-9e9b-0bbec2e2bdff"],
Cell[CellGroupData[{
Cell[1284037, 23520, 509, 16, 53, "Input",ExpressionUUID->"cce928f6-b490-4697-8e51-2bcf3d1a045d"],
Cell[1284549, 23538, 450, 13, 50, "Output",ExpressionUUID->"38e34a7e-dbd6-46dd-a488-c88c72c1ceca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1285036, 23556, 633, 20, 53, "Input",ExpressionUUID->"5cd943d9-994c-47ac-baba-900b2a173ab6"],
Cell[1285672, 23578, 351, 8, 52, "Output",ExpressionUUID->"2161de9b-8dfe-4f9a-ab13-8a50e063ce58"]
}, Open  ]],
Cell[1286038, 23589, 121, 3, 35, "Text",ExpressionUUID->"e7381d9b-9ab2-4d3a-8913-162ebbba4dab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1286196, 23597, 153, 3, 67, "Section",ExpressionUUID->"cce3d561-4ea3-4ddd-9f7f-bc8f9d3e1db5"],
Cell[CellGroupData[{
Cell[1286374, 23604, 413, 13, 57, "Input",ExpressionUUID->"c20aa311-5bbb-4062-958f-d437fd98449c"],
Cell[1286790, 23619, 313, 8, 28, "Message",ExpressionUUID->"7508097b-ad04-4b50-99f4-e17665e2d81e"],
Cell[1287106, 23629, 370, 12, 57, "Output",ExpressionUUID->"27c04941-6ebd-450d-bbec-faf97f4d817a"]
}, Open  ]],
Cell[1287491, 23644, 119, 3, 35, "Text",ExpressionUUID->"c80bde2d-d631-40c7-acf9-e146824eee16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1287647, 23652, 153, 3, 67, "Section",ExpressionUUID->"98ed0165-7fa4-4a57-b45a-663530edd783"],
Cell[CellGroupData[{
Cell[1287825, 23659, 553, 18, 57, "Input",ExpressionUUID->"f0fe8836-e774-43f6-b944-21abbf7398fd"],
Cell[1288381, 23679, 337, 8, 28, "Message",ExpressionUUID->"1ce25550-0396-4d23-adf2-9d46d61341f7"],
Cell[1288721, 23689, 577, 19, 56, "Output",ExpressionUUID->"38c0308d-5c4d-4263-9665-f76f318dcaff"]
}, Open  ]],
Cell[1289313, 23711, 119, 3, 35, "Text",ExpressionUUID->"85500381-638b-418f-9d0a-7a637bea8f9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1289469, 23719, 151, 3, 67, "Section",ExpressionUUID->"59d4eb5e-2d87-469f-b862-34cc1ecfedde"],
Cell[CellGroupData[{
Cell[1289645, 23726, 532, 17, 52, "Input",ExpressionUUID->"7b6b3d39-d9f3-4b3c-96a6-33fe8607142e"],
Cell[1290180, 23745, 313, 8, 28, "Message",ExpressionUUID->"5ad6bb78-4f97-42fb-a07e-c8a0f8f4ee86"],
Cell[1290496, 23755, 494, 16, 56, "Output",ExpressionUUID->"1d58d8cd-dcff-466a-b15b-8bfc97c7a3d1"]
}, Open  ]],
Cell[1291005, 23774, 119, 3, 35, "Text",ExpressionUUID->"2ac96d25-9d1e-47ec-ad45-d8d6764b4f9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1291161, 23782, 149, 3, 67, "Section",ExpressionUUID->"75d4b590-def6-4799-a7cf-7625f3d7a64c"],
Cell[CellGroupData[{
Cell[1291335, 23789, 526, 16, 53, "Input",ExpressionUUID->"cddd13b1-25d1-48da-80a5-0d348efca795"],
Cell[1291864, 23807, 511, 16, 56, "Output",ExpressionUUID->"2d1b36ae-1552-4c92-b4c0-5a3366e07991"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1292412, 23828, 568, 17, 53, "Input",ExpressionUUID->"67bde7d2-ee0c-46a8-a205-fd989a12ed06"],
Cell[1292983, 23847, 198, 3, 32, "Output",ExpressionUUID->"30d0e997-d253-44cb-9f91-a446a254993b"]
}, Open  ]],
Cell[1293196, 23853, 119, 3, 35, "Text",ExpressionUUID->"404ce7d6-2412-4a2e-af3a-c6c72349507c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1293352, 23861, 149, 3, 67, "Section",ExpressionUUID->"8b65f246-411e-4899-a526-636f5fd7c75f"],
Cell[CellGroupData[{
Cell[1293526, 23868, 636, 18, 57, "Input",ExpressionUUID->"b7a6eed2-b291-437a-a397-ad736ec47621"],
Cell[1294165, 23888, 512, 11, 65, "Message",ExpressionUUID->"67d6f44d-e3bb-45be-92ec-931aa90f857c"],
Cell[1294680, 23901, 835, 16, 105, "Message",ExpressionUUID->"8dce2b58-ea26-4aad-911f-ced5aede522a"],
Cell[1295518, 23919, 236, 4, 32, "Output",ExpressionUUID->"b1f87ca4-0b87-4df3-9c25-095568c262f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1295791, 23928, 433, 13, 57, "Input",ExpressionUUID->"df4e034b-fc36-4b1c-80e6-7e336ec6d2bc"],
Cell[1296227, 23943, 436, 14, 59, "Output",ExpressionUUID->"675111a8-a07f-4e87-bd39-c09cd0c7a834"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1296700, 23962, 512, 17, 57, "Input",ExpressionUUID->"96c87b31-2973-49c8-8f2b-f6978f84032f"],
Cell[1297215, 23981, 311, 8, 28, "Message",ExpressionUUID->"cb79db47-048b-46b1-85d2-1a4fe4b509e0"],
Cell[1297529, 23991, 536, 17, 59, "Output",ExpressionUUID->"2af02f73-0ab3-4043-996c-bb9698f94978"]
}, Open  ]],
Cell[1298080, 24011, 121, 3, 35, "Text",ExpressionUUID->"c5d7dad8-7db8-4a5a-ad86-2231404e9351"]
}, Open  ]]
}
]
*)

