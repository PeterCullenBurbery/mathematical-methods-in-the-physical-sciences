(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    253540,       5591]
NotebookOptionsPosition[    244256,       5423]
NotebookOutlinePosition[    244739,       5441]
CellTagsIndexPosition[    244696,       5438]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["\<\
Test the following series for convergence or divergence. Decide for yourself \
which test is easiest to use, but don\[CloseCurlyQuote]t forget the \
preliminary test. Use the facts stated above when they apply.\
\>", "Text",
 CellChangeTimes->{{3.878491062148715*^9, 
  3.8784910951609116`*^9}},ExpressionUUID->"699ae89c-5509-46a2-ba44-\
b7bdd27d5dde"],

Cell[CellGroupData[{

Cell["9.2", "Section",
 CellChangeTimes->{{3.8784911120295477`*^9, 
  3.8784911250838456`*^9}},ExpressionUUID->"d9244aae-49f3-4c7d-8abb-\
6f3434adc894"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   RowBox[{"n", "-", "1"}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"n", "+", "2"}], ")"}], 
    RowBox[{"(", 
     RowBox[{"n", "+", "3"}], ")"}]}]]}]], "Input",
 CellChangeTimes->{{3.878491209080192*^9, 3.8784912338004675`*^9}},
 CellLabel->
  "In[587]:=",ExpressionUUID->"39af99e4-b332-45a9-8af2-8961158e3625"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 587, 101, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8784912356243973`*^9},
 CellLabel->
  "During evaluation of \
In[587]:=",ExpressionUUID->"a14d3c1d-1f9f-48d3-b5d8-9e242af4ac99"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   RowBox[{
    RowBox[{"-", "1"}], "+", "n"}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"2", "+", "n"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"3", "+", "n"}], ")"}]}]]}]], "Output",
 CellChangeTimes->{3.8784912357024164`*^9},
 CellLabel->
  "Out[587]=",ExpressionUUID->"05bcea36-d099-46c3-9807-fc0677e7b412"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"n", "-", "1"}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"n", "+", "2"}], ")"}], 
     RowBox[{"(", 
      RowBox[{"n", "+", "3"}], ")"}]}]], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "12"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878491328965765*^9, 3.8784913357215633`*^9}},
 CellLabel->
  "In[589]:=",ExpressionUUID->"c7dc8d8b-32cc-4ef9-84cc-acd1e3260017"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   FractionBox["1", "20"], ",", 
   FractionBox["1", "15"], ",", 
   FractionBox["1", "14"], ",", 
   FractionBox["1", "14"], ",", 
   FractionBox["5", "72"], ",", 
   FractionBox["1", "15"], ",", 
   FractionBox["7", "110"], ",", 
   FractionBox["2", "33"], ",", 
   FractionBox["3", "52"], ",", 
   FractionBox["5", "91"], ",", 
   FractionBox["11", "210"]}], "}"}]], "Output",
 CellChangeTimes->{3.8784913361609306`*^9},
 CellLabel->
  "Out[589]=",ExpressionUUID->"a577cfc9-588b-46a5-b8e7-2b1afd2b6188"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"n", "-", "1"}], 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"n", "+", "2"}], ")"}], 
      RowBox[{"(", 
       RowBox[{"n", "+", "3"}], ")"}]}]], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "12"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8784913372985463`*^9, 3.8784913386267304`*^9}},
 CellLabel->
  "In[590]:=",ExpressionUUID->"3ff5672d-29a1-475e-a2b7-a46bda042a2a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   FractionBox["1", "20"], ",", 
   FractionBox["7", "60"], ",", 
   FractionBox["79", "420"], ",", 
   FractionBox["109", "420"], ",", 
   FractionBox["829", "2520"], ",", 
   FractionBox["997", "2520"], ",", 
   FractionBox["12731", "27720"], ",", 
   FractionBox["14411", "27720"], ",", 
   FractionBox["208133", "360360"], ",", 
   FractionBox["227933", "360360"], ",", 
   FractionBox["246809", "360360"]}], "}"}]], "Output",
 CellChangeTimes->{3.8784913390329285`*^9},
 CellLabel->
  "Out[590]=",ExpressionUUID->"95e90c81-731b-4656-8aa4-0da96172d494"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "sum ",
 Cell[BoxData[
  FractionBox[
   RowBox[{"n", "-", "1"}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"n", "+", "2"}], ")"}], 
    RowBox[{"(", 
     RowBox[{"n", "+", "3"}], ")"}]}]]], "Input",
  CellChangeTimes->{{3.878491209080192*^9, 3.8784912338004675`*^9}},
  ExpressionUUID->"cf97eb64-251d-499c-ba73-a7a45b291b4e"],
 " from n=1 to \[Infinity]"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.8784912410621843`*^9, 3.87849125378904*^9}},
 CellLabel->
  "In[588]:=",ExpressionUUID->"0f32ccfd-79b0-4860-9dca-004247fa4e63"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "sum (n - 1)/((n + 2) (n + 3)) from n=1 to \[Infinity]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {
     "Result__Show tests", "Result__Step-by-step solution", 
      "PartialSums__More terms", "PartialSums__Show points"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Infinite sum", "scanner" -> "Sum", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"SumConvergence[(n - 1)/((n + 2) (n + 3)), n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  TagBox[
                   TagBox[
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{"n", "-", "1"}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "+", "2"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "3"}], ")"}]}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], TraditionalForm], 
                    HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], 
                  TemplateBox[{6}, "Spacer1"], "\"diverges to \[Infinity]\""},
                  "RowDefault"]}, {
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"convergence test\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    PaneBox[
                    "\"result\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]]}, {
                    "\"integral\"", "\"series diverges\""}, {"\"limit\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {"\"ratio\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {"\"root\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 
                    2} -> {Center, Baseline}}}, AutoDelete -> False, 
                   GridBoxBackground -> {
                    "Columns" -> {{None}}, "Rows" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Use the integral test to determine the convergence of \
the series\""}, "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", "n", "\[Infinity]"], 
                    TagBox[
                    FractionBox[
                    TagBox[
                    RowBox[{"n", "-", "1"}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"n", "+", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"n", "+", "3"}], HoldForm], ")"}]}]], HoldForm]}],
                     ScriptLevel -> 0, StripOnInput -> False], HoldForm], 
                    TraditionalForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"If \"", "\"a \"", "\"function \"", 
                    TemplateBox[{
                    RowBox[{"f", "(", "x", ")"}], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"continuous, \"", "\"positive \"", 
                    "\"and \"", "\"decreasing, \"", "\"then \"", "\"the \"", 
                    "\"series \"", 
                    TemplateBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
                    RowBox[{"f", "(", "n", ")"}]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], TraditionalForm], 
                    HoldForm], "\" \""}, "RowDefault"], "\"converges \"", 
                    "\"if \"", "\"and \"", "\"only \"", "\"if \"", "\"the \"",
                     "\"corresponding \"", "\"integral \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{"\[Rho]", "\[LongEqual]", 
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "1", "\[Infinity]"], 
                    RowBox[{
                    RowBox[{"f", "(", "x", ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"converges\""}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"If \"", "\"the \"", "\"integral \"", 
                    TemplateBox[{"\[Rho]", "\" \""}, "RowDefault"], 
                    "\"converges, \"", "\"the \"", "\"series \"", 
                    "\"converges;\""}, "RowDefault"]}, {
                    TemplateBox[{"\"if \"", "\"the \"", "\"integral \"", 
                    TemplateBox[{"\[Rho]", "\" \""}, "RowDefault"], 
                    "\"diverges, \"", "\"the \"", "\"series \"", 
                    "\"diverges.\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Let \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"f", "(", "x", ")"}], "\[LongEqual]", 
                    FractionBox[
                    TagBox[
                    RowBox[{"x", "-", "1"}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}]}]]}], HoldForm],
                     "\" \""}, "RowDefault"], "\"and \"", "\"check \"", 
                    "\"that \"", 
                    TemplateBox[{
                    RowBox[{"f", "(", "x", ")"}], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"continuous, \"", "\"positive \"", 
                    "\"and \"", "\"decreasing \"", "\"for \"", 
                    RowBox[{"x", "\[GreaterEqual]", "1"}]}, "RowDefault"], 
                    "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"continuous:\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"is\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    FractionBox[
                    TagBox[
                    RowBox[{"x", "-", "1"}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}]}]], "\" \""}, 
                    "RowDefault"], "\"continuous \""}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox["\"for\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"x", "\[GreaterEqual]", "1"}], "\"?\""}, 
                    "RowDefault"]}, "RowDefault"]}, "RowDefault"], 
                    "\"yes\""}, {
                    TagBox[
                    PaneBox[
                    "\"positive:\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"is\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    FractionBox[
                    TagBox[
                    RowBox[{"x", "-", "1"}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}]}]], 
                    "\[GreaterEqual]", "0"}], HoldForm], "\" \""}, 
                    "RowDefault"]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox["\"for\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"x", "\[GreaterEqual]", "1"}], "\"?\""}, 
                    "RowDefault"]}, "RowDefault"]}, "RowDefault"], 
                    "\"yes\""}, {
                    TagBox[
                    PaneBox[
                    "\"decreasing:\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"is\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "f", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}], "\[Equal]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    TagBox[
                    RowBox[{"x", "-", "1"}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "2"}], HoldForm], ")"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}], "2"]}]]}], "-", 
                    FractionBox[
                    TagBox[
                    RowBox[{"x", "-", "1"}], HoldForm], 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "2"}], HoldForm], ")"}], "2"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}]}]], "+", 
                    FractionBox["1", 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}]}]]}], HoldForm],
                     "<", "0"}], "\" \""}, "RowDefault"]}, "RowDefault"], 
                    TemplateBox[{
                    StyleBox["\"for\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "\" \""}, "RowDefault"], 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"x", "\[GreaterEqual]", "1"}], "\"?\""}, 
                    "RowDefault"]}, "RowDefault"]}, "RowDefault"], 
                    "\"yes\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Left, Left, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {None, None}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                    GrayLevel[0.84], BaselinePosition -> Automatic, 
                    AllowScriptLevelChange -> False], "Grid"], 
                    LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, 
                    StripOnInput -> False]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Since \"", 
                    TemplateBox[{
                    RowBox[{"f", "(", "x", ")"}], "\" \""}, "RowDefault"], 
                    "\"is \"", "\"continuous, \"", "\"positive \"", 
                    "\"and \"", "\"decreasing, \"", "\"the \"", 
                    "\"integral \"", "\"test \"", "\"can \"", "\"be \"", 
                    "\"applied. \"", "\"To \"", "\"do \"", "\"so, \"", 
                    "\"take \"", "\"the \"", "\"integral \"", 
                    TagBox[
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "1", "\[Infinity]"], 
                    RowBox[{
                    RowBox[{"f", "(", "x", ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "1", "\[Infinity]"], 
                    RowBox[{
                    FractionBox[
                    TagBox[
                    RowBox[{"x", "-", "1"}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}]}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], "\[LongEqual]", 
                    "\[Infinity]"}], HoldForm]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Since \"", "\"the \"", "\"integral \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    SubsuperscriptBox["\[Integral]", "1", "\[Infinity]"], 
                    RowBox[{
                    FractionBox[
                    TagBox[
                    RowBox[{"x", "-", "1"}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"x", "+", "3"}], HoldForm], ")"}]}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                    "\" \""}, "RowDefault"], "\"diverges, \"", "\"the \"", 
                    "\"series \"", 
                    TemplateBox[{
                    TagBox[
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    TagBox[
                    RowBox[{"n", "-", "1"}], HoldForm], 
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"n", "+", "2"}], HoldForm], ")"}], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"n", "+", "3"}], HoldForm], ")"}]}]]}], 
                    ScriptLevel -> 0, StripOnInput -> False], HoldForm], 
                    TraditionalForm], HoldForm], "\" \""}, "RowDefault"], 
                    "\"diverges.\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Roboto", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"series \"", "\"is \"", "\"divergent \"", 
                    "\"by \"", "\"the \"", "\"integral \"", "\"test.\""}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Hide tests", "input" -> "Result__Hide tests"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Integral Test", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Integral Test", "input" -> "Result__Integral Test"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Limit Test (inconclusive)", "input" -> 
           "Result__Limit Test (inconclusive)"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Ratio Test (inconclusive)", "input" -> 
           "Result__Ratio Test (inconclusive)"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Root Test (inconclusive)", "input" -> 
           "Result__Root Test (inconclusive)"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Partial sum formula", "scanner" -> "Sum", "id" -> 
     "PartialSumFormula", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "k"], 
                    FractionBox[
                    RowBox[{"n", "-", "1"}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "+", "2"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "3"}], ")"}]}]]}], ScriptLevel -> 0, 
                   StripOnInput -> False], HoldForm], TraditionalForm], 
                HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              FractionBox[
               RowBox[{
                 RowBox[{"6", " ", 
                   TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], " ", "k"}], "-", 
                 RowBox[{"17", " ", "k"}], "+", 
                 RowBox[{"6", " ", "k", " ", 
                   TemplateBox[{"0", 
                    RowBox[{"k", "+", "3"}]}, "PolyGamma2"]}], "+", 
                 RowBox[{"18", " ", 
                   TemplateBox[{"0", 
                    RowBox[{"k", "+", "3"}]}, "PolyGamma2"]}], "+", 
                 RowBox[{"18", " ", 
                   TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]]}], "-", "27"}], 
               RowBox[{"6", " ", 
                 RowBox[{"(", 
                   RowBox[{"k", "+", "3"}], ")"}]}]]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {
        "text" -> 
         "polygamma(n, x) is the nth derivative of the digamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/PolyGamma.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/PolyGamma2", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/PolygammaFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "gamma is the Euler-Mascheroni constant"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/EulerGamma.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/Euler-MascheroniConstant.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[Accumulate[Table[(k - 1)/((k + 2) (k + 3)), {k, 1, \
11}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 
                 LineBox[{{1., 0.}, {2., 0.05}, {3., 0.11666666666666667`}, {
                  4.000000000000001, 0.1880952380952381}, {5., 
                  0.25952380952380955`}, {6., 0.32896825396825397`}, {
                  7.000000000000002, 0.3956349206349206}, {8.000000000000002, 
                  0.4592712842712843}, {9., 0.5198773448773448}, {10., 
                  0.5775696525696525}, {11., 0.6325147075147075}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{1., 0.}}, {{2., 0.05}}, {{
                  3., 0.11666666666666667`}}, {{4.000000000000001, 
                  0.1880952380952381}}, {{5., 0.25952380952380955`}}, {{6., 
                  0.32896825396825397`}}, {{7.000000000000002, 
                  0.3956349206349206}}, {{8.000000000000002, 
                  0.4592712842712843}}, {{9., 0.5198773448773448}}, {{10., 
                  0.5775696525696525}}, {{11., 0.6325147075147075}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}}, {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox["k", TraditionalForm], 
                FormBox[
                 SubscriptBox["\"S\"", "k"], TraditionalForm]}, 
              AxesOrigin -> {1., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{0, 11.}, {0., 0.6325147075147075}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Partial sum values"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox["k", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}], 
                StyleBox[
                 SubscriptBox["\"S\"", "k"], {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}, {"1", "0"}, {"2", "0.05`"}, {
               "3", "0.11666666666666667`"}, {"4", "0.1880952380952381`"}, {
               "5", "0.25952380952380955`"}, {"6", "0.32896825396825397`"}, {
               "7", "0.3956349206349206`"}, {"8", "0.4592712842712843`"}, {
               "9", "0.5198773448773448`"}, {"10", "0.5775696525696525`"}, {
               "11", "0.6325147075147075`"}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
              False, GridBoxDividers -> {
               "Columns" -> {{True}}, "Rows" -> {{True}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
              FrameStyle -> GrayLevel[0.8]], "Grid"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Fewer terms", "input" -> "PartialSums__Fewer terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Hide points", "input" -> 
         "PartialSums__Hide points"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Sum", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.5250000000000001", "parsetiming" -> "0.625", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP18921h4fib2hcf3g3552000049h8gc1890ehfa0c", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "9", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa18931h4fib2hcf3g3552000023c6a94d14be460f1494138648170584556", "version" -> 
    "2.6", "inputstring" -> 
    "sum (n - 1)/((n + 2) (n + 3)) from n=1 to \[Infinity]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 40, 57.4947907`9.512203331028541}, "Line" -> 
    588, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2, 3},
    Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "sum (n - 1)/((n + 2) (n + 3)) from n=1 to \[Infinity]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1081., {812.3544921875, 817.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.878491257541665*^9},ExpressionUUID->"a5fdd0ff-0266-4c2a-a85c-\
a892990fc1aa"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.8784911271298466`*^9},ExpressionUUID->"96f99b90-1ad9-4c91-8916-\
fbec5c93d4be"]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.3", "Section",
 CellChangeTimes->{{3.8784911293511257`*^9, 
  3.878491131723981*^9}},ExpressionUUID->"953deb41-dbe9-40bb-bf69-\
d896e2fc3e1a"],

Cell["C", "Text",
 CellChangeTimes->{
  3.878491134028825*^9},ExpressionUUID->"5ad44558-7bcb-4503-90a4-\
1b1f6dc98a27"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   FractionBox["1", 
    SuperscriptBox[
     RowBox[{"n", " "}], 
     RowBox[{"Log", "[", "3", "]"}]]], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "12"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784913547693076`*^9, 3.8784913655941706`*^9}},
 CellLabel->
  "In[591]:=",ExpressionUUID->"3ab2257c-d467-4ddf-b6b4-a1e0714725fb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   SuperscriptBox["2", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["3", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["4", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["5", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["6", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["7", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["8", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["9", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["10", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["11", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]], ",", 
   SuperscriptBox["12", 
    RowBox[{"-", 
     RowBox[{"Log", "[", "3", "]"}]}]]}], "}"}]], "Output",
 CellChangeTimes->{3.878491366219162*^9},
 CellLabel->
  "Out[591]=",ExpressionUUID->"cacdecd7-19c1-46d3-a1ff-727cacbb9f5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    FractionBox["1", 
     SuperscriptBox[
      RowBox[{"n", " "}], 
      RowBox[{"Log", "[", "3", "]"}]]], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "12"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.878491366812923*^9, 3.8784913683207483`*^9}},
 CellLabel->
  "In[592]:=",ExpressionUUID->"85aaae67-7a95-4348-8dd5-d5e5b21b2165"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["4", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["4", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["5", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["4", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["5", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["6", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["4", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["5", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["6", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["7", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["4", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["5", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["6", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["7", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["8", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["4", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["5", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["6", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["7", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["8", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["9", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["4", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["5", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["6", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["7", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["8", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["9", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["10", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["4", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["5", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["6", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["7", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["8", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["9", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["10", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["11", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}], ",", 
   RowBox[{"1", "+", 
    SuperscriptBox["2", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["3", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["4", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["5", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["6", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["7", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["8", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["9", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["10", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["11", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]], "+", 
    SuperscriptBox["12", 
     RowBox[{"-", 
      RowBox[{"Log", "[", "3", "]"}]}]]}]}], "}"}]], "Output",
 CellChangeTimes->{3.878491368797271*^9},
 CellLabel->
  "Out[592]=",ExpressionUUID->"7434c6bc-81c7-4e3e-ad90-f0a63c8297a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{"Accumulate", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     FractionBox["1", 
      SuperscriptBox[
       RowBox[{"n", " "}], 
       RowBox[{"Log", "[", "3", "]"}]]], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "12"}], "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.878491372692626*^9, 3.8784913753957233`*^9}},
 CellLabel->
  "In[593]:=",ExpressionUUID->"146f7c7c-c5d6-4e2a-b086-9c071f9ced6e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "1.4669654483659371`", ",", "1.766073928728972`", ",", 
   "1.9841306586965728`", ",", "2.1547793507002178`", ",", 
   "2.2944526763429964`", ",", "2.412366550339379`", ",", "2.51419150901791`",
    ",", "2.6036573920429937`", ",", "2.6833444350175366`", ",", 
   "2.755109519221135`", ",", "2.8203321363546765`"}], "}"}]], "Output",
 CellChangeTimes->{3.878491375817618*^9},
 CellLabel->
  "Out[593]=",ExpressionUUID->"8ac08996-619c-4184-840b-dd884bffc797"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox["1", 
   SuperscriptBox["n", 
    RowBox[{"Log", "[", "3", "]"}]]]}]], "Input",
 CellChangeTimes->{{3.878491387318438*^9, 3.8784914114390154`*^9}},
 CellLabel->
  "In[594]:=",ExpressionUUID->"905c8498-18d4-489a-b75d-de82e483c70f"],

Cell[BoxData[
 RowBox[{"Zeta", "[", 
  RowBox[{"Log", "[", "3", "]"}], "]"}]], "Output",
 CellChangeTimes->{3.878491412814048*^9},
 CellLabel->
  "Out[594]=",ExpressionUUID->"c364555f-5b1f-43a3-99e0-49a4361aa4b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{"Zeta", "[", 
   RowBox[{"Log", "[", "3", "]"}], "]"}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[595]:=",ExpressionUUID->"e565543d-b9fd-4e1a-978d-d9f2111e670d"],

Cell[BoxData["10.72507274226771`"], "Output",
 CellChangeTimes->{3.8784914146684885`*^9},
 CellLabel->
  "Out[595]=",ExpressionUUID->"52961b66-dba1-4467-9957-fd6025618b52"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"]], "Input",ExpressionUUID->
  "ef47ac14-c43b-4d63-9f79-b8773fdf9edb"],
 Cell[BoxData[
  FractionBox["1", 
   SuperscriptBox["n", 
    RowBox[{"Log", "[", "3", "]"}]]]], "Input",
  CellChangeTimes->{{3.878491387318438*^9, 3.8784914114390154`*^9}},
  ExpressionUUID->"a0e7f438-7820-4c53-8ed6-9625a6b1c6ec"]
}], "WolframAlphaLong",
 CellChangeTimes->{{3.878491418280631*^9, 3.8784914342370324`*^9}},
 CellLabel->
  "In[598]:=",ExpressionUUID->"dd3f6e40-1189-4768-bf76-ac028c18ca25"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "\!\(\*UnderoverscriptBox[\(\[Sum]\), \(n = 1\), \
\(\[Infinity]\)]\)1/n^Log[3]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "0", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.925", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "", "parseidserver" -> "7", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> "", 
    "version" -> "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 44, 22.6427933`9.107504931173448}, "Line" -> 
    598, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "\!\(\*UnderoverscriptBox[\(\[Sum]\), \(n = 1\), \
\(\[Infinity]\)]\)1/n^Log[3]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1081., {42.8544921875, 48.1455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.878491462689655*^9},ExpressionUUID->"dfad6311-fccc-47f5-92da-\
9f2a6d741006"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox["1", 
   SuperscriptBox["n", 
    RowBox[{"Log", "[", "3", "]"}]]]}]], "Input",
 CellChangeTimes->{{3.878491387318438*^9, 
  3.8784914114390154`*^9}},ExpressionUUID->"f6cd76d7-4122-40d0-8d80-\
82b293c803a1"]], "WolframAlphaLong",
 CellChangeTimes->{{3.8784914661017113`*^9, 3.8784914719276342`*^9}},
 CellLabel->
  "In[599]:=",ExpressionUUID->"d3d4f398-1074-410e-b9cf-acf1c785826e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "\!\(\n\*UnderoverscriptBox[\(\[Sum]\), \(n = 1\), \(\[Infinity]\)]\n\
\*FractionBox[\(1\), \nSuperscriptBox[\(n\), \(Log[3]\)]]\)", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "false", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "0", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "4.804", "parsetiming" -> "0.847", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> "", "parseidserver" -> "8", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "8", "related" -> "", 
    "version" -> "2.6", "inputstring" -> 
    "\!\\( \\*UnderoverscriptBox[\\(\[Sum]\\), \\(n = 1\\), \
\\(\[Infinity]\\)] \\*FractionBox[\\(1\\),  SuperscriptBox[\\(n\\), \\(Log[3]\
\\)]]\\)"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 44, 37.7931752`9.329988269015479}, "Line" -> 
    599, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "\!\(\n\*UnderoverscriptBox[\(\[Sum]\), \(n = 1\), \(\[Infinity]\)]\n\
\*FractionBox[\(1\), \nSuperscriptBox[\(n\), \(Log[3]\)]]\)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {}, {}, Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, 
        Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1081., {42.8544921875, 48.1455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.87849147780885*^9},ExpressionUUID->"2eccb734-6763-4c0c-89f6-2326e69c4f71"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TeXForm", "[", 
  RowBox[{"Hold", "@", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"n", "=", "1"}], "\[Infinity]"], 
    FractionBox["1", 
     SuperscriptBox["n", 
      RowBox[{"Log", "[", "3", "]"}]]]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878491506718022*^9, 3.8784915177555094`*^9}},
 CellLabel->
  "In[603]:=",ExpressionUUID->"cc2e0283-41a0-4f28-b124-a15dcd277496"],

Cell["\<\
\\text{Hold}\\left[\\sum _{n=1}^{\\infty } \\frac{1}{n^{\\log (3)}}\\right]\
\>", "Output",
 CellChangeTimes->{{3.8784915117027917`*^9, 3.8784915180836253`*^9}},
 CellLabel->
  "Out[603]//TeXForm=",ExpressionUUID->"b8983118-8200-4e9c-ad8b-acc1916e954a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\\left[\\sum _{n=1}^{\\infty } \\frac{1}{n^{\\log (3)}}\\right", \
"WolframAlphaLong",
 CellChangeTimes->{{3.8784915216080484`*^9, 3.8784915262018223`*^9}},
 CellLabel->
  "In[604]:=",ExpressionUUID->"e1839b0f-d4a2-4222-bc1b-7380c27b79de"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "\\left[\\sum _{n=1}^{\\infty } \\frac{1}{n^{\\log (3)}}\\right", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"SumConvergence__Show tests"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Infinite sum", "scanner" -> "Sum", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sum[1/n^Log[3], {n, 1, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              RowBox[{
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
                    FractionBox["1", 
                    SuperscriptBox["n", 
                    RowBox[{"log", "(", "3", ")"}]]]}], ScriptLevel -> 0, 
                   StripOnInput -> False], HoldForm], TraditionalForm], 
                "\[LongEqual]", 
                TagBox[
                 TemplateBox[{
                   RowBox[{"log", "(", "3", ")"}]}, "Zeta"], Identity], 
                "\[TildeTilde]", 
                TagBox["10.7250727422677186258`5.", Identity]}]}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> "Result__More digits"}, {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "\[Zeta](s) is the Riemann zeta function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Zeta.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ZetaFunctionsandPolylogarithms/Zeta",
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/RiemannZetaFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Sum convergence", "scanner" -> "Sum", "id" -> 
     "SumConvergence", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"SumConvergence[1/n^Log[3], n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  TagBox[
                   TagBox[
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
                    FractionBox["1", 
                    SuperscriptBox["n", 
                    RowBox[{"log", "(", "3", ")"}]]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], TraditionalForm], 
                    HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], 
                  TemplateBox[{6}, "Spacer1"], "\"converges\""}, 
                 "RowDefault"]}, {
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"convergence test\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    PaneBox[
                    "\"result\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]]}, {
                    TemplateBox[{"p", "\"\[Hyphen]series\""}, "RowDefault"], 
                    "\"series converges\""}, {"\"limit\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {"\"ratio\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {"\"root\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {"\"integral\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 
                    2} -> {Center, Baseline}}}, AutoDelete -> False, 
                   GridBoxBackground -> {
                    "Columns" -> {{None}}, "Rows" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Hide tests", "input" -> "SumConvergence__Hide tests"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "SumConvergence__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Partial sum formula", "scanner" -> "Sum", "id" -> 
     "PartialSumFormula", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "k"], 
                    FractionBox["1", 
                    SuperscriptBox["n", 
                    RowBox[{"log", "(", "3", ")"}]]]}], ScriptLevel -> 0, 
                   StripOnInput -> False], HoldForm], TraditionalForm], 
                HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              TemplateBox[{"k", 
                RowBox[{"log", "(", "3", ")"}]}, "HarmonicNumber2", 
               SyntaxForm -> SubsuperscriptBox]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "H_n^(r) is the generalized harmonic number"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/HarmonicNumber.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/GammaBetaErf/HarmonicNumber2", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HarmonicNumber.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[Accumulate[Table[1/k^Log[3], {k, 1, 6}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 
                 LineBox[{{1., 1.}, {2., 1.4669654483659371`}, {
                  3.0000000000000004`, 1.766073928728972}, {4., 
                  1.9841306586965728`}, {5.000000000000001, 
                  2.1547793507002178`}, {6., 2.2944526763429964`}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{1., 1.}}, {{2., 
                  1.4669654483659371`}}, {{3.0000000000000004`, 
                  1.766073928728972}}, {{4., 1.9841306586965728`}}, {{
                  5.000000000000001, 2.1547793507002178`}}, {{6., 
                  2.2944526763429964`}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}}, {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox["k", TraditionalForm], 
                FormBox[
                 SubscriptBox["\"S\"", "k"], TraditionalForm]}, 
              AxesOrigin -> {1., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{0, 6.}, {0., 2.2944526763429964`}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show points", "input" -> 
         "PartialSums__Show points"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> "Sum", "id" -> 
     "AlternateSeriesRepresentations", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "4"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Zeta[Log[3]] == Sum[k^(-Log[3]), {k, 1, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"log", "(", "3", ")"}]}, "Zeta"], "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                  SuperscriptBox["k", 
                   RowBox[{"-", 
                    RowBox[{"log", "(", "3", ")"}]}]]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Zeta[Log[3]] == (2^Log[3] Sum[(1 + 2 k)^(-Log[3]), {k, 0, \
Infinity}])/(-1 + 2^Log[3])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"log", "(", "3", ")"}]}, "Zeta"], "\[LongEqual]", 
                FractionBox[
                 RowBox[{
                   SuperscriptBox["2", 
                    RowBox[{"log", "(", "3", ")"}]], " ", 
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], 
                    RowBox[{"-", 
                    RowBox[{"log", "(", "3", ")"}]}]]}]}], 
                 RowBox[{
                   RowBox[{"-", "1"}], "+", 
                   SuperscriptBox["2", 
                    RowBox[{"log", "(", "3", ")"}]]}]]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Zeta[Log[3]] == E^Sum[PrimeZetaP[k Log[3]]/k, {k, 1, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"log", "(", "3", ")"}]}, "Zeta"], "\[LongEqual]", 
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{
                   UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                   RowBox[{
                    TemplateBox[{
                    RowBox[{"k", " ", 
                    RowBox[{"log", "(", "3", ")"}]}]}, "PrimeZetaP"], "/", 
                    "k"}]}]]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Zeta[Log[3]] == Sum[Sum[(-1)^k (1 + k)^(1 - Log[3]) Binomial[n, k], \
{k, 0, n}]/(1 + n), {n, 0, Infinity}]/(-1 + Log[3])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{
                  RowBox[{"log", "(", "3", ")"}]}, "Zeta"], "\[LongEqual]", 
                FractionBox[
                 RowBox[{
                   UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "0"}], "\[Infinity]"], 
                   FractionBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "n"], 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "k"}], ")"}], 
                    RowBox[{"1", "-", 
                    RowBox[{"log", "(", "3", ")"}]}]], " ", 
                    TemplateBox[{"n", "k"}, "Binomial"]}]}], 
                    RowBox[{"1", "+", "n"}]]}], 
                 RowBox[{
                   RowBox[{"-", "1"}], "+", 
                   RowBox[{"log", "(", "3", ")"}]}]]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "4"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternateSeriesRepresentations__More"}, {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "P(z) gives the prime zeta function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/PrimeZetaP.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/PrimeZetaFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "binomial(n, m) is the binomial coefficient"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Binomial.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Binomial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/BinomialCoefficient.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False, False, False, False}, True}, Typeset`asyncpods$$ = {},
    Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "log", "template" -> 
        "Assuming \"log\" is the natural logarithm${separator}Use ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FunClash\", \"log\"} -> {\"Log\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log10\"}"}, {}]}]}], 
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "delimiters", {
       "text" -> 
        "An attempt was made to fix mismatched parentheses, brackets, or \
braces."}, {}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True],
    Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "5", "datatypes" -> "Sum", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.537", "parsetiming" -> "0.733", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP45691gi8cb4cefb0f08000000ibah7a82i73ca31", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "6", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa45701gi8cb4cefb0f08000004ig7bab8480f3bif7167914177805443390", "version" -> 
    "2.6", "inputstring" -> "[sum  _(n=1)^\[Infinity] ((1)/(n^(log  (3))))"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 45, 29.6080677`9.22398497518103}, "Line" -> 
    604, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = 
   "\\left[\\sum _{n=1}^{\\infty } \\frac{1}{n^{\\log (3)}}\\right"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1081., {549.3544921875, 554.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.87849152968618*^9},ExpressionUUID->"a204246b-cfee-48e4-a42f-2fcedc50742c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.7", "Section",
 CellChangeTimes->{{3.8784911364136267`*^9, 
  3.878491146197703*^9}},ExpressionUUID->"06eb3522-8b7c-422d-8128-\
852773711b58"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TeXForm", "[", 
  RowBox[{"Hold", "@", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"n", "=", "0"}], "\[Infinity]"], 
    FractionBox[
     RowBox[{
      RowBox[{"(", 
       RowBox[{"2", "n"}], ")"}], "!"}], 
     RowBox[{
      SuperscriptBox["3", "n"], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"n", "!"}], ")"}], "2"]}]]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784915567213554`*^9, 3.8784915802256837`*^9}},
 CellLabel->
  "In[605]:=",ExpressionUUID->"b6b409ca-8639-46cf-85e2-8c667e19446a"],

Cell["\<\
\\text{Hold}\\left[\\sum _{n=0}^{\\infty } \\frac{(2 n)!}{3^n (n!)^2}\\right]\
\>", "Output",
 CellChangeTimes->{3.8784915807381115`*^9},
 CellLabel->
  "Out[605]//TeXForm=",ExpressionUUID->"ac6be6e9-8695-47a9-b7cf-90a1230239e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\\left[\\sum _{n=0}^{\\infty } \\frac{(2 n)!}{3^n (n!)^2}\\right", \
"WolframAlphaLong",
 CellChangeTimes->{{3.8784915826389184`*^9, 3.8784915907110863`*^9}},
 CellLabel->
  "In[606]:=",ExpressionUUID->"25667ddf-0bb7-4269-9d74-930ddc44b3a8"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "\\left[\\sum _{n=0}^{\\infty } \\frac{(2 n)!}{3^n (n!)^2}\\right", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Result__Show tests"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Infinite sum", "scanner" -> "Sum", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"SumConvergence[(2 n)!/(3^n n!^2), n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  TagBox[
                   TagBox[
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "n"}], ")"}], "!"}], 
                    RowBox[{
                    SuperscriptBox["3", "n"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "!"}], ")"}], "2"]}]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], TraditionalForm], 
                    HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], 
                  TemplateBox[{6}, "Spacer1"], "\"diverges\""}, 
                 "RowDefault"]}, {
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"convergence test\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    PaneBox[
                    "\"result\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]]}, {
                    "\"limit\"", "\"series diverges\""}, {
                    "\"ratio\"", "\"series diverges\""}, {
                    "\"root\"", "\"series diverges\""}, {"\"integral\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 
                    2} -> {Center, Baseline}}}, AutoDelete -> False, 
                   GridBoxBackground -> {
                    "Columns" -> {{None}}, "Rows" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "n! is the factorial function"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/Factorial.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Hide tests", "input" -> "Result__Hide tests"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Partial sum formula", "scanner" -> "Sum", "id" -> 
     "PartialSumFormula", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "0"}], "k"], 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "n"}], ")"}], "!"}], 
                    RowBox[{
                    SuperscriptBox["3", "n"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "!"}], ")"}], "2"]}]]}], ScriptLevel -> 0, 
                   StripOnInput -> False], HoldForm], TraditionalForm], 
                HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              RowBox[{
                RowBox[{"-", 
                  RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["3", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"k"}]}], "-", "1"}]], " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"k", "+", "1"}], ")"}]}], ")"}], "!"}], " ", 
                    TemplateBox[{"1", 
                    RowBox[{"k", "+", 
                    FractionBox["3", "2"]}], 
                    RowBox[{"k", "+", "2"}], 
                    FractionBox["4", "3"]}, "Hypergeometric2F1"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"k", "+", "1"}], ")"}], "!"}], ")"}], "2"]]}]}], 
                "-", 
                RowBox[{"\[ImaginaryI]", " ", 
                  SqrtBox["3"]}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "2F1(a, b, c, x) is the hypergeometric function"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/Hypergeometric2F1.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/HypergeometricFunctions/\
Hypergeometric2F1", "text" -> "Properties", "title" -> 
           "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HypergeometricFunction.html",
            "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[Accumulate[Table[(2 k)!/(3^k k!^2), {k, 0, 5}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 
                 LineBox[{{0., 1.}, {1., 1.6666666666666667`}, {2., 
                  2.3333333333333335`}, {3.0000000000000004`, 
                  3.074074074074074}, {4., 3.9382716049382718`}, {5., 
                  4.9753086419753085`}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{0., 1.}}, {{1., 
                  1.6666666666666667`}}, {{2., 2.3333333333333335`}}, {{
                  3.0000000000000004`, 3.074074074074074}}, {{4., 
                  3.9382716049382718`}}, {{5., 4.9753086419753085`}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}}, {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox["k", TraditionalForm], 
                FormBox[
                 SubscriptBox["\"S\"", "k"], TraditionalForm]}, 
              AxesOrigin -> {0., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{0., 5.}, {0., 4.9753086419753085`}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show points", "input" -> 
         "PartialSums__Show points"}, {}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {
    "title" -> "Regularized result", "scanner" -> "Sum", "id" -> 
     "RegularizedSum", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> "Borel regularization"}, {
       XMLElement[
       "minput", {}, {
        "Sum[(2 n)!/(3^n n!^2), {n, 0, Infinity}, Regularization -> \
\"Borel\"]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             RowBox[{
               TemplateBox[{
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                   RowBox[{
                    RowBox[{
                    TagBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "s"}], " ", "t"}]], HoldForm], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["3", 
                    RowBox[{"-", "n"}]], " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "n"}], ")"}], "!"}], " ", 
                    SuperscriptBox["t", "n"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "!"}], ")"}], "3"]]}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}], "s", "1"}, 
                "Limit2Arg", SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], "\[LongEqual]", 
               "0"}], ScriptLevel -> 0, StripOnInput -> False], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "delimiters", {
       "text" -> 
        "An attempt was made to fix mismatched parentheses, brackets, or \
braces."}, {}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True],
    Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "4", "datatypes" -> "Sum", "timedout" -> "Sum", 
     "timedoutpods" -> "", "timing" -> "3.96", "parsetiming" -> "0.846", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa382119d26d8hhh75iic7000027ag3d224e4d819e1697175660060143921", "id" -> 
     "MSP382219d26d8hhh75iic700000hbcief7ei245fc9", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa382319d26d8hhh75iic700005cgfc20gibd079b41697175660060143921", "version" -> 
     "2.6", "inputstring" -> 
     "[sum  _(n=0)^\[Infinity] (((2 n)!)/(3^n (n!)^2))"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "Sum", "timedout" -> "Sum", 
     "timedoutpods" -> "", "timing" -> "3.071", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "5", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "5", "related" -> "", 
     "version" -> "2.6", "inputstring" -> 
     "[sum  _(n=0)^\[Infinity] (((2 n)!)/(3^n (n!)^2))"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 46, 36.0407684`9.309368932663327}, "Line" -> 
    606, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "\\left[\\sum _{n=0}^{\\infty } \\frac{(2 n)!}{3^n (n!)^2}\\right"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1081., {350.3544921875, 355.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa382119d26d8hhh75iic7000027ag3d224e4d819e1697175660060143921", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8784915961970263`*^9},ExpressionUUID->"2193af42-f6fa-4053-ab61-\
729cff05f121"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "s"}], " ", "t"}], ")"}]], 
       RowBox[{"(", 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"n", "=", "0"}], "\[Infinity]"], 
         RowBox[{"(", 
          FractionBox[
           RowBox[{
            SuperscriptBox["3", 
             RowBox[{"-", "n"}]], 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"2", "n"}], ")"}], "!"}], 
            SuperscriptBox["t", "n"]}], 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"n", "!"}], ")"}], "3"]], ")"}]}], ")"}]}], ")"}], 
     RowBox[{"\[DifferentialD]", "t"}]}]}], ",", 
   RowBox[{"s", "->", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784918061784415`*^9, 3.8784918147620707`*^9}},
 CellLabel->
  "In[611]:=",ExpressionUUID->"9ae013d7-b10b-4332-b9f9-cf861e93c728"],

Cell[BoxData["Undefined"], "Output",
 CellChangeTimes->{3.878491826393015*^9},
 CellLabel->
  "Out[611]=",ExpressionUUID->"b7907e38-4835-4bc1-a6c1-ee98372cdacc"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{{3.878491141963334*^9, 
  3.878491149469386*^9}},ExpressionUUID->"441c75c9-6428-4087-877f-\
4c656ce1f6aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.8", "Section",
 CellChangeTimes->{{3.878491155057666*^9, 
  3.8784911557138143`*^9}},ExpressionUUID->"c97f7cad-5a14-4be8-83bf-\
282064f42ddb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   FractionBox[
    SuperscriptBox["n", "5"], 
    SuperscriptBox["5", "n"]], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784918404311514`*^9, 3.8784918484813776`*^9}},
 CellLabel->
  "In[612]:=",ExpressionUUID->"30b21fc3-e43d-4150-91c2-6758c3d11145"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "5"], ",", 
   FractionBox["32", "25"], ",", 
   FractionBox["243", "125"], ",", 
   FractionBox["1024", "625"], ",", "1", ",", 
   FractionBox["7776", "15625"], ",", 
   FractionBox["16807", "78125"], ",", 
   FractionBox["32768", "390625"], ",", 
   FractionBox["59049", "1953125"], ",", 
   FractionBox["32", "3125"], ",", 
   FractionBox["161051", "48828125"], ",", 
   FractionBox["248832", "244140625"], ",", 
   FractionBox["371293", "1220703125"], ",", 
   FractionBox["537824", "6103515625"], ",", 
   FractionBox["243", "9765625"], ",", 
   FractionBox["1048576", "152587890625"], ",", 
   FractionBox["1419857", "762939453125"], ",", 
   FractionBox["1889568", "3814697265625"], ",", 
   FractionBox["2476099", "19073486328125"], ",", 
   FractionBox["1024", "30517578125"]}], "}"}]], "Output",
 CellChangeTimes->{3.8784918489345493`*^9},
 CellLabel->
  "Out[612]=",ExpressionUUID->"8881253f-ca29-4200-a2ce-e757bec90c6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Accumulate", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    FractionBox[
     SuperscriptBox["n", "5"], 
     SuperscriptBox["5", "n"]], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "20"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.878491854091731*^9, 3.87849185590174*^9}},
 CellLabel->
  "In[613]:=",ExpressionUUID->"fecb3e9a-ab6c-4c9c-a86b-0bf1d386bdc4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "5"], ",", 
   FractionBox["37", "25"], ",", 
   FractionBox["428", "125"], ",", 
   FractionBox["3164", "625"], ",", 
   FractionBox["3789", "625"], ",", 
   FractionBox["102501", "15625"], ",", 
   FractionBox["529312", "78125"], ",", 
   FractionBox["2679328", "390625"], ",", 
   FractionBox["13455689", "1953125"], ",", 
   FractionBox["13475689", "1953125"], ",", 
   FractionBox["337053276", "48828125"], ",", 
   FractionBox["1685515212", "244140625"], ",", 
   FractionBox["8427947353", "1220703125"], ",", 
   FractionBox["42140274589", "6103515625"], ",", 
   FractionBox["42140426464", "6103515625"], ",", 
   FractionBox["1053511710176", "152587890625"], ",", 
   FractionBox["5267559970737", "762939453125"], ",", 
   FractionBox["26337801743253", "3814697265625"], ",", 
   FractionBox["131689011192364", "19073486328125"], ",", 
   FractionBox["131689011832364", "19073486328125"]}], "}"}]], "Output",
 CellChangeTimes->{3.8784918562924356`*^9},
 CellLabel->
  "Out[613]=",ExpressionUUID->"c2afa8b2-6aca-45cc-8e05-c1c5350d101a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox["n", "5"], 
   SuperscriptBox["5", "n"]]}]], "Input",
 CellChangeTimes->{{3.8784918800355825`*^9, 3.878491893501789*^9}},
 CellLabel->
  "In[614]:=",ExpressionUUID->"de526740-219f-4946-a995-b5579a4c1bf2"],

Cell[BoxData[
 FractionBox["3535", "512"]], "Output",
 CellChangeTimes->{3.878491894892412*^9},
 CellLabel->
  "Out[614]=",ExpressionUUID->"61ecfb45-bbfc-4865-a17c-9a03d8f123a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  FractionBox["3535", "512"], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[615]:=",ExpressionUUID->"a78f8a9b-84da-4852-82ca-3a8245446004"],

Cell[BoxData["6.904296875`"], "Output",
 CellChangeTimes->{3.8784918971703663`*^9},
 CellLabel->
  "Out[615]=",ExpressionUUID->"097b3433-0270-4441-8a5e-432e0fa05c74"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TeXForm", "[", 
  RowBox[{"Hold", "@", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"n", "=", "1"}], "\[Infinity]"], 
    FractionBox[
     SuperscriptBox["n", "5"], 
     SuperscriptBox["5", "n"]]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784918994515886`*^9, 3.8784919059366055`*^9}},
 CellLabel->
  "In[616]:=",ExpressionUUID->"201844d4-19d1-4a23-aa21-a25b19983d18"],

Cell["\<\
\\text{Hold}\\left[\\sum _{n=1}^{\\infty } \\frac{n^5}{5^n}\\right]\
\>", "Output",
 CellChangeTimes->{3.8784919064835033`*^9},
 CellLabel->
  "Out[616]//TeXForm=",ExpressionUUID->"c2bc58ae-872f-4a97-8a54-81a69be38216"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\\left[\\sum _{n=1}^{\\infty } \\frac{n^5}{5^n}\\right", \
"WolframAlphaLong",
 CellChangeTimes->{3.878491875008353*^9, 3.878491910700189*^9},
 CellLabel->
  "In[617]:=",ExpressionUUID->"83e6b760-5981-473c-9d5c-6a8fc94e62ab"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "\\left[\\sum _{n=1}^{\\infty } \\frac{n^5}{5^n}\\right", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {
     "SumConvergence__Show tests", "SumConvergence__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Infinite sum", "scanner" -> "Sum", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sum[n^5/5^n, {n, 1, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              RowBox[{
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    SuperscriptBox["n", "5"], 
                    SuperscriptBox["5", "n"]]}], ScriptLevel -> 0, 
                   StripOnInput -> False], HoldForm], TraditionalForm], 
                "\[LongEqual]", 
                TagBox[
                 FractionBox["3535", "512"], Identity], "\[TildeTilde]", 
                TagBox["6.904296875`", Identity]}]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Sum convergence", "scanner" -> "Sum", "id" -> 
     "SumConvergence", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"SumConvergence[n^5/5^n, n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  TagBox[
                   TagBox[
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    SuperscriptBox["n", "5"], 
                    SuperscriptBox["5", "n"]]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], TraditionalForm], 
                    HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], 
                  TemplateBox[{6}, "Spacer1"], "\"converges\""}, 
                 "RowDefault"]}, {
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"convergence test\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    PaneBox[
                    "\"result\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]]}, {
                    "\"ratio\"", "\"series converges absolutely\""}, {
                    "\"root\"", "\"series converges absolutely\""}, {
                    "\"integral\"", "\"series converges\""}, {"\"limit\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 
                    2} -> {Center, Baseline}}}, AutoDelete -> False, 
                   GridBoxBackground -> {
                    "Columns" -> {{None}}, "Rows" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Use the ratio test to determine the convergence of the \
series\""}, "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", "n", "\[Infinity]"], 
                    TagBox[
                    FractionBox[
                    SuperscriptBox["n", "5"], 
                    SuperscriptBox["5", "n"]], HoldForm]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], TraditionalForm]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"The \"", "\"convergence \"", "\"of \"", "\"a \"", 
                    "\"series \"", 
                    TemplateBox[{
                    FormBox[
                    TemplateBox[{
                    TemplateBox[{
                    UnderoverscriptBox["\"\[Sum]\"", "n", "\[Infinity]"], 
                    TemplateBox[{"a", "n"}, "IndexedDefault"]}, 
                    "RowDefault"]}, "RowDefault"], TraditionalForm], "\" \""},
                     "RowDefault"], "\"can \"", "\"be \"", "\"determined \"", 
                    "\"by \"", "\"examining \"", "\"the \"", "\"quantity \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{"\[Rho]", "\[LongEqual]", 
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    FractionBox[
                    SubscriptBox["a", 
                    TagBox[
                    RowBox[{"n", "+", "1"}], HoldForm]], 
                    SubscriptBox["a", "n"]]}, "Abs"], "n", "\[Infinity]"}, 
                    "Limit2Arg", SyntaxForm -> Limit, 
                    DisplayFunction -> (RowBox[{
                    TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                    InterpretationFunction -> (RowBox[{"Limit", "[", 
                    RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], ScriptLevel -> 0, 
                    StripOnInput -> False]}], HoldForm], "\" \""}, 
                    "RowDefault"], "\"using \"", "\"the \"", "\"following \"",
                     "\"comparisons\""}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"If \"", 
                    TemplateBox[{
                    RowBox[{"\[Rho]", "<", "1"}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"the \"", "\"series \"", 
                    "\"converges \"", "\"absolutely.\""}, "RowDefault"]}, {
                    TemplateBox[{"\"If \"", 
                    TemplateBox[{
                    RowBox[{"\[Rho]", ">", "1"}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"the \"", "\"series \"", 
                    "\"diverges.\""}, "RowDefault"]}, {
                    TemplateBox[{"\"If \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{"\[Rho]", "\[LongEqual]", "1"}], HoldForm], 
                    "\",\"", "\" \""}, "RowDefault"], "\"the \"", 
                    "\"series \"", "\"may \"", "\"converge \"", "\"or \"", 
                    "\"diverge \"", "\"and \"", "\"the \"", "\"test \"", 
                    "\"is \"", "\"inconclusive.\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Take \"", "\"the \"", "\"limit \"", "\"as \"", 
                    TemplateBox[{"n", "\" \""}, "RowDefault"], 
                    "\"approaches \"", "\"\[Infinity] \"", "\"of \"", 
                    TemplateBox[{
                    FractionBox[
                    TagBox[
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"n", "+", "1"}], HoldForm], ")"}], "5"], 
                    SuperscriptBox["5", 
                    TagBox[
                    RowBox[{"n", "+", "1"}], HoldForm]]], HoldForm], 
                    TagBox[
                    FractionBox[
                    SuperscriptBox["n", "5"], 
                    SuperscriptBox["5", "n"]], HoldForm]]}, "Abs"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    FractionBox[
                    TagBox[
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"n", "+", "1"}], HoldForm], ")"}], "5"], 
                    SuperscriptBox["5", 
                    TagBox[
                    RowBox[{"n", "+", "1"}], HoldForm]]], HoldForm], 
                    TagBox[
                    FractionBox[
                    SuperscriptBox["n", "5"], 
                    SuperscriptBox["5", "n"]], HoldForm]]}, "Abs"], "n", 
                    "\[Infinity]"}, "Limit2Arg", SyntaxForm -> Limit, 
                    DisplayFunction -> (RowBox[{
                    TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                    InterpretationFunction -> (RowBox[{"Limit", "[", 
                    RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], ScriptLevel -> 0, 
                    StripOnInput -> False], "\[LongEqual]", 
                    FractionBox["1", "5"]}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Since \"", "\"the \"", "\"limit \"", "\"is \"", 
                    "\"less \"", "\"than \"", "\"1, \"", "\"the \"", 
                    "\"series \"", 
                    TemplateBox[{
                    FormBox[
                    TemplateBox[{
                    TemplateBox[{
                    UnderoverscriptBox["\"\[Sum]\"", "n", "\[Infinity]"], 
                    TagBox[
                    FractionBox[
                    SuperscriptBox["n", "5"], 
                    SuperscriptBox["5", "n"]], HoldForm]}, "RowDefault"]}, 
                    "RowDefault"], TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"converges \"", "\"absolutely\""}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Roboto", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"series \"", "\"is \"", "\"absolutely \"", 
                    "\"convergent \"", "\"by \"", "\"the \"", "\"ratio \"", 
                    "\"test.\""}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Hide tests", "input" -> "SumConvergence__Hide tests"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Ratio Test", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Ratio Test", "input" -> 
           "SumConvergence__Ratio Test"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Root Test", "input" -> "SumConvergence__Root Test"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Integral Test", "input" -> 
           "SumConvergence__Integral Test"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Limit Test (inconclusive)", "input" -> 
           "SumConvergence__Limit Test (inconclusive)"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "SumConvergence__Hide steps"}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Partial sum formula", "scanner" -> "Sum", "id" -> 
     "PartialSumFormula", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "k"], 
                    FractionBox[
                    SuperscriptBox["n", "5"], 
                    SuperscriptBox["5", "n"]]}], ScriptLevel -> 0, 
                   StripOnInput -> False], HoldForm], TraditionalForm], 
                HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "512"], " ", 
                SuperscriptBox["5", 
                 RowBox[{"-", "k"}]], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"128"}], " ", 
                    SuperscriptBox["k", "5"]}]}], "-", 
                    RowBox[{"800", " ", 
                    SuperscriptBox["k", "4"]}], "-", 
                    RowBox[{"2400", " ", 
                    SuperscriptBox["k", "3"]}], "-", 
                    RowBox[{"4600", " ", 
                    SuperscriptBox["k", "2"]}], "-", 
                    RowBox[{"5700", " ", "k"}], "+", 
                    RowBox[{"707", " ", 
                    SuperscriptBox["5", 
                    RowBox[{"k", "+", "1"}]]}], "-", "3535"}], ")"}]}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"ListLinePlot[Accumulate[Table[k^5/5^k, {k, 1, 6}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 
                 LineBox[{{1., 0.2}, {2., 1.48}, {3.0000000000000004`, 
                  3.424}, {4., 5.0624}, {5.000000000000001, 6.0624}, {6., 
                  6.560064}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{1., 0.2}}, {{2., 
                  1.48}}, {{3.0000000000000004`, 3.424}}, {{4., 5.0624}}, {{
                  5.000000000000001, 6.0624}}, {{6., 6.560064}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}}, {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox["k", TraditionalForm], 
                FormBox[
                 SubscriptBox["\"S\"", "k"], TraditionalForm]}, 
              AxesOrigin -> {1., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{0, 6.}, {0., 6.560064}},
               PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show points", "input" -> 
         "PartialSums__Show points"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "delimiters", {
       "text" -> 
        "An attempt was made to fix mismatched parentheses, brackets, or \
braces."}, {}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True],
    Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "4", "datatypes" -> "Sum", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.616", "parsetiming" -> "0.684", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP3849240eggecicga979e000025cac7eah3d3b970", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "3", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa3850240eggecicga979e00004i608f591660fb8i3629183885576317489", "version" -> 
    "2.6", "inputstring" -> "[sum  _(n=1)^\[Infinity] ((n^5)/(5^n))"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 51, 53.6689352`9.48229782350351}, "Line" -> 
    617, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = 
   "\\left[\\sum _{n=1}^{\\infty } \\frac{n^5}{5^n}\\right"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1081., {597.3544921875, 602.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.878491913731449*^9},ExpressionUUID->"c4415258-9a27-4558-8eaa-\
44be0a48e3f6"]
}, Open  ]],

Cell["C", "Text",
 CellChangeTimes->{
  3.878491160972063*^9},ExpressionUUID->"fb3ab9d7-6cf9-41d3-b801-\
07a5b5a62101"]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.9", "Section",
 CellChangeTimes->{{3.878491165550185*^9, 
  3.8784911663469973`*^9}},ExpressionUUID->"f843f2bb-bc29-4756-8aef-\
4890d6cb97a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   FractionBox[
    SuperscriptBox["n", "n"], 
    RowBox[{"n", "!"}]], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878491947032442*^9, 3.878491953576585*^9}},
 CellLabel->
  "In[618]:=",ExpressionUUID->"8ff0881a-990d-447b-8638-d356a9c0454a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", 
   FractionBox["9", "2"], ",", 
   FractionBox["32", "3"], ",", 
   FractionBox["625", "24"], ",", 
   FractionBox["324", "5"], ",", 
   FractionBox["117649", "720"], ",", 
   FractionBox["131072", "315"], ",", 
   FractionBox["4782969", "4480"], ",", 
   FractionBox["1562500", "567"], ",", 
   FractionBox["25937424601", "3628800"], ",", 
   FractionBox["35831808", "1925"], ",", 
   FractionBox["23298085122481", "479001600"], ",", 
   FractionBox["110730297608", "868725"], ",", 
   FractionBox["4805419921875", "14350336"], ",", 
   FractionBox["562949953421312", "638512875"], ",", 
   FractionBox["48661191875666868481", "20922789888000"], ",", 
   FractionBox["91507169819844", "14889875"], ",", 
   FractionBox["104127350297911241532841", "6402373705728000"], ",", 
   FractionBox["640000000000000000", "14849255421"]}], "}"}]], "Output",
 CellChangeTimes->{3.8784919539359426`*^9},
 CellLabel->
  "Out[618]=",ExpressionUUID->"46cb01da-aa14-42c3-a52e-bb1162169188"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "@", 
  RowBox[{"Table", "[", 
   RowBox[{
    FractionBox[
     SuperscriptBox["n", "n"], 
     RowBox[{"n", "!"}]], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "20"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8784919564498*^9, 3.878491957277943*^9}},
 CellLabel->
  "In[619]:=",ExpressionUUID->"b0104ac1-9907-4e6d-b243-70296e74ee1a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.`", ",", "2.`", ",", "4.5`", ",", "10.666666666666666`", ",", 
   "26.041666666666668`", ",", "64.8`", ",", "163.4013888888889`", ",", 
   "416.1015873015873`", ",", "1067.6270089285715`", ",", 
   "2755.731922398589`", ",", "7147.658895778219`", ",", 
   "18613.926233766233`", ",", "48638.8461384701`", ",", 
   "127463.00337621226`", ",", "334864.627690599`", ",", "881657.9515664614`",
    ",", "2.32575063536703`*^6", ",", "6.145596911985091`*^6", ",", 
   "1.6263866353935543`*^7", ",", "4.309980412182177`*^7"}], "}"}]], "Output",
 CellChangeTimes->{3.8784919577467403`*^9},
 CellLabel->
  "Out[619]=",ExpressionUUID->"f294a684-80c5-4199-ac8a-f0721a279d4f"]
}, Open  ]],

Cell["It fails the preliminary test.", "Text",
 CellChangeTimes->{{3.8784919592310276`*^9, 
  3.878491967567986*^9}},ExpressionUUID->"48e4af5b-32fc-43b3-9b9a-\
292c81a4cd9c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox["n", "n"], 
   RowBox[{"n", "!"}]]}]], "Input",
 CellChangeTimes->{{3.8784919821809273`*^9, 3.8784919938511353`*^9}},
 CellLabel->
  "In[620]:=",ExpressionUUID->"b84693b0-6573-4cc8-ae3f-5a1c0f84d3dc"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 620, 103, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.878491995210465*^9},
 CellLabel->
  "During evaluation of \
In[620]:=",ExpressionUUID->"6fb22b64-202c-4e73-9321-91f9ed2f096e"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "1"}], "\[Infinity]"], 
  FractionBox[
   SuperscriptBox["n", "n"], 
   RowBox[{"n", "!"}]]}]], "Output",
 CellChangeTimes->{3.8784919954135933`*^9},
 CellLabel->
  "Out[620]=",ExpressionUUID->"158bcbfe-9346-494a-93a2-7497b1315ea2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TeXForm", "[", 
  RowBox[{"Hold", "@", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"n", "=", "1"}], "\[Infinity]"], 
    FractionBox[
     SuperscriptBox["n", "n"], 
     RowBox[{"n", "!"}]]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878491996918624*^9, 3.8784920019558244`*^9}},
 CellLabel->
  "In[621]:=",ExpressionUUID->"8e0f3699-6f98-46ba-8d60-a43956bfd9d7"],

Cell["\\text{Hold}\\left[\\sum _{n=1}^{\\infty } \\frac{n^n}{n!}\\right]", \
"Output",
 CellChangeTimes->{3.878492002690283*^9},
 CellLabel->
  "Out[621]//TeXForm=",ExpressionUUID->"510087c9-5039-4e5c-abd8-bfdc716b75e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\\left[\\sum _{n=1}^{\\infty } \\frac{n^n}{n!}\\right", \
"WolframAlphaLong",
 CellChangeTimes->{{3.8784920055964427`*^9, 3.8784920090495863`*^9}},
 CellLabel->
  "In[622]:=",ExpressionUUID->"84b92d36-d38d-4d8e-a6da-4f6e2357b946"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "\\left[\\sum _{n=1}^{\\infty } \\frac{n^n}{n!}\\right", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {
     "Result__Show tests", "Result__Step-by-step solution", 
      "Result__Root Test"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Infinite sum", "scanner" -> "Sum", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"SumConvergence[n^n/n!, n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  TagBox[
                   TagBox[
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    SuperscriptBox["n", "n"], 
                    RowBox[{"n", "!"}]]}], ScriptLevel -> 0, StripOnInput -> 
                    False], HoldForm], TraditionalForm], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], 
                  TemplateBox[{6}, "Spacer1"], "\"diverges\""}, 
                 "RowDefault"]}, {
                StyleBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    PaneBox[
                    "\"convergence test\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]], 
                    TagBox[
                    PaneBox[
                    "\"result\"", 
                    BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                    $CellContext`TagBoxWrapper["Label"]]}, {
                    "\"limit\"", "\"series diverges\""}, {
                    "\"ratio\"", "\"series diverges\""}, {
                    "\"root\"", "\"series diverges\""}, {"\"integral\"", 
                    StyleBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", "\"inconclusive\"", "\[NoBreak]", 
                    "\")\""}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}}, GridBoxAlignment -> {
                    "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}, 
                    "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 
                    2} -> {Center, Baseline}}}, AutoDelete -> False, 
                   GridBoxBackground -> {
                    "Columns" -> {{None}}, "Rows" -> {None, None}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, FrameStyle -> 
                   GrayLevel[0.84], BaselinePosition -> Automatic, 
                   AllowScriptLevelChange -> False], "Grid"], 
                 LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
                 False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Use the root test to determine the convergence of the \
series\""}, "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    FormBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", "n", "\[Infinity]"], 
                    TagBox[
                    FractionBox[
                    SuperscriptBox["n", "n"], 
                    RowBox[{"n", "!"}]], HoldForm]}], ScriptLevel -> 0, 
                    StripOnInput -> False], HoldForm], TraditionalForm]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"The \"", "\"convergence \"", "\"of \"", "\"a \"", 
                    "\"series \"", 
                    TemplateBox[{
                    FormBox[
                    TemplateBox[{
                    TemplateBox[{
                    UnderoverscriptBox["\"\[Sum]\"", "k", "\[Infinity]"], 
                    TemplateBox[{"a", "k"}, "IndexedDefault"]}, 
                    "RowDefault"]}, "RowDefault"], TraditionalForm], "\" \""},
                     "RowDefault"], "\"can \"", "\"be \"", "\"determined \"", 
                    "\"by \"", "\"examining \"", "\"the \"", "\"quantity \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{"\[Rho]", "\[LongEqual]", 
                    StyleBox[
                    TemplateBox[{
                    RadicalBox[
                    TemplateBox[{
                    SubscriptBox["a", "k"]}, "Abs"], "k"], "k", 
                    "\[Infinity]"}, "Limit2Arg", SyntaxForm -> Limit, 
                    DisplayFunction -> (RowBox[{
                    TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                    InterpretationFunction -> (RowBox[{"Limit", "[", 
                    RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], ScriptLevel -> 0, 
                    StripOnInput -> False]}], HoldForm], "\" \""}, 
                    "RowDefault"], "\"using \"", "\"the \"", "\"following \"",
                     "\"comparisons\""}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"If \"", 
                    TemplateBox[{
                    RowBox[{"\[Rho]", "<", "1"}], "\",\"", "\" \""}, 
                    "RowDefault"], "\"the \"", "\"series \"", 
                    "\"converges \"", "\"absolutely.\""}, "RowDefault"]}, {
                    TemplateBox[{"\"If \"", 
                    TemplateBox[{
                    RowBox[{"\[Rho]", ">", "1"}], "\" \""}, "RowDefault"], 
                    "\"or \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{"\[Rho]", "\[LongEqual]", "\[Infinity]"}], 
                    HoldForm], "\",\"", "\" \""}, "RowDefault"], "\"the \"", 
                    "\"series \"", "\"diverges.\""}, "RowDefault"]}, {
                    TemplateBox[{"\"If \"", 
                    TemplateBox[{
                    TagBox[
                    RowBox[{"\[Rho]", "\[LongEqual]", "1"}], HoldForm], 
                    "\",\"", "\" \""}, "RowDefault"], "\"the \"", 
                    "\"series \"", "\"may \"", "\"converge \"", "\"or \"", 
                    "\"diverge \"", "\"and \"", "\"the \"", "\"test \"", 
                    "\"is \"", "\"inconclusive.\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                    "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Take \"", "\"the \"", "\"limit \"", "\"of \"", 
                    "\"the \"", 
                    
                    TemplateBox[{"n", "\"\[Hyphen]th\"", "\" \""}, 
                    "RowDefault"], "\"root \"", "\"of \"", "\"the \"", 
                    "\"absolute \"", "\"value \"", "\"of \"", "\"the \"", 
                    
                    TemplateBox[{"n", "\"\[Hyphen]th\"", "\" \""}, 
                    "RowDefault"], "\"term.\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    RadicalBox[
                    TemplateBox[{
                    FractionBox[
                    SuperscriptBox["n", "n"], 
                    RowBox[{"n", "!"}]]}, "Abs"], "n"], HoldForm], "n", 
                    "\[Infinity]"}, "Limit2Arg", SyntaxForm -> Limit, 
                    DisplayFunction -> (RowBox[{
                    TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                    InterpretationFunction -> (RowBox[{"Limit", "[", 
                    RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], ScriptLevel -> 0, 
                    StripOnInput -> False], "\[LongEqual]", 
                    "\[ExponentialE]"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Since \"", "\"the \"", "\"limit \"", "\"is \"", 
                    "\"greater \"", "\"than \"", "\"1, \"", "\"the \"", 
                    "\"series \"", 
                    TemplateBox[{
                    FormBox[
                    TemplateBox[{
                    TemplateBox[{
                    UnderoverscriptBox["\"\[Sum]\"", "n", "\[Infinity]"], 
                    TagBox[
                    FractionBox[
                    SuperscriptBox["n", "n"], 
                    RowBox[{"n", "!"}]], HoldForm]}, "RowDefault"]}, 
                    "RowDefault"], TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"diverges\""}, "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Roboto", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    
                    TemplateBox[{
                    "\"The \"", "\"series \"", "\"is \"", "\"divergent \"", 
                    "\"by \"", "\"the \"", "\"root \"", "\"test.\""}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}], 
       XMLElement["infos", {"count" -> "2"}, {
         XMLElement["info", {"text" -> "n! is the factorial function"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/Factorial.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Hide tests", "input" -> "Result__Hide tests"}, {}], 
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Root Test", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Limit Test", "input" -> "Result__Limit Test"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Ratio Test", "input" -> "Result__Ratio Test"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Root Test", "input" -> "Result__Root Test"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Integral Test (inconclusive)", "input" -> 
           "Result__Integral Test (inconclusive)"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"ListLinePlot[Accumulate[Table[k^k/k!, {k, 1, 6}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 
                 LineBox[{{1., 1.}, {2., 3.}, {3.0000000000000004`, 7.5}, {4.,
                   18.166666666666668`}, {5.000000000000001, 
                  44.208333333333336`}, {6., 109.00833333333334`}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{1., 1.}}, {{2., 3.}}, {{
                  3.0000000000000004`, 7.5}}, {{4., 18.166666666666668`}}, {{
                  5.000000000000001, 44.208333333333336`}}, {{6., 
                  109.00833333333334`}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}}, {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox["k", TraditionalForm], 
                FormBox[
                 SubscriptBox["\"S\"", "k"], TraditionalForm]}, 
              AxesOrigin -> {1., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{0, 6.}, {0., 109.00833333333334`}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show points", "input" -> 
         "PartialSums__Show points"}, {}]}]}], Typeset`pod3$$, Typeset`pod4$$,
    Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "delimiters", {
       "text" -> 
        "An attempt was made to fix mismatched parentheses, brackets, or \
braces."}, {}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True],
    Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "2", "datatypes" -> "Sum", "timedout" -> "Sum", 
     "timedoutpods" -> "", "timing" -> "2.207", "parsetiming" -> "0.665", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa225419d26fifiacb249400002ac7g3aeii3i7fd71697175660060143921", "id" -> 
     "MSP225519d26fifiacb249400000i135ff8g0d483g3", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa225619d26fifiacb249400000ec35acaai72dbei1697175660060143921", "version" -> 
     "2.6", "inputstring" -> "[sum  _(n=1)^\[Infinity] ((n^n)/(n!))"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "Sum", "timedout" -> "", 
     "timedoutpods" -> "", "timing" -> "1.47", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "15", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> "", 
     "version" -> "2.6", "inputstring" -> 
     "[sum  _(n=1)^\[Infinity] ((n^n)/(n!))"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 53, 32.7952392`9.268385704760332}, "Line" -> 
    622, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "\\left[\\sum _{n=1}^{\\infty } \\frac{n^n}{n!}\\right"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1081., {487.3544921875, 492.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa225419d26fifiacb249400002ac7g3aeii3i7fd71697175660060143921", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8784920129358697`*^9},ExpressionUUID->"cd52a344-978c-4f30-b252-\
aa0d85edccfd"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.8784911683814497`*^9},ExpressionUUID->"e83cb613-6911-4819-801b-\
60fe1b309457"]
}, Open  ]],

Cell[CellGroupData[{

Cell["9.10", "Section",
 CellChangeTimes->{{3.878491173600741*^9, 
  3.878491175378173*^9}},ExpressionUUID->"295eddcd-7110-448b-8eb7-\
96c6bbe894a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "n"], 
    FractionBox["n", 
     RowBox[{"n", "-", "1"}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "2", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784920600238495`*^9, 3.87849208280756*^9}},
 CellLabel->
  "In[624]:=",ExpressionUUID->"6cf60e77-2242-411c-95ba-00dd500b7c1f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", 
   RowBox[{"-", 
    FractionBox["3", "2"]}], ",", 
   FractionBox["4", "3"], ",", 
   RowBox[{"-", 
    FractionBox["5", "4"]}], ",", 
   FractionBox["6", "5"], ",", 
   RowBox[{"-", 
    FractionBox["7", "6"]}], ",", 
   FractionBox["8", "7"], ",", 
   RowBox[{"-", 
    FractionBox["9", "8"]}], ",", 
   FractionBox["10", "9"], ",", 
   RowBox[{"-", 
    FractionBox["11", "10"]}], ",", 
   FractionBox["12", "11"], ",", 
   RowBox[{"-", 
    FractionBox["13", "12"]}], ",", 
   FractionBox["14", "13"], ",", 
   RowBox[{"-", 
    FractionBox["15", "14"]}], ",", 
   FractionBox["16", "15"], ",", 
   RowBox[{"-", 
    FractionBox["17", "16"]}], ",", 
   FractionBox["18", "17"], ",", 
   RowBox[{"-", 
    FractionBox["19", "18"]}], ",", 
   FractionBox["20", "19"]}], "}"}]], "Output",
 CellChangeTimes->{{3.878492074267129*^9, 3.8784920832450633`*^9}},
 CellLabel->
  "Out[624]=",ExpressionUUID->"0feea876-04e2-4fd4-b8de-6c9bac270055"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "2"}], "\[Infinity]"], 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "n"], 
   FractionBox["n", 
    RowBox[{"n", "-", "1"}]]}]}]], "Input",
 CellChangeTimes->{{3.878492097400015*^9, 3.8784921122422075`*^9}},
 CellLabel->
  "In[626]:=",ExpressionUUID->"f2255206-d2f9-42ea-85ba-4afa5d2e6f62"],

Cell[BoxData[
 TemplateBox[{
  "Sum", "div", "\"Sum does not converge.\"", 2, 626, 106, 
   16944803280185088864, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.8784921047999644`*^9, 3.8784921129522543`*^9}},
 CellLabel->
  "During evaluation of \
In[626]:=",ExpressionUUID->"b5e5e881-e6a9-4628-8b47-5fee162c7d72"],

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "2"}], "\[Infinity]"], 
  FractionBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "n"], " ", "n"}], 
   RowBox[{
    RowBox[{"-", "1"}], "+", "n"}]]}]], "Output",
 CellChangeTimes->{{3.8784921050187054`*^9, 3.878492113171004*^9}},
 CellLabel->
  "Out[626]=",ExpressionUUID->"ee1ea422-ac48-48d0-a8a2-71fa8bbce9da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TeXForm", "[", 
  RowBox[{"Hold", "@", 
   RowBox[{
    UnderoverscriptBox["\[Sum]", 
     RowBox[{"n", "=", "2"}], "\[Infinity]"], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "n"], 
     FractionBox["n", 
      RowBox[{"n", "-", "1"}]]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8784921158089495`*^9, 3.878492119729393*^9}},
 CellLabel->
  "In[627]:=",ExpressionUUID->"173156e3-77f2-43cd-8d08-7cb5386acf82"],

Cell["\<\
\\text{Hold}\\left[\\sum _{n=2}^{\\infty } \\frac{(-1)^n n}{n-1}\\right]\
\>", "Output",
 CellChangeTimes->{3.878492120463681*^9},
 CellLabel->
  "Out[627]//TeXForm=",ExpressionUUID->"eb571bb3-6041-4885-8cfc-830fde0a6ef7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\\left[\\sum _{n=2}^{\\infty } \\frac{(-1)^n n}{n-1}\\right", \
"WolframAlphaLong",
 CellChangeTimes->{{3.8784921228159575`*^9, 3.878492126831707*^9}},
 CellLabel->
  "In[628]:=",ExpressionUUID->"617508ca-c0c1-46fb-a995-6a8ede81973e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "\\left[\\sum _{n=2}^{\\infty } \\frac{(-1)^n n}{n-1}\\right", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Infinite sum", "scanner" -> "Sum", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"SumConvergence[((-1)^n n)/(n - 1), n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox[
               TagBox[
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "2"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "n"], " ", "n"}], 
                    RowBox[{"n", "-", "1"}]]}], ScriptLevel -> 0, 
                   StripOnInput -> False], HoldForm], TraditionalForm], 
                HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
              TemplateBox[{6}, "Spacer1"], "\"diverges\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Show tests", "input" -> "Result__Show tests"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Partial sum formula", "scanner" -> "Sum", "id" -> 
     "PartialSumFormula", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TagBox[
                FormBox[
                 TagBox[
                  StyleBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"n", "=", "2"}], "k"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "n"], " ", "n"}], 
                    RowBox[{"n", "-", "1"}]]}], ScriptLevel -> 0, 
                   StripOnInput -> False], HoldForm], TraditionalForm], 
                HoldForm], PolynomialForm[#, TraditionalOrder -> False]& ], 
              "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    TemplateBox[{
                    RowBox[{"-", "1"}], "1", "k"}, "LerchPhi"]}], "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], "+", "1", "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", "2", ")"}]}]}], ")"}]}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {
        "text" -> "\[CapitalPhi](x, s, a) is the Lerch transcendent"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/LerchPhi.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ZetaFunctionsandPolylogarithms/\
LerchPhi", "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/LerchTranscendent.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[Accumulate[Table[((-1)^k k)/(k - 1), {k, 2, 7}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 
                 LineBox[{{2., 2.}, {3., 0.5}, {4., 1.8333333333333333`}, {
                  5.000000000000001, 0.5833333333333334}, {6., 
                  1.7833333333333334`}, {7., 0.6166666666666667}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{2., 2.}}, {{3., 0.5}}, {{
                  4., 1.8333333333333333`}}, {{5.000000000000001, 
                  0.5833333333333334}}, {{6., 1.7833333333333334`}}, {{7., 
                  0.6166666666666667}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}}, {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox["k", TraditionalForm], 
                FormBox[
                 SubscriptBox["\"S\"", "k"], TraditionalForm]}, 
              AxesOrigin -> {2., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{2., 7.}, {0., 2.}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show points", "input" -> 
         "PartialSums__Show points"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["warnings", {"count" -> "1"}, {
      XMLElement[
      "delimiters", {
       "text" -> 
        "An attempt was made to fix mismatched parentheses, brackets, or \
braces."}, {}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[
   False], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "Sum", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "2.348", "parsetiming" -> "0.798", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP5501hgig0e192a3ih65000060eh63i5a29f85f3", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "12", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5511hgig0e192a3ih6500000eegd75d7b2b8253822558548030476863", "version" -> 
    "2.6", "inputstring" -> "[sum  _(n=2)^\[Infinity] (((-1)^n n)/(n-1))"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 26, 17, 55, 30.581567`9.238034642236965}, "Line" -> 
    628, "SessionID" -> 16944803280185088864}, Typeset`showpods$$ = {1, 2, 3},
    Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "\\left[\\sum _{n=2}^{\\infty } \\frac{(-1)^n n}{n-1}\\right"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1081., {234.3544921875, 239.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.878492130628451*^9},ExpressionUUID->"51ffc778-8d19-4316-a634-\
e0694297e879"]
}, Open  ]],

Cell["D", "Text",
 CellChangeTimes->{
  3.8784911869991846`*^9},ExpressionUUID->"e32e7c0e-c530-484a-a5d8-\
e9f8ba0924a6"]
}, Open  ]]
},
WindowSize->{1152., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.2 for Microsoft Windows (64-bit) (November 18, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"1d9318be-ca7a-4a0c-a940-365b2e498b8c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 362, 7, 58, "Text",ExpressionUUID->"699ae89c-5509-46a2-ba44-b7bdd27d5dde"],
Cell[CellGroupData[{
Cell[945, 31, 152, 3, 67, "Section",ExpressionUUID->"d9244aae-49f3-4c7d-8abb-6f3434adc894"],
Cell[CellGroupData[{
Cell[1122, 38, 433, 13, 52, "Input",ExpressionUUID->"39af99e4-b332-45a9-8af2-8961158e3625"],
Cell[1558, 53, 314, 8, 28, "Message",ExpressionUUID->"a14d3c1d-1f9f-48d3-b5d8-9e242af4ac99"],
Cell[1875, 63, 435, 14, 56, "Output",ExpressionUUID->"05bcea36-d099-46c3-9807-fc0677e7b412"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2347, 82, 455, 14, 48, "Input",ExpressionUUID->"c7dc8d8b-32cc-4ef9-84cc-acd1e3260017"],
Cell[2805, 98, 556, 16, 48, "Output",ExpressionUUID->"a577cfc9-588b-46a5-b8e7-2b1afd2b6188"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3398, 119, 504, 15, 48, "Input",ExpressionUUID->"3ff5672d-29a1-475e-a2b7-a46bda042a2a"],
Cell[3905, 136, 607, 16, 48, "Output",ExpressionUUID->"95e90c81-731b-4656-8aa4-0da96172d494"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4549, 157, 549, 16, 41, "WolframAlphaLong",ExpressionUUID->"0f32ccfd-79b0-4860-9dca-004247fa4e63"],
Cell[5101, 175, 47018, 970, 1640, "Print",ExpressionUUID->"a5fdd0ff-0266-4c2a-a85c-a892990fc1aa"]
}, Open  ]],
Cell[52134, 1148, 121, 3, 35, "Text",ExpressionUUID->"96f99b90-1ad9-4c91-8916-fbec5c93d4be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52292, 1156, 150, 3, 67, "Section",ExpressionUUID->"953deb41-dbe9-40bb-bf69-d896e2fc3e1a"],
Cell[52445, 1161, 119, 3, 35, "Text",ExpressionUUID->"5ad44558-7bcb-4503-90a4-1b1f6dc98a27"],
Cell[CellGroupData[{
Cell[52589, 1168, 386, 11, 46, "Input",ExpressionUUID->"3ab2257c-d467-4ddf-b6b4-a1e0714725fb"],
Cell[52978, 1181, 1159, 38, 35, "Output",ExpressionUUID->"cacdecd7-19c1-46d3-a1ff-727cacbb9f5d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54174, 1224, 428, 12, 46, "Input",ExpressionUUID->"85aaae67-7a95-4348-8dd5-d5e5b21b2165"],
Cell[54605, 1238, 6464, 214, 133, "Output",ExpressionUUID->"7434c6bc-81c7-4e3e-ad90-f0a63c8297a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61106, 1457, 459, 13, 46, "Input",ExpressionUUID->"146f7c7c-c5d6-4e2a-b086-9c071f9ced6e"],
Cell[61568, 1472, 512, 10, 32, "Output",ExpressionUUID->"8ac08996-619c-4184-840b-dd884bffc797"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62117, 1487, 345, 9, 52, "Input",ExpressionUUID->"905c8498-18d4-489a-b75d-de82e483c70f"],
Cell[62465, 1498, 213, 5, 32, "Output",ExpressionUUID->"c364555f-5b1f-43a3-99e0-49a4361aa4b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62715, 1508, 220, 6, 28, "Input",ExpressionUUID->"e565543d-b9fd-4e1a-978d-d9f2111e670d"],
Cell[62938, 1516, 172, 3, 32, "Output",ExpressionUUID->"52961b66-dba1-4467-9957-fd6025618b52"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63147, 1524, 584, 14, 41, "WolframAlphaLong",ExpressionUUID->"dd3f6e40-1189-4768-bf76-ac028c18ca25"],
Cell[63734, 1540, 2765, 55, 101, "Print",ExpressionUUID->"dfad6311-fccc-47f5-92da-9f2a6d741006"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66536, 1600, 511, 12, 41, "WolframAlphaLong",ExpressionUUID->"d3d4f398-1074-410e-b9cf-acf1c785826e"],
Cell[67050, 1614, 3064, 58, 101, "Print",ExpressionUUID->"2eccb734-6763-4c0c-89f6-2326e69c4f71"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70151, 1677, 416, 11, 52, "Input",ExpressionUUID->"cc2e0283-41a0-4f28-b124-a15dcd277496"],
Cell[70570, 1690, 263, 5, 47, "Output",ExpressionUUID->"b8983118-8200-4e9c-ad8b-acc1916e954a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70870, 1700, 245, 4, 73, "WolframAlphaLong",ExpressionUUID->"e1839b0f-d4a2-4222-bc1b-7380c27b79de"],
Cell[71118, 1706, 37029, 771, 1114, "Print",ExpressionUUID->"a204246b-cfee-48e4-a42f-2fcedc50742c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[108196, 2483, 150, 3, 67, "Section",ExpressionUUID->"06eb3522-8b7c-422d-8128-852773711b58"],
Cell[CellGroupData[{
Cell[108371, 2490, 557, 17, 52, "Input",ExpressionUUID->"b6b409ca-8639-46cf-85e2-8c667e19446a"],
Cell[108931, 2509, 239, 5, 47, "Output",ExpressionUUID->"ac6be6e9-8695-47a9-b7cf-90a1230239e2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109207, 2519, 247, 4, 41, "WolframAlphaLong",ExpressionUUID->"25667ddf-0bb7-4269-9d74-930ddc44b3a8"],
Cell[109457, 2525, 30159, 594, 716, "Print",ExpressionUUID->"2193af42-f6fa-4053-ab61-729cff05f121"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139653, 3124, 1077, 32, 53, "Input",ExpressionUUID->"9ae013d7-b10b-4332-b9f9-cf861e93c728"],
Cell[140733, 3158, 161, 3, 32, "Output",ExpressionUUID->"b7907e38-4835-4bc1-a6c1-ee98372cdacc"]
}, Open  ]],
Cell[140909, 3164, 143, 3, 35, "Text",ExpressionUUID->"441c75c9-6428-4087-877f-4c656ce1f6aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[141089, 3172, 150, 3, 67, "Section",ExpressionUUID->"c97f7cad-5a14-4be8-83bf-282064f42ddb"],
Cell[CellGroupData[{
Cell[141264, 3179, 358, 10, 47, "Input",ExpressionUUID->"30b21fc3-e43d-4150-91c2-6758c3d11145"],
Cell[141625, 3191, 992, 24, 85, "Output",ExpressionUUID->"8881253f-ca29-4200-a2ce-e757bec90c6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[142654, 3220, 396, 11, 47, "Input",ExpressionUUID->"fecb3e9a-ab6c-4c9c-a86b-0bf1d386bdc4"],
Cell[143053, 3233, 1104, 25, 85, "Output",ExpressionUUID->"c2afa8b2-6aca-45cc-8e05-c1c5350d101a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144194, 3263, 338, 9, 53, "Input",ExpressionUUID->"de526740-219f-4946-a995-b5579a4c1bf2"],
Cell[144535, 3274, 178, 4, 48, "Output",ExpressionUUID->"61ecfb45-bbfc-4865-a17c-9a03d8f123a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144750, 3283, 184, 5, 45, "Input",ExpressionUUID->"a78f8a9b-84da-4852-82ca-3a8245446004"],
Cell[144937, 3290, 166, 3, 32, "Output",ExpressionUUID->"097b3433-0270-4441-8a5e-432e0fa05c74"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145140, 3298, 411, 11, 53, "Input",ExpressionUUID->"201844d4-19d1-4a23-aa21-a25b19983d18"],
Cell[145554, 3311, 229, 5, 47, "Output",ExpressionUUID->"c2bc58ae-872f-4a97-8a54-81a69be38216"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145820, 3321, 231, 4, 41, "WolframAlphaLong",ExpressionUUID->"83e6b760-5981-473c-9d5c-6a8fc94e62ab"],
Cell[146054, 3327, 36238, 740, 1210, "Print",ExpressionUUID->"c4415258-9a27-4558-8eaa-44be0a48e3f6"]
}, Open  ]],
Cell[182307, 4070, 119, 3, 35, "Text",ExpressionUUID->"fb3ab9d7-6cf9-41d3-b801-07a5b5a62101"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182463, 4078, 150, 3, 67, "Section",ExpressionUUID->"f843f2bb-bc29-4756-8aef-4890d6cb97a3"],
Cell[CellGroupData[{
Cell[182638, 4085, 348, 10, 47, "Input",ExpressionUUID->"8ff0881a-990d-447b-8638-d356a9c0454a"],
Cell[182989, 4097, 1034, 23, 85, "Output",ExpressionUUID->"46cb01da-aa14-42c3-a52e-bb1162169188"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184060, 4125, 375, 11, 47, "Input",ExpressionUUID->"b0104ac1-9907-4e6d-b243-70296e74ee1a"],
Cell[184438, 4138, 709, 13, 57, "Output",ExpressionUUID->"f294a684-80c5-4199-ac8a-f0721a279d4f"]
}, Open  ]],
Cell[185162, 4154, 174, 3, 35, "Text",ExpressionUUID->"48e4af5b-32fc-43b3-9b9a-292c81a4cd9c"],
Cell[CellGroupData[{
Cell[185361, 4161, 334, 9, 52, "Input",ExpressionUUID->"b84693b0-6573-4cc8-ae3f-5a1c0f84d3dc"],
Cell[185698, 4172, 312, 8, 28, "Message",ExpressionUUID->"6fb22b64-202c-4e73-9321-91f9ed2f096e"],
Cell[186013, 4182, 309, 9, 56, "Output",ExpressionUUID->"158bcbfe-9346-494a-93a2-7497b1315ea2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186359, 4196, 403, 11, 52, "Input",ExpressionUUID->"8e0f3699-6f98-46ba-8d60-a43956bfd9d7"],
Cell[186765, 4209, 220, 4, 47, "Output",ExpressionUUID->"510087c9-5039-4e5c-abd8-bfdc716b75e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187022, 4218, 236, 4, 73, "WolframAlphaLong",ExpressionUUID->"84b92d36-d38d-4d8e-a6da-4f6e2357b946"],
Cell[187261, 4224, 35771, 692, 990, "Print",ExpressionUUID->"cd52a344-978c-4f30-b252-aa0d85edccfd"]
}, Open  ]],
Cell[223047, 4919, 121, 3, 35, "Text",ExpressionUUID->"e83cb613-6911-4819-801b-60fe1b309457"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223205, 4927, 149, 3, 67, "Section",ExpressionUUID->"295eddcd-7110-448b-8eb7-96c6bbe894a0"],
Cell[CellGroupData[{
Cell[223379, 4934, 433, 13, 43, "Input",ExpressionUUID->"6cf60e77-2242-411c-95ba-00dd500b7c1f"],
Cell[223815, 4949, 991, 32, 48, "Output",ExpressionUUID->"0feea876-04e2-4fd4-b8de-6c9bac270055"]
}, Open  ]],
Cell[CellGroupData[{
Cell[224843, 4986, 403, 12, 52, "Input",ExpressionUUID->"f2255206-d2f9-42ea-85ba-4afa5d2e6f62"],
Cell[225249, 5000, 340, 8, 28, "Message",ExpressionUUID->"b5e5e881-e6a9-4628-8b47-5fee162c7d72"],
Cell[225592, 5010, 431, 13, 56, "Output",ExpressionUUID->"ee1ea422-ac48-48d0-a8a2-71fa8bbce9da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226060, 5028, 480, 14, 52, "Input",ExpressionUUID->"173156e3-77f2-43cd-8d08-7cb5386acf82"],
Cell[226543, 5044, 232, 5, 47, "Output",ExpressionUUID->"eb571bb3-6041-4885-8cfc-830fde0a6ef7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226812, 5054, 240, 4, 41, "WolframAlphaLong",ExpressionUUID->"617508ca-c0c1-46fb-a995-6a8ede81973e"],
Cell[227055, 5060, 17049, 354, 484, "Print",ExpressionUUID->"51ffc778-8d19-4316-a634-e0694297e879"]
}, Open  ]],
Cell[244119, 5417, 121, 3, 35, "Text",ExpressionUUID->"e32e7c0e-c530-484a-a5d8-e9f8ba0924a6"]
}, Open  ]]
}
]
*)

